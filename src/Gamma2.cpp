#include "spectra.hpp"
#include "vector.hpp"
#include <cmath>
#include <fstream>
#include <iostream>
#include <string>

/*
  Fitting formulae and some auxiliary functions for Gamma2_1loop kernel.
  All of functions are taken from the original RegPT code.
*/

double pi = 4.0 * atan(1.0);

double LFunc(double k, double q) { return log(sqr(k + q) / sqr(k - q)); }

double WFunc(double k1, double k2, double k3, double q) {
  double aa, bb;

  aa = -4.0 * k3 * k3 * q * q - 2.0 * (k1 * k1 - q * q) * (k2 * k2 - q * q);
  bb =
      4.0 * k3 * q *
      sqrt(k1 * k1 * k2 * k2 + (-k1 * k1 - k2 * k2 + k3 * k3) * q * q + qua(q));

  return log((aa - bb) / (aa + bb));
}

/*
     Incomplete beta function of the type, B(z, i, 0)
     (i=2, 4, 6)

     this is indeed expressed in terms of elementary functions
*/
double betafunc(int i, double z) {
  double res, a;
  double z_i, z_2, z_3, z_4, z_5, z_6;

  z_i = 1.0;
  for (int j = 0; j < i; j++)
    z_i *= z;

  z_2 = sqr(z);
  z_3 = cub(z);
  z_4 = qua(z);
  z_5 = z * z_4;
  z_6 = z * z_5;

  if (z < 0.1) {
    a = (double)i;
    res = z_i * (1.0 / a + z / (1.0 + a) + z_2 / (2.0 + a) + z_3 / (3.0 + a) +
                 z_4 / (4.0 + a) + z_5 / (5.0 + a) + z_6 / (6.0 + a));
  } else {
    if (i == 2)
      res = (z_2 * (-2.0 / z - (2.0 * log(1.0 - z)) / z_2)) / 2.0;
    else if (i == 4)
      res = (z_4 * ((-2.0 * (6.0 + 3.0 * z + 2.0 * z_2)) / (3.0 * z_3) -
                    (4.0 * log(1.0 - z)) / z_4)) /
            4.0;
    else if (i == 6)
      res = (z_6 * ((-60.0 - 30.0 * z - 20.0 * z_2 - 15.0 * z_3 - 12.0 * z_4) /
                        (10.0 * z_5) -
                    (6.0 * log(1 - z)) / z_6)) /
            6.0;
    else
      res = 0.0;
  }

  return res;
}

/*
     Regular function involving incomplete beta function:

     (k_2 - q_2) * Beta( 4*k*q/(k+q)_2, 4, 0) / (k + q)_2
*/
double small_beta(double k, double q) {
  double res, y;

  y = (k - q) / (k + q);

  if (fabs(y) < 1.0e-6)
    res = 0.0;
  else
    res = y * betafunc(4, 1.0 - y * y);

  return res;
}

/*
     Regular function involving incomplete beta function:

     x * Beta(1-X_2, 2, 0) / sqrt( x + a_2 )

     where a, x and X are defined as

     a = k3 * q
     x = (k1_2 - q_2) * (k2_2 - q_2)
     X = {1 - sqrt(x + a_2)} / {1 + sqrt(x + a_2)}

*/
double big_beta(double k1, double k2, double k3, double q) {
  double res, x, a, y;

  x = (k1 * k1 - q * q) * (k2 * k2 - q * q);
  a = k3 * q;
  y = sqrt(x + a * a) / a;

  if (fabs(y - 1.0) < 1.0e-5)
    res = 0.0;
  else if (fabs(y - 1.0) < 1.0e-2)
    res = 2.0 * a * (-1.0 + y) * (-1.0 + log(4.0) - 2.0 * log(fabs(-1.0 + y))) +
          a * sqr(-1.0 + y) * (3.0 - log(4.0) + 2.0 * log(fabs(-1.0 + y)));
  else
    res = x * betafunc(2, 1.0 - sqr(1.0 - y) / sqr(1.0 + y)) / (a * y);

  return res;
}

double kernel_Gamma2_1loop(Type a, double k1, double k2, double k3, double q) {
  double res;
  bool ireg;

  if ((fabs(k1 / q - 1.0) < 1.0e-3) || (fabs(k2 / q - 1.0) < 1.0e-3) ||
      (fabs(k3 / q - 1.0) < 1.0e-3))
    ireg = true;
  else
    ireg = false;

  switch (a) {
  case DENS:
    if (ireg)
      res = kernel_Gamma2d_reg3rd(k1, k2, k3, q);
    else if (fabs(k2 / k1 - 1.0) < 0.02) {
      if (q > 10.0 * max(k1, max(k2, k3)))
        res = kernel_Gamma2d_lowk(k1, k2, k3, q);
      else if (q < 0.10 * min(k1, min(k2, k3)))
        res = kernel_Gamma2d_highk(k1, k2, k3, q);
      else
        res = kernel_Gamma2d_reg3rd(k1, k2, k3, q);
      // res = kernel_Gamma2d_iso(k1, k2, k3, q);
    } else {
      if (q < 0.1 * min(k1, min(k2, k3)))
        res = kernel_Gamma2d_highk(k1, k2, k3, q);
      else if (q > 10.0 * max(k1, max(k2, k3)))
        res = kernel_Gamma2d_lowk(k1, k2, k3, q);
      // else if(q > 50.0*min(k1, k2) && (k1*k1-k3*k3) < q*q && (k1*k1-k3*k3) >
      // -q*q)
      else if (q > 50.0 * min(k1, k2) &&
               (((k1 * k1 - k3 * k3) < q * q && (k1 * k1 - k3 * k3) > -q * q) ||
                ((k2 * k2 - k3 * k3) < q * q && (k2 * k2 - k3 * k3) > -q * q)))
        res = kernel_Gamma2d_elongate(k1, k2, k3, q);
      else if (q > 100.0 * k3 && k3 < 10.0 * min(k1, k2))
        res = kernel_Gamma2d_coll(k1, k2, k3, q);
      else
        res = kernel_Gamma2d_exact(k1, k2, k3, q);
    }
    break;
  case VELO:
    if (ireg)
      res = kernel_Gamma2v_reg3rd(k1, k2, k3, q);
    else if (fabs(k2 / k1 - 1.0) < 0.02) {
      if (q > 10.0 * max(k1, max(k2, k3)))
        res = kernel_Gamma2v_lowk(k1, k2, k3, q);
      else if (q < 0.10 * min(k1, min(k2, k3)))
        res = kernel_Gamma2v_highk(k1, k2, k3, q);
      else
        res = kernel_Gamma2v_reg3rd(k1, k2, k3, q);
      // res = kernel_Gamma2v_iso(k1, k2, k3, q);
    } else {
      if (q < 0.1 * min(k1, min(k2, k3)))
        res = kernel_Gamma2v_highk(k1, k2, k3, q);
      else if (q > 10.0 * max(k1, max(k2, k3)))
        res = kernel_Gamma2v_lowk(k1, k2, k3, q);
      // else if(q > 50.0*min(k1, k2) && (k1*k1-k3*k3) < q*q && (k1*k1-k3*k3) >
      // -q*q)
      else if (q > 50.0 * min(k1, k2) &&
               (((k1 * k1 - k3 * k3) < q * q && (k1 * k1 - k3 * k3) > -q * q) ||
                ((k2 * k2 - k3 * k3) < q * q && (k2 * k2 - k3 * k3) > -q * q)))
        res = kernel_Gamma2v_elongate(k1, k2, k3, q);
      else if (q > 100.0 * k3 && k3 < 10.0 * min(k1, k2))
        res = kernel_Gamma2v_coll(k1, k2, k3, q);
      else
        res = kernel_Gamma2v_exact(k1, k2, k3, q);
    }
    break;
  default:
    res = 0.0;
    break;
  }

  return res;
}

double kernel_Gamma2d_exact(double k1, double k2, double k3, double q) {
  double kernel1, kernel2, kernel3, kernel4, kernel5;
  double k1_2, k1_4, k1_6, k1_8, k1_9, k1_10, k1_12;
  double k2_2, k2_4, k2_6, k2_8, k2_9, k2_10, k2_12;
  double k3_2, k3_3, k3_4, k3_5, k3_6, k3_8, k3_10;
  double q_2, q_4, q_5, q_6;

  k1_2 = sqr(k1);
  k1_4 = qua(k1);
  k1_6 = k1_2 * k1_4;
  k1_8 = k1_2 * k1_6;
  k1_9 = k1 * k1_8;
  k1_10 = k1 * k1_9;
  k1_12 = k1_10 * k1_2;

  k2_2 = sqr(k2);
  k2_4 = qua(k2);
  k2_6 = k2_2 * k2_4;
  k2_8 = k2_2 * k2_6;
  k2_9 = k2 * k2_8;
  k2_10 = k2 * k2_9;
  k2_12 = k2_10 * k2_2;

  k3_2 = sqr(k3);
  k3_3 = cub(k3);
  k3_4 = qua(k3);
  k3_5 = k3 * k3_4;
  k3_6 = k3 * k3_5;
  k3_8 = k3_2 * k3_6;
  k3_10 = k3_2 * k3_8;

  q_2 = sqr(q);
  q_4 = qua(q);
  q_5 = q * q_4;
  q_6 = q * q_5;

  kernel1 =
      (pi *
       (15.0 * k1_6 * k2_6 * k3_4 *
            (3.0 * sqr(k1_2 - k2_2) *
                 (13.0 * k1_4 - 4.0 * k1_2 * k2_2 + 13.0 * k2_4) -
             (k1_2 + k2_2) *
                 (805.0 * k1_4 - 2306.0 * k1_2 * k2_2 + 805.0 * k2_4) * k3_2 +
             (377.0 * k1_4 + 940.0 * k1_2 * k2_2 + 377.0 * k2_4) * k3_4 +
             361.0 * (k1_2 + k2_2) * k3_6 + 28.0 * k3_8) /
            q_4 -
        10.0 * k1_6 * k2_6 * k3_4 *
            (3.0 * (k1_2 + k2_2) *
                 (911.0 * k1_4 - 1570.0 * k1_2 * k2_2 + 911.0 * k2_4) +
             (-22261.0 * k1_4 + 45566.0 * k1_2 * k2_2 - 22261.0 * k2_4) * k3_2 +
             12037.0 * (k1_2 + k2_2) * k3_4 + 6891.0 * k3_6) /
            q_2 +
        k1_4 * k2_4 * k3_2 *
            (3150.0 * k1_2 * k2_2 * sqr(k1_2 - k2_2) * (k1_2 + k2_2) +
             3.0 *
                 (19475.0 * k1_8 - 139742.0 * k1_6 * k2_2 +
                  246974.0 * k1_4 * k2_4 - 139742.0 * k1_2 * k2_6 +
                  19475.0 * k2_8) *
                 k3_2 -
             2.0 * (k1_2 + k2_2) *
                 (53220.0 * k1_4 - 178337.0 * k1_2 * k2_2 + 53220.0 * k2_4) *
                 k3_4 +
             (38925.0 * k1_4 + 9532.0 * k1_2 * k2_2 + 38925.0 * k2_4) * k3_6 +
             9090.0 * (k1_2 + k2_2) * k3_8) -
        15.0 * k1_2 * k2_2 *
            (189.0 * k1_4 * k2_4 * sqr(k1_2 - k2_2) * (k1_2 + k2_2) -
             84.0 * k1_4 * k2_4 *
                 (43.0 * k1_4 - 80.0 * k1_2 * k2_2 + 43.0 * k2_4) * k3_2 +
             (k1_2 + k2_2) *
                 (1949.0 * k1_8 - 10643.0 * k1_6 * k2_2 +
                  20573.0 * k1_4 * k2_4 - 10643.0 * k1_2 * k2_6 +
                  1949.0 * k2_8) *
                 k3_4 +
             2.0 *
                 (-1959.0 * k1_8 + 3283.0 * k1_6 * k2_2 + 1907.0 * k1_4 * k2_4 +
                  3283.0 * k1_2 * k2_6 - 1959.0 * k2_8) *
                 k3_6 +
             3.0 * (k1_2 + k2_2) *
                 (663.0 * k1_4 - 811.0 * k1_2 * k2_2 + 663.0 * k2_4) * k3_8 -
             20.0 * (k1_4 + k2_4) * k3_10) *
            q_2 +
        45.0 *
            (-252.0 * k1_6 * k2_6 * sqr(k1_2 - k2_2) +
             168.0 * k1_6 * k2_6 * (k1_2 + k2_2) * k3_2 +
             (55.0 * k1_12 - 285.0 * k1_10 * k2_2 + 157.0 * k1_8 * k2_4 +
              230.0 * k1_6 * k2_6 + 157.0 * k1_4 * k2_8 - 285.0 * k1_2 * k2_10 +
              55.0 * k2_12) *
                 k3_4 -
             3.0 * (k1_2 + k2_2) *
                 (55.0 * k1_8 - 201.0 * k1_6 * k2_2 + 156.0 * k1_4 * k2_4 -
                  201.0 * k1_2 * k2_6 + 55.0 * k2_8) *
                 k3_6 +
             3.0 *
                 (55.0 * k1_8 - 51.0 * k1_6 * k2_2 - 51.0 * k1_2 * k2_6 +
                  55.0 * k2_8) *
                 k3_8 -
             55.0 * (k1_6 + k2_6) * k3_10) *
            q_4)) /
      (1552320.0 * k1_8 * k2_8 * k3_4);

  kernel2 =
      -(pi * sqr(k1 / q - 1.0) * sqr(k1 / q + 1.0) *
        (39.0 * k1_12 + 165.0 * cub(k2_2 - k3_2) * q_6 -
         k1_10 * (582.0 * k2_2 + 791.0 * k3_2 + 1947.0 * q_2) -
         3.0 * k1_2 * (k2 - k3) * (k2 + k3) * q_4 *
             (558.0 * k2_4 - 473.0 * k2_2 * k3_2 - 85.0 * k3_4 +
              3.0 * (95.0 * k2_2 - 51.0 * k3_2) * q_2) +
         k1_6 * (492.0 * k2_6 - 633.0 * k2_4 * k3_2 + 390.0 * k2_2 * k3_4 +
                 151.0 * k3_6 +
                 (-6465.0 * k2_4 + 758.0 * k2_2 * k3_2 + 179.0 * k3_4) * q_2 -
                 3.0 * (2428.0 * k2_2 + 371.0 * k3_2) * q_4 + 219.0 * q_6) +
         k1_8 * (51.0 * k2_4 + 601.0 * k3_4 + 1787.0 * k3_2 * q_2 +
                 1689.0 * q_4 + k2_2 * (2120.0 * k3_2 + 6891.0 * q_2)) +
         k1_4 * q_2 *
             (1017.0 * k2_6 + 269.0 * k3_6 - 321.0 * k3_4 * q_2 +
              405.0 * k3_2 * q_4 + k2_4 * (-1677.0 * k3_2 + 7269.0 * q_2) +
              k2_2 * (391.0 * k3_4 - 4376.0 * k3_2 * q_2 + 471.0 * q_4))) *
        LFunc(k1, q)) /
      (413952.0 * k1_9 * k2_2 * q);

  kernel3 =
      -(pi * sqr(k2 / q - 1.0) * sqr(k2 / q + 1.0) *
        (k2_6 * (492.0 * k1_6 + 39.0 * k2_6 - 791.0 * k2_4 * k3_2 +
                 601.0 * k2_2 * k3_4 + 151.0 * k3_6 +
                 k1_4 * (51.0 * k2_2 - 633.0 * k3_2) +
                 k1_2 * (-582.0 * k2_4 + 2120.0 * k2_2 * k3_2 + 390.0 * k3_4)) +
         k2_4 *
             (1017.0 * k1_6 - 1947.0 * k2_6 + 1787.0 * k2_4 * k3_2 +
              179.0 * k2_2 * k3_4 + 269.0 * k3_6 -
              3.0 * k1_4 * (2155.0 * k2_2 + 559.0 * k3_2) +
              k1_2 * (6891.0 * k2_4 + 758.0 * k2_2 * k3_2 + 391.0 * k3_4)) *
             q_2 -
         k2_2 *
             (3.0 * (k1 - k2) * (k1 + k2) *
                  (558.0 * k1_4 - 1865.0 * k1_2 * k2_2 + 563.0 * k2_4) +
              (-3093.0 * k1_4 + 4376.0 * k1_2 * k2_2 + 1113.0 * k2_4) * k3_2 +
              3.0 * (388.0 * k1_2 + 107.0 * k2_2) * k3_4 + 255.0 * k3_6) *
             q_4 +
         3.0 *
             (55.0 * k1_6 - 15.0 * k1_4 * (19.0 * k2_2 + 11.0 * k3_2) +
              (k2 - k3) * (k2 + k3) *
                  (73.0 * k2_4 + 208.0 * k2_2 * k3_2 + 55.0 * k3_4) +
              k1_2 * (157.0 * k2_4 + 438.0 * k2_2 * k3_2 + 165.0 * k3_4)) *
             q_6) *
        LFunc(k2, q)) /
      (413952.0 * k1_2 * k2_9 * q);

  kernel4 =
      (pi * (2.0 * qua(k3 / q) + 7.0 * sqr(k3 / q) - 9.0) *
       (k3_4 * (k1_6 - 9.0 * k1_4 * k2_2 - 9.0 * k1_2 * k2_4 + k2_6 +
                16.0 * sqr(k1_2 - k2_2) * k3_2 - 15.0 * (k1_2 + k2_2) * k3_4 -
                2.0 * k3_6) +
        2.0 * k3_2 *
            (sqr(k1_2 - k2_2) * (k1_2 + k2_2) -
             4.0 * (7.0 * k1_4 - 17.0 * k1_2 * k2_2 + 7.0 * k2_4) * k3_2 +
             23.0 * (k1_2 + k2_2) * k3_4) *
            q_2 -
        (3.0 * sqr(k1_2 - k2_2) * (k1_2 + k2_2) -
         4.0 * (13.0 * k1_4 - 24.0 * k1_2 * k2_2 + 13.0 * k2_4) * k3_2 +
         47.0 * (k1_2 + k2_2) * k3_4 + 2.0 * k3_6) *
            q_4 +
        4.0 * (-3.0 * sqr(k1_2 - k2_2) + 2.0 * (k1_2 + k2_2) * k3_2 + k3_4) *
            q_6) *
       LFunc(k3, q)) /
      (59136.0 * k1_2 * k2_2 * k3_5 * q);

  kernel5 =
      (3.0 * k3_3 * pi * sqr(k1_2 - q_2) * sqr(-k2_2 + q_2) *
       WFunc(k1, k2, k3, q)) /
          (4312.0 * k1_2 * k2_2 * q_5 *
           sqrt(k1_2 * k2_2 - (k1_2 + k2_2 - k3_2) * q_2 + q_4)) +
      (k2 * pi * sqr(k1_2 - q_2) * (2.0 * k3_4 + 7.0 * k3_2 * q_2 - 9.0 * q_4) *
       WFunc(k1, k3, k2, q)) /
          (7392.0 * k1_2 * q_5 *
           sqrt(k1_2 * k3_2 - (k1_2 - k2_2 + k3_2) * q_2 + q_4)) +
      (k1 * pi * sqr(k2_2 - q_2) * (2.0 * k3_4 + 7.0 * k3_2 * q_2 - 9.0 * q_4) *
       WFunc(k2, k3, k1, q)) /
          (7392.0 * k2_2 * q_5 *
           sqrt(k1_2 * q_2 + (k2 - q) * (k3 - q) * (k2 + q) * (k3 + q)));

  return (kernel1 + kernel2 + kernel3 + kernel4 + kernel5);
}

double kernel_Gamma2d_iso(double k1, double k2, double k3, double q) {
  double kernel, eps;
  double k1_2, k1_4, k1_6, k1_8, k1_10, k1_11, k1_12, k1_14;
  double k3_2, k3_3, k3_4, k3_6, k3_8;
  double q_2, q_4, q_5, q_6, q_8, q_10;

  eps = k2 / k1 - 1.0;

  k1_2 = sqr(k1);
  k1_4 = qua(k1);
  k1_6 = k1_2 * k1_4;
  k1_8 = k1_2 * k1_6;
  k1_10 = k1_2 * k1_8;
  k1_11 = k1 * k1_10;
  k1_12 = k1_10 * k1_2;
  k1_14 = k1_2 * k1_12;

  k3_2 = sqr(k3);
  k3_3 = cub(k3);
  k3_4 = qua(k3);
  k3_6 = k3_2 * k3_4;
  k3_8 = k3_2 * k3_6;

  q_2 = sqr(q);
  q_4 = qua(q);
  q_5 = q * q_4;
  q_6 = q * q_5;
  q_8 = q_2 * q_6;
  q_10 = q_2 * q_8;

  kernel =
      (pi *
       ((-60.0 * eps * (k1 - q) * q * (k1 + q) *
         (165.0 * k3_6 * q_6 + k1_10 * (-696.0 * k3_2 + 504.0 * q_2) -
          k1_8 * (991.0 * k3_4 + 868.0 * k3_2 * q_2) +
          k1_6 * (-151.0 * k3_6 - 570.0 * k3_4 * q_2 + 2396.0 * k3_2 * q_4) +
          k1_4 * (-269.0 * k3_6 * q_2 + 1485.0 * k3_4 * q_4 -
                  1224.0 * k3_2 * q_6) +
          3.0 * k1_2 * (85.0 * k3_6 * q_4 - 12.0 * k3_4 * q_6))) /
            k1_10 +
        8.0 * q *
            ((420.0 * eps * sqr(k1_2 - q_2) *
              (2.0 * k3_4 + 7.0 * k3_2 * q_2 - 9.0 * q_4)) /
                 (k1_2 * k3_2 - k3_2 * q_2 + q_4) +
             (2160.0 * eps * k3_4 * cub(-k1_2 + q_2)) /
                 (k1_2 * (k1_4 - 2.0 * k1_2 * q_2 + k3_2 * q_2 + q_4)) +
             (-420.0 * eps * k1_12 * k3_2 * (k1_2 - q_2) *
                  (2.0 * k3_4 + 7.0 * k3_2 * q_2 - 9.0 * q_4) +
              (k1_2 * k3_2 - k3_2 * q_2 + q_4) *
                  (2475.0 * (-1.0 + 5.0 * eps) * k3_8 * q_8 +
                   360.0 * (1 + eps) * k1_12 * k3_2 *
                       (29.0 * k3_2 - 21.0 * q_2) -
                   60.0 * (-1.0 + 4.0 * eps) * k1_2 * k3_6 * q_6 *
                       (5.0 * k3_2 + 9.0 * q_2) -
                   45.0 * (-1.0 + 3.0 * eps) * k1_4 * k3_4 * q_4 *
                       (202.0 * k3_4 - 515.0 * k3_2 * q_2 + 408.0 * q_4) +
                   15.0 * k1_10 *
                       (847.0 * k3_6 - 348.0 * k3_4 * q_2 + 644.0 * k3_2 * q_4 +
                        252.0 * q_6) -
                   (-1.0 + 2.0 * eps) * k1_6 * k3_2 *
                       (210.0 * k3_8 - 34455.0 * k3_6 * q_2 +
                        43691.0 * k3_4 * q_4 - 68325.0 * k3_2 * q_6 +
                        1890.0 * q_8) -
                   (-1.0 + eps) * k1_8 *
                       (5415.0 * k3_8 - 120370.0 * k3_6 * q_2 +
                        143794.0 * k3_4 * q_4 - 47775.0 * k3_2 * q_6 +
                        7560.0 * q_8))) /
                 (k1_10 * k3_2 * (k1_2 * k3_2 - k3_2 * q_2 + q_4))) +
        (15.0 *
         (165.0 * (2.0 - 11.0 * eps) * k3_6 * q_10 -
          24.0 * (2.0 + 3.0 * eps) * k1_14 * (29.0 * k3_2 - 21.0 * q_2) +
          3.0 * (-2.0 + 9.0 * eps) * k1_2 * k3_4 * q_8 *
              (25.0 * k3_2 + 12.0 * q_2) -
          (-2.0 + 3.0 * eps) * k1_8 * k3_2 * q_2 *
              (33.0 * k3_4 + 1634.0 * k3_2 * q_2 - 6884.0 * q_4) -
          (2.0 + eps) * k1_12 *
              (991.0 * k3_4 - 524.0 * k3_2 * q_2 + 1008.0 * q_4) +
          (-2.0 + 7.0 * eps) * k1_4 * k3_2 * q_6 *
              (614.0 * k3_4 - 1557.0 * k3_2 * q_2 + 1224.0 * q_4) -
          2.0 * (-2.0 + 5.0 * eps) * k1_6 * k3_2 * q_4 *
              (321.0 * k3_4 - 1788.0 * k3_2 * q_2 + 2422.0 * q_4) +
          (-2.0 + eps) * k1_10 *
              (151.0 * k3_6 - 1412.0 * k3_4 * q_2 - 3436.0 * k3_2 * q_4 -
               504.0 * q_6)) *
         log(sqr(k1 + q) / sqr(k1 - q))) /
            k1_11 -
        (210.0 * (2.0 * k3_4 + 7.0 * k3_2 * q_2 - 9.0 * q_4) *
         (8.0 * (1 + eps) * k1_6 * k3_2 -
          4.0 * k1_4 * (3.0 * k3_2 * q_2 + q_4) -
          (-1.0 + eps) * k1_2 *
              (15.0 * k3_6 - 46.0 * k3_4 * q_2 + 47.0 * k3_2 * q_4 -
               8.0 * q_6) -
          (-1.0 + 2.0 * eps) * k3_2 * (k3_6 + k3_2 * q_4 - 2.0 * q_6)) *
         log(sqr(k3 + q) / sqr(k3 - q))) /
            (k1_4 * k3_3) +
        (840.0 * (-k1 + q) * (k1 + q) *
         (-2.0 * k3_4 - 7.0 * k3_2 * q_2 + 9.0 * q_4) *
         (2.0 * (1 + eps) * k1_4 * k3_2 + (-2.0 + eps) * q_4 * (-k3_2 + q_2) +
          k1_2 * q_2 * (-((4.0 + eps) * k3_2) + (2.0 + 3 * eps) * q_2)) *
         log((-(k3_2 * q_2) + q_4 + k1_2 * (k3_2 + q_2) +
              2 * k1 * q * sqrt(k1_2 * k3_2 - k3_2 * q_2 + q_4)) /
             (-(k3_2 * q_2) + q_4 + k1_2 * (k3_2 + q_2) -
              2.0 * k1 * q * sqrt(k1_2 * k3_2 - k3_2 * q_2 + q_4)))) /
            (k1 * pow((k1_2 * k3_2 - k3_2 * q_2 + q_4), 1.5)) +
        (4320.0 * k3_3 * cub(k1_2 - q_2) *
         ((1.0 + eps) * k1_6 - 3.0 * k1_4 * q_2 +
          (-1.0 + 2.0 * eps) * q_4 * (k3_2 + q_2) +
          k1_2 * q_2 * ((1.0 + 2.0 * eps) * k3_2 - 3.0 * (-1.0 + eps) * q_2)) *
         log(-(
             (4.0 * k3_2 * q_2 + 2.0 * sqr(k1_2 - q_2) +
              4.0 * k3 * q * sqrt(k1_4 + (-2.0 * k1_2 + k3_2) * q_2 + q_4)) /
             (-4.0 * k3_2 * q_2 - 2.0 * sqr(k1_2 - q_2) +
              4.0 * k3 * q * sqrt(k1_4 + (-2.0 * k1_2 + k3_2) * q_2 + q_4))))) /
            (k1_4 * pow((k1_4 - 2.0 * k1_2 * q_2 + k3_2 * q_2 + q_4), 1.5)))) /
      (6209280.0 * q_5);

  return kernel;
}

double kernel_Gamma2d_highk(double k1, double k2, double k3, double q) {
  double kernel;
  double k1_2, k1_4, k1_6, k1_8, k1_12;
  double k2_2, k2_4, k2_6, k2_8, k2_12;
  double k3_2, k3_4, k3_6, k3_8, k3_10, k3_12, k3_14;
  double q_2;

  k1_2 = sqr(k1);
  k1_4 = qua(k1);
  k1_6 = k1_2 * k1_4;
  k1_8 = k1_2 * k1_6;
  k1_12 = k1_4 * k1_8;

  k2_2 = sqr(k2);
  k2_4 = qua(k2);
  k2_6 = k2_2 * k2_4;
  k2_8 = k2_2 * k2_6;
  k2_12 = k2_6 * k2_6;

  k3_2 = sqr(k3);
  k3_4 = qua(k3);
  k3_6 = k3_2 * k3_4;
  k3_8 = k3_2 * k3_6;
  k3_10 = k3_2 * k3_8;
  k3_12 = k3_2 * k3_10;
  k3_14 = k3_2 * k3_12;

  q_2 = sqr(q);

  kernel =
      (pi *
       (8085.0 * k1_4 * k2_4 * k3_6 *
            (5.0 * sqr(k1_2 - k2_2) - 3.0 * (k1_2 + k2_2) * k3_2 - 2.0 * k3_4) /
            q_2 +
        7.0 * k1_2 * k2_2 * k3_2 *
            (28.0 * qua(k1_2 - k2_2) * (k1_2 + k2_2) +
             3.0 * sqr(k1_2 - k2_2) *
                 (1094.0 * k1_4 - 6321.0 * k1_2 * k2_2 + 1094.0 * k2_4) * k3_2 -
             6.0 * (k1_2 + k2_2) *
                 (988.0 * k1_4 - 3189.0 * k1_2 * k2_2 + 988.0 * k2_4) * k3_4 +
             (1970.0 * k1_4 + 741.0 * k1_2 * k2_2 + 1970.0 * k2_4) * k3_6 +
             576.0 * (k1_2 + k2_2) * k3_8 + 72.0 * k3_10) +
        (-14.0 * qua(k1 - k2) * qua(k1 + k2) * (k1_2 + k2_2) *
             (12.0 * k1_4 - 55.0 * k1_2 * k2_2 + 12.0 * k2_4) +
         7.0 *
             (28.0 * k1_12 + 4005.0 * k1_8 * k2_4 - 8066.0 * k1_6 * k2_6 +
              4005.0 * k1_4 * k2_8 + 28.0 * k2_12) *
             k3_2 -
         6.0 * (k1_2 + k2_2) *
             (2999.0 * k1_8 - 16730.0 * k1_6 * k2_2 + 31403.0 * k1_4 * k2_4 -
              16730.0 * k1_2 * k2_6 + 2999.0 * k2_8) *
             k3_4 +
         (34488.0 * k1_8 - 51644.0 * k1_6 * k2_2 - 33313.0 * k1_4 * k2_4 -
          51644.0 * k1_2 * k2_6 + 34488.0 * k2_8) *
             k3_6 -
         2.0 * (k1_2 + k2_2) *
             (7649.0 * k1_4 - 8021.0 * k1_2 * k2_2 + 7649.0 * k2_4) * k3_8 -
         1296.0 * (k1_4 + k2_4) * k3_10 + 504.0 * (k1_2 + k2_2) * k3_12 -
         432.0 * k3_14) *
            q_2)) /
      (339570.0 * k1_6 * k2_6 * k3_4);

  return kernel;
}

double kernel_Gamma2d_lowk(double k1, double k2, double k3, double q) {
  double kernel;
  double k1_2, k1_4, k1_6, k1_8;
  double k2_2, k2_4, k2_6;
  double k3_2, k3_4, k3_6;
  double q_2, q_4;

  k1_2 = sqr(k1);
  k1_4 = qua(k1);
  k1_6 = k1_2 * k1_4;
  k1_8 = k1_2 * k1_6;

  k2_2 = sqr(k2);
  k2_4 = qua(k2);
  k2_6 = k2_2 * k2_4;

  k3_2 = sqr(k3);
  k3_4 = qua(k3);
  k3_6 = k3_2 * k3_4;

  q_2 = sqr(q);
  q_4 = qua(q);

  kernel =
      (pi * (2426.0 * k1_8 -
             4.0 * k1_6 * (3110.0 * k2_2 + 2087.0 * k3_2 + 3006.0 * q_2) +
             k1_2 * (2.0 * (-6220.0 * k2_6 + 7198.0 * k2_4 * k3_2 +
                            5449.0 * k2_2 * k3_4 + 1073.0 * k3_6) +
                     (12024.0 * k2_4 - 76684.0 * k2_2 * k3_2 - 20085.0 * k3_4) *
                         q_2) +
             k1_4 * (20028.0 * k2_4 + 3363.0 * k3_4 + 44518.0 * k3_2 * q_2 +
                     4.0 * k2_2 * (3599.0 * k3_2 + 3006.0 * q_2)) +
             (k2 - k3) * (k2 + k3) *
                 (2426.0 * k2_6 - 413.0 * k3_6 + 12409.0 * k3_4 * q_2 -
                  18.0 * k2_4 * (329.0 * k3_2 + 668.0 * q_2) +
                  k2_2 * (-2559.0 * k3_4 + 32494.0 * k3_2 * q_2)))) /
      (339570.0 * k1_2 * k2_2 * q_4);

  return kernel;
}

double kernel_Gamma2d_elongate(double k1, double k2, double k3, double q) {
  double kernel, eps, k;
  double k3_2, k3_3, k3_4, k3_5, k3_6, k3_8, k3_10;
  double q_2, q_3, q_4, q_5, q_6, q_8;
  double k_2, k_4, k_6, k_7, k_8, k_9, k_10, k_12, k_14, k_16, k_17, k_18, k_19;
  double eps_2;

  if (k1 > k2) {
    k = k1;
    eps = k2 / k1;
  } else {
    k = k2;
    eps = k1 / k2;
  }

  k3_2 = sqr(k3);
  k3_3 = cub(k3);
  k3_4 = qua(k3);
  k3_5 = k3 * k3_4;
  k3_6 = k3 * k3_5;
  k3_8 = k3_2 * k3_6;
  k3_10 = k3_2 * k3_8;

  q_2 = sqr(q);
  q_3 = cub(q);
  q_4 = qua(q);
  q_5 = q * q_4;
  q_6 = q * q_5;
  q_8 = q_2 * q_6;

  k_2 = sqr(k);
  k_4 = qua(k);
  k_6 = k_2 * k_4;
  k_7 = k * k_6;
  k_8 = k * k_7;
  k_9 = k * k_8;
  k_10 = k * k_9;
  k_12 = k_2 * k_10;
  k_14 = k_2 * k_12;
  k_16 = k_2 * k_14;
  k_17 = k * k_16;
  k_18 = k * k_17;
  k_19 = k * k_18;

  eps_2 = sqr(eps);

  kernel =
      (pi *
       ((4.0 * k_16 * q *
         (42100.0 * k_6 + 13841.0 * k3_6 - 10132.0 * k3_4 * q_2 -
          405090.0 * k3_2 * q_4 - 139020.0 * q_6 -
          3.0 * k_4 * (13429.0 * k3_2 + 512318.0 * q_2) +
          k_2 * (54346.0 * k3_4 + 144594.0 * k3_2 * q_2 - 2024631.0 * q_4))) /
            7.0 -
        (4.0 * k_10 * q *
         (1350.0 * k_12 * k3_4 - 7425.0 * k3_8 * q_8 -
          15.0 * k_10 *
              (1501.0 * k3_6 + 1318.0 * k3_4 * q_2 - 210.0 * k3_2 * q_4 +
               189.0 * q_6) -
          2.0 * k_8 *
              (7050.0 * k3_8 - 227830.0 * k3_6 * q_2 + 370461.0 * k3_4 * q_4 -
               50400.0 * k3_2 * q_6 + 11340.0 * q_8) +
          k_6 *
              (-5415.0 * k3_10 + 120370.0 * k3_8 * q_2 - 250234.0 * k3_6 * q_4 +
               148950.0 * k3_4 * q_6 - 7560.0 * k3_2 * q_8) -
          15.0 * k_4 *
              (2595.0 * k3_8 * q_4 - 6566.0 * k3_6 * q_6 + 471.0 * k3_4 * q_8) +
          135.0 * k_2 * (221.0 * k3_8 * q_6 - 146.0 * k3_6 * q_8))) /
            k3_4 -
        15.0 * k_9 * sqr(k - q) * sqr(k + q) *
            (-582.0 * k_10 + 495.0 * k3_4 * q_6 +
             k_8 * (2120.0 * k3_2 + 6891.0 * q_2) +
             k_6 * (390.0 * k3_4 + 758.0 * k3_2 * q_2 - 7284.0 * q_4) +
             k_4 * (391.0 * k3_4 * q_2 - 4376.0 * k3_2 * q_4 + 471.0 * q_6) -
             6.0 * k_2 * (194.0 * k3_4 * q_4 - 219 * k3_2 * q_6)) *
            log(sqr(k + q) / sqr(k - q)) -
        (105.0 * k_16 * (2.0 * k3_4 + 7.0 * k3_2 * q_2 - 9.0 * q_4) *
         (15.0 * k3_8 - 46.0 * k3_6 * q_2 + 47.0 * k3_4 * q_4 -
          8.0 * k3_2 * q_6 + k_4 * (9.0 * k3_4 + 2.0 * k3_2 * q_2 - 3.0 * q_4) +
          8.0 * k_2 *
              (4.0 * k3_6 - 17.0 * k3_4 * q_2 + 12.0 * k3_2 * q_4 -
               3.0 * q_6)) *
         log(sqr(k3 + q) / sqr(k3 - q))) /
            k3_5 +
        (420.0 * k_19 * q_3 * (-k3_2 + q_2) * (2.0 * k3_2 + 9.0 * q_2) *
         (-4.0 * k * sqrt(q_2 * (k_2 - k3_2 + q_2)) +
          q * (4.0 * k_2 - 3.0 * k3_2 + 3.0 * q_2) *
              log((2.0 * k_2 * q - k3_2 * q + q_3 +
                   2.0 * k * sqrt(q_2 * (k_2 - k3_2 + q_2))) /
                  (2.0 * k_2 * q - k3_2 * q + q_3 -
                   2.0 * k * sqrt(q_2 * (k_2 - k3_2 + q_2)))))) /
            pow(q_2 * (k_2 - k3_2 + q_2), 1.5) +
        (2160.0 * k_16 * k3_3 * q_3 * sqr(k_2 - q_2) *
         (4.0 * k3 * sqrt(q_2 * (-k_2 + k3_2 + q_2)) +
          q * (3.0 * k_2 - 4.0 * k3_2 - 3.0 * q_2) *
              log(-((-(k_2 * q) + 2.0 * k3_2 * q + q_3 +
                     2.0 * k3 * sqrt(q_2 * (-k_2 + k3_2 + q_2))) /
                    (k_2 * q - 2.0 * k3_2 * q - q_3 +
                     2.0 * k3 * sqrt(q_2 * (-k_2 + k3_2 + q_2))))))) /
            pow(q_2 * (-k_2 + k3_2 + q_2), 1.5) +
        ((4.0 * k_14 * q_3 *
          (218739.0 * k_6 + 46820.0 * k3_6 - 49266.0 * k3_4 * q_2 +
           187740.0 * k3_2 * q_4 - 22995.0 * q_6 -
           6.0 * k_4 * (66043.0 * k3_2 - 333130.0 * q_2) +
           k_2 * (88699.0 * k3_4 - 918974.0 * k3_2 * q_2 + 847245 * q_4))) /
             7.0 +
         (4.0 * k_8 * q *
          (585.0 * k_14 * k3_4 - 2475.0 * k3_10 * q_8 +
           15.0 * k_2 * k3_8 * q_6 * (20.0 * k3_2 - 459.0 * q_2) +
           45.0 * k_4 * k3_6 * q_4 *
               (202.0 * k3_4 + 148.0 * k3_2 * q_2 + 135.0 * q_4) -
           15.0 * k_12 *
               (805.0 * k3_6 + 1822.0 * k3_4 * q_2 - 210.0 * k3_2 * q_4 +
                189.0 * q_6) +
           k_10 *
               (5655.0 * k3_8 + 222610.0 * k3_6 * q_2 - 419226.0 * k3_4 * q_4 +
                54180.0 * k3_2 * q_6 - 11340.0 * q_8) +
           2.0 * k_6 * k3_4 *
               (210.0 * k3_8 - 34455.0 * k3_6 * q_2 + 4766.0 * k3_4 * q_4 -
                28605.0 * k3_2 * q_6 + 5175.0 * q_8) +
           k_8 * k3_2 *
               (5415.0 * k3_8 - 120370.0 * k3_6 * q_2 + 250234.0 * k3_4 * q_4 -
                148950.0 * k3_2 * q_6 + 7560.0 * q_8))) /
             k3_4 -
         15.0 * k_7 * sqr(k - q) * sqr(k + q) *
             (39.0 * k_12 - 165.0 * k3_6 * q_6 -
              k_10 * (791.0 * k3_2 + 1947.0 * q_2) +
              k_8 * (601.0 * k3_4 + 1787.0 * k3_2 * q_2 + 1689.0 * q_4) +
              k_6 * (151.0 * k3_6 + 179.0 * k3_4 * q_2 - 1113.0 * k3_2 * q_4 +
                     219.0 * q_6) +
              k_4 * (269.0 * k3_6 * q_2 - 321.0 * k3_4 * q_4 +
                     405.0 * k3_2 * q_6) -
              51.0 * k_2 * (5.0 * k3_6 * q_4 + 9.0 * k3_4 * q_6)) *
             log(sqr(k + q) / sqr(k - q)) +
         (105.0 * k_14 * (2 * k3_4 + 7.0 * k3_2 * q_2 - 9.0 * q_4) *
          (k_6 * (k3_4 + 2.0 * k3_2 * q_2 - 3.0 * q_4) +
           4.0 * k_4 *
               (4.0 * k3_6 - 14.0 * k3_4 * q_2 + 13.0 * k3_2 * q_4 -
                3.0 * q_6) -
           2.0 * k3_4 * (k3_6 + k3_2 * q_4 - 2.0 * q_6) +
           k_2 * (-15.0 * k3_8 + 46.0 * k3_6 * q_2 - 47.0 * k3_4 * q_4 +
                  8.0 * k3_2 * q_6)) *
          log(sqr(k3 + q) / sqr(k3 - q))) /
             k3_5 -
         (840.0 * k_17 * q_4 * (-2.0 * k3_4 - 7.0 * k3_2 * q_2 + 9.0 * q_4) *
          log((2.0 * k_2 * q - k3_2 * q + q_3 +
               2.0 * k * sqrt(q_2 * (k_2 - k3_2 + q_2))) /
              (2.0 * k_2 * q - k3_2 * q + q_3 -
               2.0 * k * sqrt(q_2 * (k_2 - k3_2 + q_2))))) /
             sqrt(q_2 * (k_2 - k3_2 + q_2)) +
         (4320.0 * k_14 * k3_3 * q_4 * sqr(k_2 - q_2) *
          log(-((-(k_2 * q) + 2.0 * k3_2 * q + q_3 +
                 2.0 * k3 * sqrt(q_2 * (-k_2 + k3_2 + q_2))) /
                (k_2 * q - 2.0 * k3_2 * q - q_3 +
                 2.0 * k3 * sqrt(q_2 * (-k_2 + k3_2 + q_2)))))) /
             sqrt(q_2 * (-k_2 + k3_2 + q_2))) /
            eps_2)) /
      (6209280.0 * k_18 * q_5);

  return kernel;
}

double kernel_Gamma2d_coll(double k1, double k2, double k3, double q) {
  double kernel, eps;
  double k1_2, k1_4, k1_6, k1_7, k1_8, k1_9, k1_10, k1_12, k1_14;
  double k2_2, k2_3, k2_4, k2_5, k2_6, k2_7, k2_8, k2_9, k2_10, k2_11, k2_12,
      k2_14;
  double q_2, q_3, q_4, q_5, q_6, q_8;
  double eps_2, eps_4;

  eps = k3 / k2;

  k1_2 = sqr(k1);
  k1_4 = qua(k1);
  k1_6 = k1_2 * k1_4;
  k1_7 = k1 * k1_6;
  k1_8 = k1 * k1_7;
  k1_9 = k1 * k1_8;
  k1_10 = k1 * k1_9;
  k1_12 = k1_2 * k1_10;
  k1_14 = k1_2 * k1_12;

  k2_2 = sqr(k2);
  k2_3 = cub(k2);
  k2_4 = qua(k2);
  k2_5 = k2 * k2_4;
  k2_6 = k2 * k2_5;
  k2_7 = k2 * k2_6;
  k2_8 = k2 * k2_7;
  k2_9 = k2 * k2_8;
  k2_10 = k2 * k2_9;
  k2_11 = k2 * k2_10;
  k2_12 = k2 * k2_11;
  k2_14 = k2_2 * k2_12;

  q_2 = sqr(q);
  q_3 = cub(q);
  q_4 = qua(q);
  q_5 = q * q_4;
  q_6 = q * q_5;
  q_8 = q_2 * q_6;

  eps_2 = sqr(eps);
  eps_4 = qua(eps);

  kernel =
      (pi *
       (-84.0 * k1_7 * k2_7 * q_3 *
            (43.0 * k1_6 + 43.0 * k2_6 - 3408.0 * k2_4 * q_2 -
             2275.0 * k2_2 * q_4 + 180.0 * q_6 -
             k1_4 * (403.0 * k2_2 + 3408.0 * q_2) +
             k1_2 * (-403.0 * k2_4 + 7736.0 * k2_2 * q_2 - 2275.0 * q_4)) +
        12.0 * k1 * k2 * q *
            (195.0 * k1_14 * k2_6 + 825.0 * k2_12 * q_8 -
             5.0 * k1_2 * k2_10 * q_6 * (1949.0 * k2_2 + 855.0 * q_2) +
             5.0 * k1_4 * k2_8 * q_4 *
                 (3895.0 * k2_4 + 8694.0 * k2_2 * q_2 + 471.0 * q_4) +
             k1_10 * k2_2 *
                 (510.0 * k2_8 + 6590.0 * k2_6 * q_2 - 139742.0 * k2_4 * q_4 +
                  43470.0 * k2_2 * q_6 - 4275.0 * q_8) -
             5.0 * k1_12 *
                 (90.0 * k2_8 + 1822.0 * k2_6 * q_2 - 3895.0 * k2_4 * q_4 +
                  1949.0 * k2_2 * q_6 - 165.0 * q_8) +
             k1_8 * k2_4 *
                 (-450.0 * k2_8 + 6590.0 * k2_6 * q_2 + 246974.0 * k2_4 * q_4 -
                  49650.0 * k2_2 * q_6 + 2355.0 * q_8) +
             k1_6 * k2_6 *
                 (195.0 * k2_8 - 9110.0 * k2_6 * q_2 - 139742.0 * k2_4 * q_4 -
                  49650.0 * k2_2 * q_6 + 3450.0 * q_8)) -
        45.0 * k2_7 * sqr(k1 - q) * sqr(k1 + q) *
            (13.0 * k1_12 + 55.0 * k2_6 * q_6 -
             k1_10 * (194.0 * k2_2 + 649.0 * q_2) +
             k1_8 * (17.0 * k2_4 + 2297.0 * k2_2 * q_2 + 563.0 * q_4) +
             k1_6 * (164.0 * k2_6 - 2155.0 * k2_4 * q_2 - 2428.0 * k2_2 * q_4 +
                     73.0 * q_6) +
             k1_4 * (339.0 * k2_6 * q_2 + 2423.0 * k2_4 * q_4 +
                     157.0 * k2_2 * q_6) -
             3.0 * k1_2 * (186.0 * k2_6 * q_4 + 95.0 * k2_4 * q_6)) *
            log(sqr(k1 + q) / sqr(k1 - q)) -
        45.0 * k1_7 * sqr(k2 - q) * sqr(k2 + q) *
            (k1_6 * (164.0 * k2_6 + 339.0 * k2_4 * q_2 - 558.0 * k2_2 * q_4 +
                     55.0 * q_6) +
             k2_6 * (13.0 * k2_6 - 649.0 * k2_4 * q_2 + 563.0 * k2_2 * q_4 +
                     73.0 * q_6) +
             k1_4 * (17.0 * k2_8 - 2155.0 * k2_6 * q_2 + 2423.0 * k2_4 * q_4 -
                     285.0 * k2_2 * q_6) +
             k1_2 * (-194.0 * k2_10 + 2297.0 * k2_8 * q_2 -
                     2428.0 * k2_6 * q_4 + 157.0 * k2_4 * q_6)) *
            log(sqr(k2 + q) / sqr(k2 - q)) -
        (7560.0 * k1_10 * k2_7 * q_4 * sqr(k2_2 - q_2) *
         log((2.0 * k1_2 * q - k2_2 * q + q_3 +
              2.0 * k1 * sqrt(q_2 * (k1_2 - k2_2 + q_2))) /
             (2.0 * k1_2 * q - k2_2 * q + q_3 -
              2.0 * k1 * sqrt(q_2 * (k1_2 - k2_2 + q_2))))) /
            sqrt(q_2 * (k1_2 - k2_2 + q_2)) -
        (7560.0 * k1_7 * k2_10 * q_4 * sqr(k1_2 - q_2) *
         log(-((-(k1_2 * q) + 2.0 * k2_2 * q + q_3 +
                2.0 * k2 * sqrt(q_2 * (-k1_2 + k2_2 + q_2))) /
               (k1_2 * q - 2.0 * k2_2 * q - q_3 +
                2.0 * k2 * sqrt(q_2 * (-k1_2 + k2_2 + q_2)))))) /
            sqrt(q_2 * (-k1_2 + k2_2 + q_2)))) /
          (6209280.0 * k1_9 * k2_9 * q_5) +
      (eps_2 * pi *
       (8.0 * k1_7 * k2_9 * q *
            (353.0 * k1_6 + 353.0 * k2_6 - 12896.0 * k2_4 * q_2 -
             30541.0 * k2_2 * q_4 + 1785.0 * q_6 -
             k1_4 * (2033.0 * k2_2 + 12896.0 * q_2) +
             k1_2 * (-2033.0 * k2_4 + 31896.0 * k2_2 * q_2 - 30541.0 * q_4)) -
        4.0 * k1 * k2_3 * q *
            (12075.0 * k1_12 * k2_6 + 7425.0 * k2_10 * q_8 -
             90.0 * k1_2 * k2_8 * q_6 * (653.0 * k2_2 + 219.0 * q_2) +
             15.0 * k1_4 * k2_6 * q_4 *
                 (7096.0 * k2_4 + 6566.0 * k2_2 * q_2 - 405.0 * q_4) +
             k1_6 * k2_4 *
                 (12075.0 * k2_8 - 222610.0 * k2_6 * q_2 -
                  250234.0 * k2_4 * q_4 + 57210.0 * k2_2 * q_6 - 6075.0 * q_8) -
             5.0 * k1_10 *
                 (4503.0 * k2_8 + 44522.0 * k2_6 * q_2 - 21288.0 * k2_4 * q_4 +
                  11754.0 * k2_2 * q_6 - 1485 * q_8) +
             k1_8 * (-22515.0 * k2_10 + 455660.0 * k2_8 * q_2 -
                     250234.0 * k2_6 * q_4 + 98490.0 * k2_4 * q_6 -
                     19710.0 * k2_2 * q_8)) +
        15.0 * k2_9 * sqr(k1 - q) * sqr(k1 + q) *
            (791.0 * k1_10 + 495.0 * k2_4 * q_6 -
             k1_8 * (2120.0 * k2_2 + 1787.0 * q_2) +
             k1_6 * (633.0 * k2_4 - 758.0 * k2_2 * q_2 + 1113.0 * q_4) +
             k1_4 * (1677.0 * k2_4 * q_2 + 4376.0 * k2_2 * q_4 - 405.0 * q_6) -
             3.0 * k1_2 * (1031.0 * k2_4 * q_4 + 438.0 * k2_2 * q_6)) *
            log(sqr(k1 + q) / sqr(k1 - q)) +
        15.0 * k1_7 * k2_2 * sqr(k2 - q) * sqr(k2 + q) *
            (k2_4 * (791.0 * k2_6 - 1787.0 * k2_4 * q_2 + 1113.0 * k2_2 * q_4 -
                     405.0 * q_6) +
             3.0 * k1_4 *
                 (211.0 * k2_6 + 559.0 * k2_4 * q_2 - 1031.0 * k2_2 * q_4 +
                  165.0 * q_6) -
             2.0 * k1_2 *
                 (1060.0 * k2_8 + 379.0 * k2_6 * q_2 - 2188.0 * k2_4 * q_4 +
                  657.0 * k2_2 * q_6)) *
            log(sqr(k2 + q) / sqr(k2 - q)) +
        (420.0 * k1_10 * k2_9 * q_3 * sqr(k2_2 - q_2) *
         (-36.0 * k1 * sqrt(q_2 * (k1_2 - k2_2 + q_2)) +
          q * (14.0 * k1_2 - 5.0 * k2_2 + 5.0 * q_2) *
              log((2.0 * k1_2 * q - k2_2 * q + q_3 +
                   2.0 * k1 * sqrt(q_2 * (k1_2 - k2_2 + q_2))) /
                  (2.0 * k1_2 * q - k2_2 * q + q_3 -
                   2.0 * k1 * sqrt(q_2 * (k1_2 - k2_2 + q_2)))))) /
            pow((q_2 * (k1_2 - k2_2 + q_2)), 1.5) -
        (420.0 * k1_7 * k2_12 * q_3 * sqr(k1_2 - q_2) *
         (36.0 * k2 * sqrt(q_2 * (-k1_2 + k2_2 + q_2)) +
          q * (5.0 * k1_2 - 14.0 * k2_2 - 5.0 * q_2) *
              log(-((-(k1_2 * q) + 2.0 * k2_2 * q + q_3 +
                     2.0 * k2 * sqrt(q_2 * (-k1_2 + k2_2 + q_2))) /
                    (k1_2 * q - 2.0 * k2_2 * q - q_3 +
                     2.0 * k2 * sqrt(q_2 * (-k1_2 + k2_2 + q_2))))))) /
            pow((q_2 * (-k1_2 + k2_2 + q_2)), 1.5))) /
          (6209280.0 * k1_9 * k2_9 * q_5) +
      (eps_4 * pi *
       (17280.0 * k1_7 * k2_11 * q * (k1_2 - q_2) * (k2_2 - q_2) +
        (4.0 * k1_7 * k2_11 *
         (304.0 * k1_6 + 304.0 * k2_6 - 4416.0 * k2_4 * q_2 +
          21649.0 * k2_2 * q_4 + 224.0 * q_6 -
          64.0 * k1_4 * (38.0 * k2_2 + 69.0 * q_2) +
          k1_2 * (-2432.0 * k2_4 + 15872.0 * k2_2 * q_2 + 21649.0 * q_4))) /
            q +
        4.0 * k1 * k2_5 * q *
            (5655.0 * k1_10 * k2_6 + 7425.0 * k2_8 * q_8 +
             45.0 * k1_4 * (865.0 * k2_8 * q_4 + 148.0 * k2_6 * q_6) +
             k1_6 * k2_2 *
                 (5655.0 * k2_8 - 120370.0 * k2_6 * q_2 + 9532.0 * k2_4 * q_4 +
                  6660.0 * k2_2 * q_6 - 6885.0 * q_8) +
             5.0 * k1_8 *
                 (2820.0 * k2_8 - 24074.0 * k2_6 * q_2 + 7785.0 * k2_4 * q_4 -
                  5967.0 * k2_2 * q_6 + 1485.0 * q_8) -
             2295.0 * k1_2 * (13.0 * k2_8 * q_6 + 3.0 * k2_6 * q_8)) -
        15.0 * k2_11 * sqr(k1 - q) * sqr(k1 + q) *
            (601.0 * k1_8 + 495.0 * k2_2 * q_6 +
             k1_6 * (390.0 * k2_2 + 179.0 * q_2) +
             k1_4 * (391.0 * k2_2 * q_2 - 321.0 * q_4) -
             3.0 * k1_2 * (388.0 * k2_2 * q_4 + 153.0 * q_6)) *
            log(sqr(k1 + q) / sqr(k1 - q)) -
        15.0 * k1_7 * k2_4 * sqr(k2 - q) * sqr(k2 + q) *
            (601.0 * k2_8 + 179.0 * k2_6 * q_2 - 321.0 * k2_4 * q_4 -
             459.0 * k2_2 * q_6 +
             k1_2 * (390.0 * k2_6 + 391.0 * k2_4 * q_2 - 1164.0 * k2_2 * q_4 +
                     495.0 * q_6)) *
            log(sqr(k2 + q) / sqr(k2 - q)) +
        (105.0 * k1_10 * k2_11 * q * sqr(cub(k2_2 - q_2)) *
         sqrt(q_2 * (k1_2 - k2_2 + q_2)) *
         (-4.0 * k1 * sqrt(q_2 * (k1_2 - k2_2 + q_2)) *
              (-10.0 * k1_2 + 17.0 * (-k2_2 + q_2)) +
          q * (16.0 * k1_4 - 60.0 * k1_2 * (k2_2 - q_2) + 17.0 * sqr(k2_2 - q_2)) *
              log((2.0 * k1_2 * q - k2_2 * q + q_3 +
                   2.0 * k1 * sqrt(q_2 * (k1_2 - k2_2 + q_2))) /
                  (2.0 * k1_2 * q - k2_2 * q + q_3 -
                   2.0 * k1 * sqrt(q_2 * (k1_2 - k2_2 + q_2)))))) /
            (cub(k1_2 - k2_2 + q_2) * (-qua(k2_2 * q) + q_3)) +
        (105.0 * k1_7 * k2_14 * q * sqr(cub(k1_2 - q_2)) *
         sqrt(q_2 * (-k1_2 + k2_2 + q_2)) *
         (-4.0 * k2 * sqrt(q_2 * (-k1_2 + k2_2 + q_2)) *
              (-17.0 * k1_2 - 10.0 * k2_2 + 17.0 * q_2) +
          q * (17.0 * k1_4 + 16.0 * k2_4 + 60.0 * k2_2 * q_2 + 17.0 * q_4 - 2.0 * k1_2 * (30.0 * k2_2 + 17.0 * q_2)) *
              log(-((-(k1_2 * q) + 2.0 * k2_2 * q + q_3 +
                     2.0 * k2 * sqrt(q_2 * (-k1_2 + k2_2 + q_2))) /
                    (k1_2 * q - 2.0 * k2_2 * q - q_3 +
                     2.0 * k2 * sqrt(q_2 * (-k1_2 + k2_2 + q_2))))))) /
            (cub(-k1_2 + k2_2 + q_2) * (-qua(k1_2 * q) + q_3)))) /
          (6209280.0 * k1_9 * k2_9 * q_5);

  return kernel;
}

double kernel_Gamma2d_reg3rd(double k1, double k2, double k3, double q) {
  double kernel, kernel_poly_sum, kernel_beta_sum;
  double kernel_poly[13], kernel_beta[5];
  double k1_2, k1_3, k1_4, k1_5, k1_6, k1_7, k1_8, k1_9, k1_10, k1_11, k1_12,
      k1_13;
  double k2_2, k2_3, k2_4, k2_5, k2_6, k2_7, k2_8, k2_9, k2_10, k2_11, k2_12,
      k2_13;
  double k3_2, k3_3, k3_4, k3_5, k3_6, k3_7, k3_8, k3_9, k3_10, k3_11, k3_12;
  double q_2, q_3, q_4, q_5, q_6, q_7, q_8, q_9, q_10, q_11, q_12, q_13, q_14,
      q_15, q_16, q_17, q_18;

  k1_2 = sqr(k1);
  k1_3 = cub(k1);
  k1_4 = qua(k1);
  k1_5 = k1 * k1_4;
  k1_6 = k1 * k1_5;
  k1_7 = k1 * k1_6;
  k1_8 = k1 * k1_7;
  k1_9 = k1 * k1_8;
  k1_10 = k1 * k1_9;
  k1_11 = k1 * k1_10;
  k1_12 = k1 * k1_11;
  k1_13 = k1 * k1_12;

  k2_2 = sqr(k2);
  k2_3 = cub(k2);
  k2_4 = qua(k2);
  k2_5 = k2 * k2_4;
  k2_6 = k2 * k2_5;
  k2_7 = k2 * k2_6;
  k2_8 = k2 * k2_7;
  k2_9 = k2 * k2_8;
  k2_10 = k2 * k2_9;
  k2_11 = k2 * k2_10;
  k2_12 = k2 * k2_11;
  k2_13 = k2 * k2_12;

  k3_2 = sqr(k3);
  k3_3 = cub(k3);
  k3_4 = qua(k3);
  k3_5 = k3 * k3_4;
  k3_6 = k3 * k3_5;
  k3_7 = k3 * k3_6;
  k3_8 = k3 * k3_7;
  k3_9 = k3 * k3_8;
  k3_10 = k3 * k3_9;
  k3_11 = k3 * k3_10;
  k3_12 = k3 * k3_11;

  q_2 = sqr(q);
  q_3 = cub(q);
  q_4 = qua(q);
  q_5 = q * q_4;
  q_6 = q * q_5;
  q_7 = q * q_6;
  q_8 = q * q_7;
  q_9 = q * q_8;
  q_10 = q * q_9;
  q_11 = q * q_10;
  q_12 = q * q_11;
  q_13 = q * q_12;
  q_14 = q * q_13;
  q_15 = q * q_14;
  q_16 = q * q_15;
  q_17 = q * q_16;
  q_18 = q * q_17;

  kernel_poly[0] = (-210 * k1_11 * k2_9 * k3_8 - 210 * k1_9 * k2_11 * k3_8 -
                    540 * k1_9 * k2_9 * k3_10) *
                       pi -
                   (1050 * k1_11 * k2_9 * k3_7 + 1050 * k1_9 * k2_11 * k3_7 +
                    840 * k1_11 * k2_8 * k3_8 + 840 * k1_10 * k2_9 * k3_8 +
                    840 * k1_9 * k2_10 * k3_8 + 840 * k1_8 * k2_11 * k3_8 +
                    2700 * k1_9 * k2_9 * k3_9 + 2160 * k1_9 * k2_8 * k3_10 +
                    2160 * k1_8 * k2_9 * k3_10) *
                       pi * q -
                   (-140 * k1_13 * k2_7 * k3_6 + 3045 * k1_11 * k2_9 * k3_6 +
                    3045 * k1_9 * k2_11 * k3_6 - 140 * k1_7 * k2_13 * k3_6 +
                    4200 * k1_11 * k2_8 * k3_7 + 4200 * k1_10 * k2_9 * k3_7 +
                    4200 * k1_9 * k2_10 * k3_7 + 4200 * k1_8 * k2_11 * k3_7 -
                    22050 * k1_11 * k2_7 * k3_8 + 3360 * k1_10 * k2_8 * k3_8 +
                    54120 * k1_9 * k2_9 * k3_8 + 3360 * k1_8 * k2_10 * k3_8 -
                    22050 * k1_7 * k2_11 * k3_8 + 10800 * k1_9 * k2_8 * k3_9 +
                    10800 * k1_8 * k2_9 * k3_9 + 16560 * k1_9 * k2_7 * k3_10 +
                    8640 * k1_8 * k2_8 * k3_10 + 16560 * k1_7 * k2_9 * k3_10 +
                    8880 * k1_7 * k2_7 * k3_12) *
                       pi * q_2;

  kernel_poly[1] =
      -(-280 * k1_13 * k2_7 * k3_5 + 3045 * k1_11 * k2_9 * k3_5 +
        3045 * k1_9 * k2_11 * k3_5 - 280 * k1_7 * k2_13 * k3_5 -
        15320 * k1_13 * k2_6 * k3_6 - 1730 * k1_12 * k2_7 * k3_6 +
        10650 * k1_11 * k2_8 * k3_6 + 29640 * k1_10 * k2_9 * k3_6 +
        29640 * k1_9 * k2_10 * k3_6 + 10650 * k1_8 * k2_11 * k3_6 -
        1730 * k1_7 * k2_12 * k3_6 - 15320 * k1_6 * k2_13 * k3_6 -
        103530 * k1_11 * k2_7 * k3_7 + 16800 * k1_10 * k2_8 * k3_7 +
        235560 * k1_9 * k2_9 * k3_7 + 16800 * k1_8 * k2_10 * k3_7 -
        103530 * k1_7 * k2_11 * k3_7 - 73410 * k1_11 * k2_6 * k3_8 -
        64470 * k1_10 * k2_7 * k3_8 + 148680 * k1_9 * k2_8 * k3_8 +
        148680 * k1_8 * k2_9 * k3_8 - 64470 * k1_7 * k2_10 * k3_8 -
        73410 * k1_6 * k2_11 * k3_8 + 76500 * k1_9 * k2_7 * k3_9 +
        43200 * k1_8 * k2_8 * k3_9 + 76500 * k1_7 * k2_9 * k3_9 +
        43740 * k1_9 * k2_6 * k3_10 + 48210 * k1_8 * k2_7 * k3_10 +
        48210 * k1_7 * k2_8 * k3_10 + 43740 * k1_6 * k2_9 * k3_10 +
        43560 * k1_7 * k2_7 * k3_11 + 30990 * k1_7 * k2_6 * k3_12 +
        30990 * k1_6 * k2_7 * k3_12) *
          pi * q_3 -
      (-1750 * k1_13 * k2_7 * k3_4 + 9520 * k1_11 * k2_9 * k3_4 +
       9520 * k1_9 * k2_11 * k3_4 - 1750 * k1_7 * k2_13 * k3_4 -
       74920 * k1_13 * k2_6 * k3_5 - 6970 * k1_12 * k2_7 * k3_5 +
       4530 * k1_11 * k2_8 * k3_5 + 99480 * k1_10 * k2_9 * k3_5 +
       99480 * k1_9 * k2_10 * k3_5 + 4530 * k1_8 * k2_11 * k3_5 -
       6970 * k1_7 * k2_12 * k3_5 - 74920 * k1_6 * k2_13 * k3_5 -
       2160 * k1_13 * k2_5 * k3_6 - 65960 * k1_12 * k2_6 * k3_6 -
       111003 * k1_11 * k2_7 * k3_6 + 112440 * k1_10 * k2_8 * k3_6 +
       292656 * k1_9 * k2_9 * k3_6 + 112440 * k1_8 * k2_10 * k3_6 -
       111003 * k1_7 * k2_11 * k3_6 - 65960 * k1_6 * k2_12 * k3_6 -
       2160 * k1_5 * k2_13 * k3_6 - 340170 * k1_11 * k2_6 * k3_7 -
       295470 * k1_10 * k2_7 * k3_7 + 603240 * k1_9 * k2_8 * k3_7 +
       603240 * k1_8 * k2_9 * k3_7 - 295470 * k1_7 * k2_10 * k3_7 -
       340170 * k1_6 * k2_11 * k3_7 - 131130 * k1_11 * k2_5 * k3_8 -
       198720 * k1_10 * k2_6 * k3_8 + 288522 * k1_9 * k2_7 * k3_8 +
       323520 * k1_8 * k2_8 * k3_8 + 288522 * k1_7 * k2_9 * k3_8 -
       198720 * k1_6 * k2_10 * k3_8 - 131130 * k1_5 * k2_11 * k3_8 +
       193500 * k1_9 * k2_6 * k3_9 + 215850 * k1_8 * k2_7 * k3_9 +
       215850 * k1_7 * k2_8 * k3_9 + 193500 * k1_6 * k2_9 * k3_9 +
       81940 * k1_9 * k2_5 * k3_10 + 102840 * k1_8 * k2_6 * k3_10 +
       294336 * k1_7 * k2_7 * k3_10 + 102840 * k1_6 * k2_8 * k3_10 +
       81940 * k1_5 * k2_9 * k3_10 + 151590 * k1_7 * k2_6 * k3_11 +
       151590 * k1_6 * k2_7 * k3_11 + 54600 * k1_7 * k2_5 * k3_12 +
       105840 * k1_6 * k2_6 * k3_12 + 54600 * k1_5 * k2_7 * k3_12) *
          pi * q_4;

  kernel_poly[2] =
      -(-980 * k1_13 * k2_7 * k3_3 - 8050 * k1_11 * k2_9 * k3_3 -
        8050 * k1_9 * k2_11 * k3_3 - 980 * k1_7 * k2_13 * k3_3 -
        154600 * k1_13 * k2_6 * k3_4 - 18700 * k1_12 * k2_7 * k3_4 +
        22780 * k1_11 * k2_8 * k3_4 + 212680 * k1_10 * k2_9 * k3_4 +
        212680 * k1_9 * k2_10 * k3_4 + 22780 * k1_8 * k2_11 * k3_4 -
        18700 * k1_7 * k2_12 * k3_4 - 154600 * k1_6 * k2_13 * k3_4 -
        8280 * k1_13 * k2_5 * k3_5 - 323080 * k1_12 * k2_6 * k3_5 +
        304585 * k1_11 * k2_7 * k3_5 + 367320 * k1_10 * k2_8 * k3_5 -
        529280 * k1_9 * k2_9 * k3_5 + 367320 * k1_8 * k2_10 * k3_5 +
        304585 * k1_7 * k2_11 * k3_5 - 323080 * k1_6 * k2_12 * k3_5 -
        8280 * k1_5 * k2_13 * k3_5 - 75710 * k1_13 * k2_4 * k3_6 -
        15660 * k1_12 * k2_5 * k3_6 - 213702 * k1_11 * k2_6 * k3_6 -
        43862 * k1_10 * k2_7 * k3_6 + 304374 * k1_9 * k2_8 * k3_6 +
        304374 * k1_8 * k2_9 * k3_6 - 43862 * k1_7 * k2_10 * k3_6 -
        213702 * k1_6 * k2_11 * k3_6 - 15660 * k1_5 * k2_12 * k3_6 -
        75710 * k1_4 * k2_13 * k3_6 - 615330 * k1_11 * k2_5 * k3_7 -
        886080 * k1_10 * k2_6 * k3_7 + 739260 * k1_9 * k2_7 * k3_7 +
        1056960 * k1_8 * k2_8 * k3_7 + 739260 * k1_7 * k2_9 * k3_7 -
        886080 * k1_6 * k2_10 * k3_7 - 615330 * k1_5 * k2_11 * k3_7 +
        41790 * k1_11 * k2_4 * k3_8 - 382140 * k1_10 * k2_5 * k3_8 -
        99352 * k1_9 * k2_6 * k3_8 + 1042858 * k1_8 * k2_7 * k3_8 +
        1042858 * k1_7 * k2_8 * k3_8 - 99352 * k1_6 * k2_9 * k3_8 -
        382140 * k1_5 * k2_10 * k3_8 + 41790 * k1_4 * k2_11 * k3_8 +
        371900 * k1_9 * k2_5 * k3_9 + 413400 * k1_8 * k2_6 * k3_9 +
        1038220 * k1_7 * k2_7 * k3_9 + 413400 * k1_6 * k2_8 * k3_9 +
        371900 * k1_5 * k2_9 * k3_9 + 16270 * k1_9 * k2_4 * k3_10 +
        219580 * k1_8 * k2_5 * k3_10 + 677194 * k1_7 * k2_6 * k3_10 +
        677194 * k1_6 * k2_7 * k3_10 + 219580 * k1_5 * k2_8 * k3_10 +
        16270 * k1_4 * k2_9 * k3_10 + 267960 * k1_7 * k2_5 * k3_11 +
        515760 * k1_6 * k2_6 * k3_11 + 267960 * k1_5 * k2_7 * k3_11 +
        20650 * k1_7 * k2_4 * k3_12 + 191220 * k1_6 * k2_5 * k3_12 +
        191220 * k1_5 * k2_6 * k3_12 + 20650 * k1_4 * k2_7 * k3_12) *
          pi * q_5 -
      (-3780 * k1_13 * k2_7 * k3_2 - 945 * k1_11 * k2_9 * k3_2 -
       945 * k1_9 * k2_11 * k3_2 - 3780 * k1_7 * k2_13 * k3_2 -
       151520 * k1_13 * k2_6 * k3_3 - 15620 * k1_12 * k2_7 * k3_3 -
       47500 * k1_11 * k2_8 * k3_3 + 142400 * k1_10 * k2_9 * k3_3 +
       142400 * k1_9 * k2_10 * k3_3 - 47500 * k1_8 * k2_11 * k3_3 -
       15620 * k1_7 * k2_12 * k3_3 - 151520 * k1_6 * k2_13 * k3_3 -
       23700 * k1_13 * k2_5 * k3_4 - 665200 * k1_12 * k2_6 * k3_4 +
       946640 * k1_11 * k2_7 * k3_4 + 789520 * k1_10 * k2_8 * k3_4 -
       1678160 * k1_9 * k2_9 * k3_4 + 789520 * k1_8 * k2_10 * k3_4 +
       946640 * k1_7 * k2_11 * k3_4 - 665200 * k1_6 * k2_12 * k3_4 -
       23700 * k1_5 * k2_13 * k3_4 - 376870 * k1_13 * k2_4 * k3_5 -
       68220 * k1_12 * k2_5 * k3_5 + 1853890 * k1_11 * k2_6 * k3_5 +
       2261490 * k1_10 * k2_7 * k3_5 - 3660770 * k1_9 * k2_8 * k3_5 -
       3660770 * k1_8 * k2_9 * k3_5 + 2261490 * k1_7 * k2_10 * k3_5 +
       1853890 * k1_6 * k2_11 * k3_5 - 68220 * k1_5 * k2_12 * k3_5 -
       376870 * k1_4 * k2_13 * k3_5 - 44780 * k1_13 * k2_3 * k3_6 -
       307520 * k1_12 * k2_4 * k3_6 - 904953 * k1_11 * k2_5 * k3_6 +
       691792 * k1_10 * k2_6 * k3_6 + 983773 * k1_9 * k2_7 * k3_6 -
       2186304 * k1_8 * k2_8 * k3_6 + 983773 * k1_7 * k2_9 * k3_6 +
       691792 * k1_6 * k2_10 * k3_6 - 904953 * k1_5 * k2_11 * k3_6 -
       307520 * k1_4 * k2_12 * k3_6 - 44780 * k1_3 * k2_13 * k3_6 +
       235830 * k1_11 * k2_4 * k3_7 - 1749420 * k1_10 * k2_5 * k3_7 -
       2141360 * k1_9 * k2_6 * k3_7 + 2987690 * k1_8 * k2_7 * k3_7 +
       2987690 * k1_7 * k2_8 * k3_7 - 2141360 * k1_6 * k2_9 * k3_7 -
       1749420 * k1_5 * k2_10 * k3_7 + 235830 * k1_4 * k2_11 * k3_7 +
       59730 * k1_11 * k2_3 * k3_8 + 262080 * k1_10 * k2_4 * k3_8 -
       314308 * k1_9 * k2_5 * k3_8 + 133872 * k1_8 * k2_6 * k3_8 +
       3788204 * k1_7 * k2_7 * k3_8 + 133872 * k1_6 * k2_8 * k3_8 -
       314308 * k1_5 * k2_9 * k3_8 + 262080 * k1_4 * k2_10 * k3_8 +
       59730 * k1_3 * k2_11 * k3_8 + 56150 * k1_9 * k2_4 * k3_9 +
       946700 * k1_8 * k2_5 * k3_9 + 1959330 * k1_7 * k2_6 * k3_9 +
       1959330 * k1_6 * k2_7 * k3_9 + 946700 * k1_5 * k2_8 * k3_9 +
       56150 * k1_4 * k2_9 * k3_9 - 16280 * k1_9 * k2_3 * k3_10 -
       7040 * k1_8 * k2_4 * k3_10 + 1125136 * k1_7 * k2_5 * k3_10 +
       1392176 * k1_6 * k2_6 * k3_10 + 1125136 * k1_5 * k2_7 * k3_10 -
       7040 * k1_4 * k2_8 * k3_10 - 16280 * k1_3 * k2_9 * k3_10 +
       99890 * k1_7 * k2_4 * k3_11 + 935940 * k1_6 * k2_5 * k3_11 +
       935940 * k1_5 * k2_6 * k3_11 + 99890 * k1_4 * k2_7 * k3_11 +
       2080 * k1_7 * k2_3 * k3_12 + 64480 * k1_6 * k2_4 * k3_12 +
       335520 * k1_5 * k2_5 * k3_12 + 64480 * k1_4 * k2_6 * k3_12 +
       2080 * k1_3 * k2_7 * k3_12) *
          pi * q_6;

  kernel_poly[3] =
      -(1260 * k1_13 * k2_7 * k3 - 2205 * k1_11 * k2_9 * k3 -
        2205 * k1_9 * k2_11 * k3 + 1260 * k1_7 * k2_13 * k3 -
        88920 * k1_13 * k2_6 * k3_2 - 20970 * k1_12 * k2_7 * k3_2 -
        11430 * k1_11 * k2_8 * k3_2 + 83520 * k1_10 * k2_9 * k3_2 +
        83520 * k1_9 * k2_10 * k3_2 - 11430 * k1_8 * k2_11 * k3_2 -
        20970 * k1_7 * k2_12 * k3_2 - 88920 * k1_6 * k2_13 * k3_2 -
        19080 * k1_13 * k2_5 * k3_3 - 652880 * k1_12 * k2_6 * k3_3 +
        788440 * k1_11 * k2_7 * k3_3 + 508400 * k1_10 * k2_8 * k3_3 -
        1728280 * k1_9 * k2_9 * k3_3 + 508400 * k1_8 * k2_10 * k3_3 +
        788440 * k1_7 * k2_11 * k3_3 - 652880 * k1_6 * k2_12 * k3_3 -
        19080 * k1_5 * k2_13 * k3_3 - 758500 * k1_13 * k2_4 * k3_4 -
        165000 * k1_12 * k2_5 * k3_4 + 4704210 * k1_11 * k2_6 * k3_4 +
        5540710 * k1_10 * k2_7 * k3_4 - 8914540 * k1_9 * k2_8 * k3_4 -
        8914540 * k1_8 * k2_9 * k3_4 + 5540710 * k1_7 * k2_10 * k3_4 +
        4704210 * k1_6 * k2_11 * k3_4 - 165000 * k1_5 * k2_12 * k3_4 -
        758500 * k1_4 * k2_13 * k3_4 - 223480 * k1_13 * k2_3 * k3_5 -
        1530880 * k1_12 * k2_4 * k3_5 + 718335 * k1_11 * k2_5 * k3_5 +
        11318160 * k1_10 * k2_6 * k3_5 - 440535 * k1_9 * k2_7 * k3_5 -
        20511680 * k1_8 * k2_8 * k3_5 - 440535 * k1_7 * k2_9 * k3_5 +
        11318160 * k1_6 * k2_10 * k3_5 + 718335 * k1_5 * k2_11 * k3_5 -
        1530880 * k1_4 * k2_12 * k3_5 - 223480 * k1_3 * k2_13 * k3_5 +
        52860 * k1_13 * k2_2 * k3_6 - 180290 * k1_12 * k2_3 * k3_6 -
        132642 * k1_11 * k2_4 * k3_6 - 1803612 * k1_10 * k2_5 * k3_6 -
        1894968 * k1_9 * k2_6 * k3_6 + 1490722 * k1_8 * k2_7 * k3_6 +
        1490722 * k1_7 * k2_8 * k3_6 - 1894968 * k1_6 * k2_9 * k3_6 -
        1803612 * k1_5 * k2_10 * k3_6 - 132642 * k1_4 * k2_11 * k3_6 -
        180290 * k1_3 * k2_12 * k3_6 + 52860 * k1_2 * k2_13 * k3_6 +
        305370 * k1_11 * k2_3 * k3_7 + 1417920 * k1_10 * k2_4 * k3_7 -
        4624440 * k1_9 * k2_5 * k3_7 - 3561840 * k1_8 * k2_6 * k3_7 +
        10024860 * k1_7 * k2_7 * k3_7 - 3561840 * k1_6 * k2_8 * k3_7 -
        4624440 * k1_5 * k2_9 * k3_7 + 1417920 * k1_4 * k2_10 * k3_7 +
        305370 * k1_3 * k2_11 * k3_7 - 100710 * k1_11 * k2_2 * k3_8 +
        262650 * k1_10 * k2_3 * k3_8 + 372928 * k1_9 * k2_4 * k3_8 +
        277988 * k1_8 * k2_5 * k3_8 + 3941126 * k1_7 * k2_6 * k3_8 +
        3941126 * k1_6 * k2_7 * k3_8 + 277988 * k1_5 * k2_8 * k3_8 +
        372928 * k1_4 * k2_9 * k3_8 + 262650 * k1_3 * k2_10 * k3_8 -
        100710 * k1_2 * k2_11 * k3_8 - 87700 * k1_9 * k2_3 * k3_9 -
        136000 * k1_8 * k2_4 * k3_9 + 3192620 * k1_7 * k2_5 * k3_9 +
        2483120 * k1_6 * k2_6 * k3_9 + 3192620 * k1_5 * k2_7 * k3_9 -
        136000 * k1_4 * k2_8 * k3_9 - 87700 * k1_3 * k2_9 * k3_9 +
        42840 * k1_9 * k2_2 * k3_10 - 83150 * k1_8 * k2_3 * k3_10 +
        359494 * k1_7 * k2_4 * k3_10 + 2257544 * k1_6 * k2_5 * k3_10 +
        2257544 * k1_5 * k2_6 * k3_10 + 359494 * k1_4 * k2_7 * k3_10 -
        83150 * k1_3 * k2_8 * k3_10 + 42840 * k1_2 * k2_9 * k3_10 +
        9560 * k1_7 * k2_3 * k3_11 + 308960 * k1_6 * k2_4 * k3_11 +
        1647360 * k1_5 * k2_5 * k3_11 + 308960 * k1_4 * k2_6 * k3_11 +
        9560 * k1_3 * k2_7 * k3_11 + 5010 * k1_7 * k2_2 * k3_12 +
        3790 * k1_6 * k2_3 * k3_12 + 129180 * k1_5 * k2_4 * k3_12 +
        129180 * k1_4 * k2_5 * k3_12 + 3790 * k1_3 * k2_6 * k3_12 +
        5010 * k1_2 * k2_7 * k3_12) *
      pi * q_7;

  kernel_poly[4] =
      -(5670 * k1_13 * k2_7 - 5670 * k1_11 * k2_9 - 5670 * k1_9 * k2_11 +
        5670 * k1_7 * k2_13 - 9720 * k1_13 * k2_6 * k3 +
        3870 * k1_12 * k2_7 * k3 - 10350 * k1_11 * k2_8 * k3 +
        8640 * k1_10 * k2_9 * k3 + 8640 * k1_9 * k2_10 * k3 -
        10350 * k1_8 * k2_11 * k3 + 3870 * k1_7 * k2_12 * k3 -
        9720 * k1_6 * k2_13 * k3 - 29280 * k1_13 * k2_5 * k3_2 -
        379080 * k1_12 * k2_6 * k3_2 + 314805 * k1_11 * k2_7 * k3_2 +
        303480 * k1_10 * k2_8 * k3_2 - 683820 * k1_9 * k2_9 * k3_2 +
        303480 * k1_8 * k2_10 * k3_2 + 314805 * k1_7 * k2_11 * k3_2 -
        379080 * k1_6 * k2_12 * k3_2 - 29280 * k1_5 * k2_13 * k3_2 -
        755420 * k1_13 * k2_4 * k3_3 - 146520 * k1_12 * k2_5 * k3_3 +
        4346850 * k1_11 * k2_6 * k3_3 + 4797590 * k1_10 * k2_7 * k3_3 -
        8509220 * k1_9 * k2_8 * k3_3 - 8509220 * k1_8 * k2_9 * k3_3 +
        4797590 * k1_7 * k2_10 * k3_3 + 4346850 * k1_6 * k2_11 * k3_3 -
        146520 * k1_5 * k2_12 * k3_3 - 755420 * k1_4 * k2_13 * k3_3 -
        448150 * k1_13 * k2_3 * k3_4 - 3080800 * k1_12 * k2_4 * k3_4 +
        3213640 * k1_11 * k2_5 * k3_4 + 25293440 * k1_10 * k2_6 * k3_4 -
        2619000 * k1_9 * k2_7 * k3_4 - 43853760 * k1_8 * k2_8 * k3_4 -
        2619000 * k1_7 * k2_9 * k3_4 + 25293440 * k1_6 * k2_10 * k3_4 +
        3213640 * k1_5 * k2_11 * k3_4 - 3080800 * k1_4 * k2_12 * k3_4 -
        448150 * k1_3 * k2_13 * k3_4 + 264300 * k1_13 * k2_2 * k3_5 -
        899770 * k1_12 * k2_3 * k3_5 - 2333690 * k1_11 * k2_4 * k3_5 +
        6208740 * k1_10 * k2_5 * k3_5 + 10942680 * k1_9 * k2_6 * k3_5 -
        15817350 * k1_8 * k2_7 * k3_5 - 15817350 * k1_7 * k2_8 * k3_5 +
        10942680 * k1_6 * k2_9 * k3_5 + 6208740 * k1_5 * k2_10 * k3_5 -
        2333690 * k1_4 * k2_11 * k3_5 - 899770 * k1_3 * k2_12 * k3_5 +
        264300 * k1_2 * k2_13 * k3_5 + 3960 * k1_13 * k2 * k3_6 +
        211440 * k1_12 * k2_2 * k3_6 + 341967 * k1_11 * k2_3 * k3_6 +
        2153992 * k1_10 * k2_4 * k3_6 - 8735142 * k1_9 * k2_5 * k3_6 -
        7746192 * k1_8 * k2_6 * k3_6 + 14450810 * k1_7 * k2_7 * k3_6 -
        7746192 * k1_6 * k2_8 * k3_6 - 8735142 * k1_5 * k2_9 * k3_6 +
        2153992 * k1_4 * k2_10 * k3_6 + 341967 * k1_3 * k2_11 * k3_6 +
        211440 * k1_2 * k2_12 * k3_6 + 3960 * k1 * k2_13 * k3_6 -
        503550 * k1_11 * k2_2 * k3_7 + 1340130 * k1_10 * k2_3 * k3_7 +
        1372600 * k1_9 * k2_4 * k3_7 - 7300860 * k1_8 * k2_5 * k3_7 +
        3942230 * k1_7 * k2_6 * k3_7 + 3942230 * k1_6 * k2_7 * k3_7 -
        7300860 * k1_5 * k2_8 * k3_7 + 1372600 * k1_4 * k2_9 * k3_7 +
        1340130 * k1_3 * k2_10 * k3_7 - 503550 * k1_2 * k2_11 * k3_7 -
        11880 * k1_11 * k2 * k3_8 - 402840 * k1_10 * k2_2 * k3_8 +
        178912 * k1_9 * k2_3 * k3_8 - 26608 * k1_8 * k2_4 * k3_8 +
        4885714 * k1_7 * k2_5 * k3_8 + 3813024 * k1_6 * k2_6 * k3_8 +
        4885714 * k1_5 * k2_7 * k3_8 - 26608 * k1_4 * k2_8 * k3_8 +
        178912 * k1_3 * k2_9 * k3_8 - 402840 * k1_2 * k2_10 * k3_8 -
        11880 * k1 * k2_11 * k3_8 + 214200 * k1_9 * k2_2 * k3_9 -
        440950 * k1_8 * k2_3 * k3_9 + 809630 * k1_7 * k2_4 * k3_9 +
        3398680 * k1_6 * k2_5 * k3_9 + 3398680 * k1_5 * k2_6 * k3_9 +
        809630 * k1_4 * k2_7 * k3_9 - 440950 * k1_3 * k2_8 * k3_9 +
        214200 * k1_2 * k2_9 * k3_9 + 11880 * k1_9 * k2 * k3_10 +
        171360 * k1_8 * k2_2 * k3_10 - 74624 * k1_7 * k2_3 * k3_10 +
        717576 * k1_6 * k2_4 * k3_10 + 3463436 * k1_5 * k2_5 * k3_10 +
        717576 * k1_4 * k2_6 * k3_10 - 74624 * k1_3 * k2_7 * k3_10 +
        171360 * k1_2 * k2_8 * k3_10 + 11880 * k1 * k2_9 * k3_10 +
        25050 * k1_7 * k2_2 * k3_11 + 15590 * k1_6 * k2_3 * k3_11 +
        625740 * k1_5 * k2_4 * k3_11 + 625740 * k1_4 * k2_5 * k3_11 +
        15590 * k1_3 * k2_6 * k3_11 + 25050 * k1_2 * k2_7 * k3_11 -
        3960 * k1_7 * k2 * k3_12 + 20040 * k1_6 * k2_2 * k3_12 +
        13800 * k1_5 * k2_3 * k3_12 + 23120 * k1_4 * k2_4 * k3_12 +
        13800 * k1_3 * k2_5 * k3_12 + 20040 * k1_2 * k2_6 * k3_12 -
        3960 * k1 * k2_7 * k3_12) *
      pi * q_8;

  kernel_poly[5] =
      -(22680 * k1_13 * k2_6 + 22680 * k1_12 * k2_7 - 22680 * k1_11 * k2_8 -
        22680 * k1_10 * k2_9 - 22680 * k1_9 * k2_10 - 22680 * k1_8 * k2_11 +
        22680 * k1_7 * k2_12 + 22680 * k1_6 * k2_13 + 6240 * k1_13 * k2_5 * k3 -
        43560 * k1_12 * k2_6 * k3 + 87657 * k1_11 * k2_7 * k3 +
        28440 * k1_10 * k2_8 * k3 - 207324 * k1_9 * k2_9 * k3 +
        28440 * k1_8 * k2_10 * k3 + 87657 * k1_7 * k2_11 * k3 -
        43560 * k1_6 * k2_12 * k3 + 6240 * k1_5 * k2_13 * k3 -
        390870 * k1_13 * k2_4 * k3_2 - 152220 * k1_12 * k2_5 * k3_2 +
        1784670 * k1_11 * k2_6 * k3_2 + 2135070 * k1_10 * k2_7 * k3_2 -
        3563130 * k1_9 * k2_8 * k3_2 - 3563130 * k1_8 * k2_9 * k3_2 +
        2135070 * k1_7 * k2_10 * k3_2 + 1784670 * k1_6 * k2_11 * k3_2 -
        152220 * k1_5 * k2_12 * k3_2 - 390870 * k1_4 * k2_13 * k3_2 -
        447380 * k1_13 * k2_3 * k3_3 - 3068480 * k1_12 * k2_4 * k3_3 +
        2845310 * k1_11 * k2_5 * k3_3 + 23422720 * k1_10 * k2_6 * k3_3 -
        2707278 * k1_9 * k2_7 * k3_3 - 39809280 * k1_8 * k2_8 * k3_3 -
        2707278 * k1_7 * k2_9 * k3_3 + 23422720 * k1_6 * k2_10 * k3_3 +
        2845310 * k1_5 * k2_11 * k3_3 - 3068480 * k1_4 * k2_12 * k3_3 -
        447380 * k1_3 * k2_13 * k3_3 + 528600 * k1_13 * k2_2 * k3_4 -
        1804300 * k1_12 * k2_3 * k3_4 - 5425270 * k1_11 * k2_4 * k3_4 +
        17532460 * k1_10 * k2_5 * k3_4 + 28922920 * k1_9 * k2_6 * k3_4 -
        39858850 * k1_8 * k2_7 * k3_4 - 39858850 * k1_7 * k2_8 * k3_4 +
        28922920 * k1_6 * k2_9 * k3_4 + 17532460 * k1_5 * k2_10 * k3_4 -
        5425270 * k1_4 * k2_11 * k3_4 - 1804300 * k1_3 * k2_12 * k3_4 +
        528600 * k1_2 * k2_13 * k3_4 + 19800 * k1_13 * k2 * k3_5 +
        1057200 * k1_12 * k2_2 * k3_5 - 679085 * k1_11 * k2_3 * k3_5 +
        257640 * k1_10 * k2_4 * k3_5 - 257550 * k1_9 * k2_5 * k3_5 -
        4954320 * k1_8 * k2_6 * k3_5 + 539566 * k1_7 * k2_7 * k3_5 -
        4954320 * k1_6 * k2_8 * k3_5 - 257550 * k1_5 * k2_9 * k3_5 +
        257640 * k1_4 * k2_10 * k3_5 - 679085 * k1_3 * k2_11 * k3_5 +
        1057200 * k1_2 * k2_12 * k3_5 + 19800 * k1 * k2_13 * k3_5 -
        4950 * k1_13 * k3_6 + 15840 * k1_12 * k2 * k3_6 -
        664290 * k1_11 * k2_2 * k3_6 + 2556058 * k1_10 * k2_3 * k3_6 +
        1376058 * k1_9 * k2_4 * k3_6 - 17106078 * k1_8 * k2_5 * k3_6 +
        3816522 * k1_7 * k2_6 * k3_6 + 3816522 * k1_6 * k2_7 * k3_6 -
        17106078 * k1_5 * k2_8 * k3_6 + 1376058 * k1_4 * k2_9 * k3_6 +
        2556058 * k1_3 * k2_10 * k3_6 - 664290 * k1_2 * k2_11 * k3_6 +
        15840 * k1 * k2_12 * k3_6 - 4950 * k2_13 * k3_6 -
        59400 * k1_11 * k2 * k3_7 - 2014200 * k1_10 * k2_2 * k3_7 +
        1585450 * k1_9 * k2_3 * k3_7 + 246000 * k1_8 * k2_4 * k3_7 -
        132740 * k1_7 * k2_5 * k3_7 + 2880480 * k1_6 * k2_6 * k3_7 -
        132740 * k1_5 * k2_7 * k3_7 + 246000 * k1_4 * k2_8 * k3_7 +
        1585450 * k1_3 * k2_9 * k3_7 - 2014200 * k1_2 * k2_10 * k3_7 -
        59400 * k1 * k2_11 * k3_7 + 14850 * k1_11 * k3_8 -
        47520 * k1_10 * k2 * k3_8 - 215280 * k1_9 * k2_2 * k3_8 -
        649582 * k1_8 * k2_3 * k3_8 + 2094318 * k1_7 * k2_4 * k3_8 +
        4030196 * k1_6 * k2_5 * k3_8 + 4030196 * k1_5 * k2_6 * k3_8 +
        2094318 * k1_4 * k2_7 * k3_8 - 649582 * k1_3 * k2_8 * k3_8 -
        215280 * k1_2 * k2_9 * k3_8 - 47520 * k1 * k2_10 * k3_8 +
        14850 * k2_11 * k3_8 + 59400 * k1_9 * k2 * k3_9 +
        856800 * k1_8 * k2_2 * k3_9 - 496780 * k1_7 * k2_3 * k3_9 +
        865320 * k1_6 * k2_4 * k3_9 + 3725020 * k1_5 * k2_5 * k3_9 +
        865320 * k1_4 * k2_6 * k3_9 - 496780 * k1_3 * k2_7 * k3_9 +
        856800 * k1_2 * k2_8 * k3_9 + 59400 * k1 * k2_9 * k3_9 -
        14850 * k1_9 * k3_10 + 47520 * k1_8 * k2 * k3_10 +
        320910 * k1_7 * k2_2 * k3_10 - 71646 * k1_6 * k2_3 * k3_10 +
        1306874 * k1_5 * k2_4 * k3_10 + 1306874 * k1_4 * k2_5 * k3_10 -
        71646 * k1_3 * k2_6 * k3_10 + 320910 * k1_2 * k2_7 * k3_10 +
        47520 * k1 * k2_8 * k3_10 - 14850 * k2_9 * k3_10 -
        19800 * k1_7 * k2 * k3_11 + 100200 * k1_6 * k2_2 * k3_11 +
        63960 * k1_5 * k2_3 * k3_11 + 102160 * k1_4 * k2_4 * k3_11 +
        63960 * k1_3 * k2_5 * k3_11 + 100200 * k1_2 * k2_6 * k3_11 -
        19800 * k1 * k2_7 * k3_11 + 4950 * k1_7 * k3_12 -
        15840 * k1_6 * k2 * k3_12 + 30060 * k1_5 * k2_2 * k3_12 -
        6550 * k1_4 * k2_3 * k3_12 - 6550 * k1_3 * k2_4 * k3_12 +
        30060 * k1_2 * k2_5 * k3_12 - 15840 * k1 * k2_6 * k3_12 +
        4950 * k2_7 * k3_12) *
      pi * q_9;

  kernel_poly[6] =
      -(34020 * k1_13 * k2_5 + 90720 * k1_12 * k2_6 + 22680 * k1_11 * k2_7 -
        90720 * k1_10 * k2_8 - 113400 * k1_9 * k2_9 - 90720 * k1_8 * k2_10 +
        22680 * k1_7 * k2_11 + 90720 * k1_6 * k2_12 + 34020 * k1_5 * k2_13 -
        70110 * k1_13 * k2_4 * k3 + 17940 * k1_12 * k2_5 * k3 +
        496038 * k1_11 * k2_6 * k3 + 485478 * k1_10 * k2_7 * k3 -
        954546 * k1_9 * k2_8 * k3 - 954546 * k1_8 * k2_9 * k3 +
        485478 * k1_7 * k2_10 * k3 + 496038 * k1_6 * k2_11 * k3 +
        17940 * k1_5 * k2_12 * k3 - 70110 * k1_4 * k2_13 * k3 -
        226980 * k1_13 * k2_3 * k3_2 - 1586880 * k1_12 * k2_4 * k3_2 +
        834105 * k1_11 * k2_5 * k3_2 + 10372080 * k1_10 * k2_6 * k3_2 -
        861015 * k1_9 * k2_7 * k3_2 - 17257920 * k1_8 * k2_8 * k3_2 -
        861015 * k1_7 * k2_9 * k3_2 + 10372080 * k1_6 * k2_10 * k3_2 +
        834105 * k1_5 * k2_11 * k3_2 - 1586880 * k1_4 * k2_12 * k3_2 -
        226980 * k1_3 * k2_13 * k3_2 + 528600 * k1_13 * k2_2 * k3_3 -
        1801220 * k1_12 * k2_3 * k3_3 - 6176510 * k1_11 * k2_4 * k3_3 +
        15397220 * k1_10 * k2_5 * k3_3 + 27847688 * k1_9 * k2_6 * k3_3 -
        35470922 * k1_8 * k2_7 * k3_3 - 35470922 * k1_7 * k2_8 * k3_3 +
        27847688 * k1_6 * k2_9 * k3_3 + 15397220 * k1_5 * k2_10 * k3_3 -
        6176510 * k1_4 * k2_11 * k3_3 - 1801220 * k1_3 * k2_12 * k3_3 +
        528600 * k1_2 * k2_13 * k3_3 + 39600 * k1_13 * k2 * k3_4 +
        2114400 * k1_12 * k2_2 * k3_4 - 2286880 * k1_11 * k2_3 * k3_4 -
        3844880 * k1_10 * k2_4 * k3_4 + 14573280 * k1_9 * k2_5 * k3_4 +
        1140880 * k1_8 * k2_6 * k3_4 - 25204600 * k1_7 * k2_7 * k3_4 +
        1140880 * k1_6 * k2_8 * k3_4 + 14573280 * k1_5 * k2_9 * k3_4 -
        3844880 * k1_4 * k2_10 * k3_4 - 2286880 * k1_3 * k2_11 * k3_4 +
        2114400 * k1_2 * k2_12 * k3_4 + 39600 * k1 * k2_13 * k3_4 -
        24750 * k1_13 * k3_5 + 79200 * k1_12 * k2 * k3_5 +
        706950 * k1_11 * k2_2 * k3_5 + 2267010 * k1_10 * k2_3 * k3_5 -
        1889630 * k1_9 * k2_4 * k3_5 - 13607910 * k1_8 * k2_5 * k3_5 +
        6781954 * k1_7 * k2_6 * k3_5 + 6781954 * k1_6 * k2_7 * k3_5 -
        13607910 * k1_5 * k2_8 * k3_5 - 1889630 * k1_4 * k2_9 * k3_5 +
        2267010 * k1_3 * k2_10 * k3_5 + 706950 * k1_2 * k2_11 * k3_5 +
        79200 * k1 * k2_12 * k3_5 - 24750 * k2_13 * k3_5 -
        19800 * k1_12 * k3_6 - 95040 * k1_11 * k2 * k3_6 -
        3714360 * k1_10 * k2_2 * k3_6 + 3336012 * k1_9 * k2_3 * k3_6 -
        103848 * k1_8 * k2_4 * k3_6 - 8005147 * k1_7 * k2_5 * k3_6 +
        2975456 * k1_6 * k2_6 * k3_6 - 8005147 * k1_5 * k2_7 * k3_6 -
        103848 * k1_4 * k2_8 * k3_6 + 3336012 * k1_3 * k2_9 * k3_6 -
        3714360 * k1_2 * k2_10 * k3_6 - 95040 * k1 * k2_11 * k3_6 -
        19800 * k2_12 * k3_6 + 74250 * k1_11 * k3_7 -
        237600 * k1_10 * k2 * k3_7 - 2790000 * k1_9 * k2_2 * k3_7 +
        102450 * k1_8 * k2_3 * k3_7 + 3853430 * k1_7 * k2_4 * k3_7 +
        1589180 * k1_6 * k2_5 * k3_7 + 1589180 * k1_5 * k2_6 * k3_7 +
        3853430 * k1_4 * k2_7 * k3_7 + 102450 * k1_3 * k2_8 * k3_7 -
        2790000 * k1_2 * k2_9 * k3_7 - 237600 * k1 * k2_10 * k3_7 +
        74250 * k2_11 * k3_7 + 59400 * k1_10 * k3_8 + 47520 * k1_9 * k2 * k3_8 +
        1153080 * k1_8 * k2_2 * k3_8 - 815478 * k1_7 * k2_3 * k3_8 +
        1580752 * k1_6 * k2_4 * k3_8 + 2613184 * k1_5 * k2_5 * k3_8 +
        1580752 * k1_4 * k2_6 * k3_8 - 815478 * k1_3 * k2_7 * k3_8 +
        1153080 * k1_2 * k2_8 * k3_8 + 47520 * k1 * k2_9 * k3_8 +
        59400 * k2_10 * k3_8 - 74250 * k1_9 * k3_9 + 237600 * k1_8 * k2 * k3_9 +
        1404150 * k1_7 * k2_2 * k3_9 - 545670 * k1_6 * k2_3 * k3_9 +
        1278130 * k1_5 * k2_4 * k3_9 + 1278130 * k1_4 * k2_5 * k3_9 -
        545670 * k1_3 * k2_6 * k3_9 + 1404150 * k1_2 * k2_7 * k3_9 +
        237600 * k1 * k2_8 * k3_9 - 74250 * k2_9 * k3_9 - 59400 * k1_8 * k3_10 +
        31680 * k1_7 * k2 * k3_10 + 426840 * k1_6 * k2_2 * k3_10 +
        51896 * k1_5 * k2_3 * k3_10 + 254096 * k1_4 * k2_4 * k3_10 +
        51896 * k1_3 * k2_5 * k3_10 + 426840 * k1_2 * k2_6 * k3_10 +
        31680 * k1 * k2_7 * k3_10 - 59400 * k2_8 * k3_10 +
        24750 * k1_7 * k3_11 - 79200 * k1_6 * k2 * k3_11 +
        150300 * k1_5 * k2_2 * k3_11 - 36110 * k1_4 * k2_3 * k3_11 -
        36110 * k1_3 * k2_4 * k3_11 + 150300 * k1_2 * k2_5 * k3_11 -
        79200 * k1 * k2_6 * k3_11 + 24750 * k2_7 * k3_11 +
        19800 * k1_6 * k3_12 - 23760 * k1_5 * k2 * k3_12 +
        20040 * k1_4 * k2_2 * k3_12 - 4720 * k1_3 * k2_3 * k3_12 +
        20040 * k1_2 * k2_4 * k3_12 - 23760 * k1 * k2_5 * k3_12 +
        19800 * k2_6 * k3_12) *
      pi * q_10;

  kernel_poly[7] =
      -(22680 * k1_13 * k2_4 + 136080 * k1_12 * k2_5 + 204120 * k1_11 * k2_6 -
        22680 * k1_10 * k2_7 - 340200 * k1_9 * k2_8 - 340200 * k1_8 * k2_9 -
        22680 * k1_7 * k2_10 + 204120 * k1_6 * k2_11 + 136080 * k1_5 * k2_12 +
        22680 * k1_4 * k2_13 - 43380 * k1_13 * k2_3 * k3 -
        285120 * k1_12 * k2_4 * k3 + 385557 * k1_11 * k2_5 * k3 +
        2469552 * k1_10 * k2_6 * k3 - 371787 * k1_9 * k2_7 * k3 -
        4257984 * k1_8 * k2_8 * k3 - 371787 * k1_7 * k2_9 * k3 +
        2469552 * k1_6 * k2_10 * k3 + 385557 * k1_5 * k2_11 * k3 -
        285120 * k1_4 * k2_12 * k3 - 43380 * k1_3 * k2_13 * k3 +
        264300 * k1_13 * k2_2 * k3_2 - 913770 * k1_12 * k2_3 * k3_2 -
        3547350 * k1_11 * k2_4 * k3_2 + 5668020 * k1_10 * k2_5 * k3_2 +
        12684420 * k1_9 * k2_6 * k3_2 - 14372340 * k1_8 * k2_7 * k3_2 -
        14372340 * k1_7 * k2_8 * k3_2 + 12684420 * k1_6 * k2_9 * k3_2 +
        5668020 * k1_5 * k2_10 * k3_2 - 3547350 * k1_4 * k2_11 * k3_2 -
        913770 * k1_3 * k2_12 * k3_2 + 264300 * k1_2 * k2_13 * k3_2 +
        39600 * k1_13 * k2 * k3_3 + 2114400 * k1_12 * k2_2 * k3_3 -
        2671820 * k1_11 * k2_3 * k3_3 - 7291120 * k1_10 * k2_4 * k3_3 +
        13049052 * k1_9 * k2_5 * k3_3 + 5207312 * k1_8 * k2_6 * k3_3 -
        21778976 * k1_7 * k2_7 * k3_3 + 5207312 * k1_6 * k2_8 * k3_3 +
        13049052 * k1_5 * k2_9 * k3_3 - 7291120 * k1_4 * k2_10 * k3_3 -
        2671820 * k1_3 * k2_11 * k3_3 + 2114400 * k1_2 * k2_12 * k3_3 +
        39600 * k1 * k2_13 * k3_3 - 49500 * k1_13 * k3_4 +
        158400 * k1_12 * k2 * k3_4 + 2924550 * k1_11 * k2_2 * k3_4 +
        487030 * k1_10 * k2_3 * k3_4 - 8182660 * k1_9 * k2_4 * k3_4 -
        2929880 * k1_8 * k2_5 * k3_4 + 7750340 * k1_7 * k2_6 * k3_4 +
        7750340 * k1_6 * k2_7 * k3_4 - 2929880 * k1_5 * k2_8 * k3_4 -
        8182660 * k1_4 * k2_9 * k3_4 + 487030 * k1_3 * k2_10 * k3_4 +
        2924550 * k1_2 * k2_11 * k3_4 + 158400 * k1 * k2_12 * k3_4 -
        49500 * k2_13 * k3_4 - 99000 * k1_12 * k3_5 -
        2458200 * k1_10 * k2_2 * k3_5 + 3409720 * k1_9 * k2_3 * k3_5 -
        1810760 * k1_8 * k2_4 * k3_5 - 5733499 * k1_7 * k2_5 * k3_5 +
        10495776 * k1_6 * k2_6 * k3_5 - 5733499 * k1_5 * k2_7 * k3_5 -
        1810760 * k1_4 * k2_8 * k3_5 + 3409720 * k1_3 * k2_9 * k3_5 -
        2458200 * k1_2 * k2_10 * k3_5 - 99000 * k2_12 * k3_5 +
        118800 * k1_11 * k3_6 - 459360 * k1_10 * k2 * k3_6 -
        6015840 * k1_9 * k2_2 * k3_6 + 1440588 * k1_8 * k2_3 * k3_6 +
        5736868 * k1_7 * k2_4 * k3_6 - 1497356 * k1_6 * k2_5 * k3_6 -
        1497356 * k1_5 * k2_6 * k3_6 + 5736868 * k1_4 * k2_7 * k3_6 +
        1440588 * k1_3 * k2_8 * k3_6 - 6015840 * k1_2 * k2_9 * k3_6 -
        459360 * k1 * k2_10 * k3_6 + 118800 * k2_11 * k3_6 +
        297000 * k1_10 * k3_7 - 237600 * k1_9 * k2 * k3_7 -
        1089000 * k1_8 * k2_2 * k3_7 - 311050 * k1_7 * k2_3 * k3_7 +
        3376880 * k1_6 * k2_4 * k3_7 + 531960 * k1_5 * k2_5 * k3_7 +
        3376880 * k1_4 * k2_6 * k3_7 - 311050 * k1_3 * k2_7 * k3_7 -
        1089000 * k1_2 * k2_8 * k3_7 - 237600 * k1 * k2_9 * k3_7 +
        297000 * k2_10 * k3_7 - 59400 * k1_9 * k3_8 +
        427680 * k1_8 * k2 * k3_8 + 2395920 * k1_7 * k2_2 * k3_8 -
        957872 * k1_6 * k2_3 * k3_8 + 901148 * k1_5 * k2_4 * k3_8 +
        901148 * k1_4 * k2_5 * k3_8 - 957872 * k1_3 * k2_6 * k3_8 +
        2395920 * k1_2 * k2_7 * k3_8 + 427680 * k1 * k2_8 * k3_8 -
        59400 * k2_9 * k3_8 - 297000 * k1_8 * k3_9 + 316800 * k1_7 * k2 * k3_9 +
        1332600 * k1_6 * k2_2 * k3_9 - 314780 * k1_5 * k2_3 * k3_9 +
        303120 * k1_4 * k2_4 * k3_9 - 314780 * k1_3 * k2_5 * k3_9 +
        1332600 * k1_2 * k2_6 * k3_9 + 316800 * k1 * k2_7 * k3_9 -
        297000 * k2_8 * k3_9 - 39600 * k1_7 * k3_10 -
        110880 * k1_6 * k2 * k3_10 + 426060 * k1_5 * k2_2 * k3_10 -
        106126 * k1_4 * k2_3 * k3_10 - 106126 * k1_3 * k2_4 * k3_10 +
        426060 * k1_2 * k2_5 * k3_10 - 110880 * k1 * k2_6 * k3_10 -
        39600 * k2_7 * k3_10 + 99000 * k1_6 * k3_11 -
        118800 * k1_5 * k2 * k3_11 + 100200 * k1_4 * k2_2 * k3_11 -
        24440 * k1_3 * k2_3 * k3_11 + 100200 * k1_2 * k2_4 * k3_11 -
        118800 * k1 * k2_5 * k3_11 + 99000 * k2_6 * k3_11 +
        29700 * k1_5 * k3_12 - 15840 * k1_4 * k2 * k3_12 +
        5010 * k1_3 * k2_2 * k3_12 + 5010 * k1_2 * k2_3 * k3_12 -
        15840 * k1 * k2_4 * k3_12 + 29700 * k2_5 * k3_12) *
      pi * q_11;

  kernel_poly[8] =
      -(5670 * k1_13 * k2_3 + 90720 * k1_12 * k2_4 + 334530 * k1_11 * k2_5 +
        362880 * k1_10 * k2_6 - 340200 * k1_9 * k2_7 - 907200 * k1_8 * k2_8 -
        340200 * k1_7 * k2_9 + 362880 * k1_6 * k2_10 + 334530 * k1_5 * k2_11 +
        90720 * k1_4 * k2_12 + 5670 * k1_3 * k2_13 + 52860 * k1_13 * k2_2 * k3 -
        174690 * k1_12 * k2_3 * k3 - 562302 * k1_11 * k2_4 * k3 +
        1766628 * k1_10 * k2_5 * k3 + 2915892 * k1_9 * k2_6 * k3 -
        3932868 * k1_8 * k2_7 * k3 - 3932868 * k1_7 * k2_8 * k3 +
        2915892 * k1_6 * k2_9 * k3 + 1766628 * k1_5 * k2_10 * k3 -
        562302 * k1_4 * k2_11 * k3 - 174690 * k1_3 * k2_12 * k3 +
        52860 * k1_2 * k2_13 * k3 + 19800 * k1_13 * k2 * k3_2 +
        1057200 * k1_12 * k2_2 * k3_2 - 1475325 * k1_11 * k2_3 * k3_2 -
        5266200 * k1_10 * k2_4 * k3_2 + 3901830 * k1_9 * k2_5 * k3_2 +
        4002360 * k1_8 * k2_6 * k3_2 - 6126150 * k1_7 * k2_7 * k3_2 +
        4002360 * k1_6 * k2_8 * k3_2 + 3901830 * k1_5 * k2_9 * k3_2 -
        5266200 * k1_4 * k2_10 * k3_2 - 1475325 * k1_3 * k2_11 * k3_2 +
        1057200 * k1_2 * k2_12 * k3_2 + 19800 * k1 * k2_13 * k3_2 -
        49500 * k1_13 * k3_3 + 158400 * k1_12 * k2 * k3_3 +
        3327390 * k1_11 * k2_2 * k3_3 - 1163050 * k1_10 * k2_3 * k3_3 -
        13226372 * k1_9 * k2_4 * k3_3 - 1101952 * k1_8 * k2_5 * k3_3 +
        10843876 * k1_7 * k2_6 * k3_3 + 10843876 * k1_6 * k2_7 * k3_3 -
        1101952 * k1_5 * k2_8 * k3_3 - 13226372 * k1_4 * k2_9 * k3_3 -
        1163050 * k1_3 * k2_10 * k3_3 + 3327390 * k1_2 * k2_11 * k3_3 +
        158400 * k1 * k2_12 * k3_3 - 49500 * k2_13 * k3_3 -
        198000 * k1_12 * k3_4 + 178200 * k1_11 * k2 * k3_4 +
        1126200 * k1_10 * k2_2 * k3_4 + 1421960 * k1_9 * k2_3 * k3_4 -
        7065440 * k1_8 * k2_4 * k3_4 - 301490 * k1_7 * k2_5 * k3_4 +
        17206320 * k1_6 * k2_6 * k3_4 - 301490 * k1_5 * k2_7 * k3_4 -
        7065440 * k1_4 * k2_8 * k3_4 + 1421960 * k1_3 * k2_9 * k3_4 +
        1126200 * k1_2 * k2_10 * k3_4 + 178200 * k1 * k2_11 * k3_4 -
        198000 * k2_12 * k3_4 - 396000 * k1_10 * k2 * k3_5 -
        5360160 * k1_9 * k2_2 * k3_5 + 1994620 * k1_8 * k2_3 * k3_5 +
        7195124 * k1_7 * k2_4 * k3_5 + 906244 * k1_6 * k2_5 * k3_5 +
        906244 * k1_5 * k2_6 * k3_5 + 7195124 * k1_4 * k2_7 * k3_5 +
        1994620 * k1_3 * k2_8 * k3_5 - 5360160 * k1_2 * k2_9 * k3_5 -
        396000 * k1 * k2_10 * k3_5 + 574200 * k1_10 * k3_6 -
        649440 * k1_9 * k2 * k3_6 - 4645800 * k1_8 * k2_2 * k3_6 +
        955267 * k1_7 * k2_3 * k3_6 + 5839000 * k1_6 * k2_4 * k3_6 -
        1013844 * k1_5 * k2_5 * k3_6 + 5839000 * k1_4 * k2_6 * k3_6 +
        955267 * k1_3 * k2_7 * k3_6 - 4645800 * k1_2 * k2_8 * k3_6 -
        649440 * k1 * k2_9 * k3_6 + 574200 * k2_10 * k3_6 +
        297000 * k1_9 * k3_7 + 237600 * k1_8 * k2 * k3_7 +
        1026960 * k1_7 * k2_2 * k3_7 - 515560 * k1_6 * k2_3 * k3_7 +
        712580 * k1_5 * k2_4 * k3_7 + 712580 * k1_4 * k2_5 * k3_7 -
        515560 * k1_3 * k2_6 * k3_7 + 1026960 * k1_2 * k2_7 * k3_7 +
        237600 * k1 * k2_8 * k3_7 + 297000 * k2_9 * k3_7 -
        534600 * k1_8 * k3_8 + 681120 * k1_7 * k2 * k3_8 +
        2206920 * k1_6 * k2_2 * k3_8 - 754228 * k1_5 * k2_3 * k3_8 +
        274240 * k1_4 * k2_4 * k3_8 - 754228 * k1_3 * k2_5 * k3_8 +
        2206920 * k1_2 * k2_6 * k3_8 + 681120 * k1 * k2_7 * k3_8 -
        534600 * k2_8 * k3_8 - 396000 * k1_7 * k3_9 + 79200 * k1_6 * k2 * k3_9 +
        927900 * k1_5 * k2_2 * k3_9 - 279270 * k1_4 * k2_3 * k3_9 -
        279270 * k1_3 * k2_4 * k3_9 + 927900 * k1_2 * k2_5 * k3_9 +
        79200 * k1 * k2_6 * k3_9 - 396000 * k2_7 * k3_9 +
        138600 * k1_6 * k3_10 - 225720 * k1_5 * k2 * k3_10 +
        255480 * k1_4 * k2_2 * k3_10 - 68944 * k1_3 * k2_3 * k3_10 +
        255480 * k1_2 * k2_4 * k3_10 - 225720 * k1 * k2_5 * k3_10 +
        138600 * k2_6 * k3_10 + 148500 * k1_5 * k3_11 -
        79200 * k1_4 * k2 * k3_11 + 25050 * k1_3 * k2_2 * k3_11 +
        25050 * k1_2 * k2_3 * k3_11 - 79200 * k1 * k2_4 * k3_11 +
        148500 * k2_5 * k3_11 + 19800 * k1_4 * k3_12 -
        3960 * k1_3 * k2 * k3_12 - 3960 * k1 * k2_3 * k3_12 +
        19800 * k2_4 * k3_12) *
      pi * q_12;

  kernel_poly[9] =
      -(22680 * k1_12 * k2_3 + 226800 * k1_11 * k2_4 + 657720 * k1_10 * k2_5 +
        249480 * k1_9 * k2_6 - 1156680 * k1_8 * k2_7 - 1156680 * k1_7 * k2_8 +
        249480 * k1_6 * k2_9 + 657720 * k1_5 * k2_10 + 226800 * k1_4 * k2_11 +
        22680 * k1_3 * k2_12 + 3960 * k1_13 * k2 * k3 +
        211440 * k1_12 * k2_2 * k3 - 258273 * k1_11 * k2_3 * k3 -
        625848 * k1_10 * k2_4 * k3 + 1641198 * k1_9 * k2_5 * k3 +
        469848 * k1_8 * k2_6 * k3 - 2832990 * k1_7 * k2_7 * k3 +
        469848 * k1_6 * k2_8 * k3 + 1641198 * k1_5 * k2_9 * k3 -
        625848 * k1_4 * k2_10 * k3 - 258273 * k1_3 * k2_11 * k3 +
        211440 * k1_2 * k2_12 * k3 + 3960 * k1 * k2_13 * k3 -
        24750 * k1_13 * k3_2 + 79200 * k1_12 * k2 * k3_2 +
        1714050 * k1_11 * k2_2 * k3_2 - 1085250 * k1_10 * k2_3 * k3_2 -
        8968380 * k1_9 * k2_4 * k3_2 - 1557810 * k1_8 * k2_5 * k3_2 +
        8446860 * k1_7 * k2_6 * k3_2 + 8446860 * k1_6 * k2_7 * k3_2 -
        1557810 * k1_5 * k2_8 * k3_2 - 8968380 * k1_4 * k2_9 * k3_2 -
        1085250 * k1_3 * k2_10 * k3_2 + 1714050 * k1_2 * k2_11 * k3_2 +
        79200 * k1 * k2_12 * k3_2 - 24750 * k2_13 * k3_2 -
        198000 * k1_12 * k3_3 + 225720 * k1_11 * k2 * k3_3 +
        2737560 * k1_10 * k2_2 * k3_3 - 995588 * k1_9 * k2_3 * k3_3 -
        12012928 * k1_8 * k2_4 * k3_3 + 189014 * k1_7 * k2_5 * k3_3 +
        18454704 * k1_6 * k2_6 * k3_3 + 189014 * k1_5 * k2_7 * k3_3 -
        12012928 * k1_4 * k2_8 * k3_3 - 995588 * k1_3 * k2_9 * k3_3 +
        2737560 * k1_2 * k2_10 * k3_3 + 225720 * k1 * k2_11 * k3_3 -
        198000 * k2_12 * k3_3 - 222750 * k1_11 * k3_4 -
        79200 * k1_10 * k2 * k3_4 - 1150800 * k1_9 * k2_2 * k3_4 +
        726490 * k1_8 * k2_3 * k3_4 + 3558700 * k1_7 * k2_4 * k3_4 +
        3244480 * k1_6 * k2_5 * k3_4 + 3244480 * k1_5 * k2_6 * k3_4 +
        3558700 * k1_4 * k2_7 * k3_4 + 726490 * k1_3 * k2_8 * k3_4 -
        1150800 * k1_2 * k2_9 * k3_4 - 79200 * k1 * k2_10 * k3_4 -
        222750 * k2_11 * k3_4 + 495000 * k1_10 * k3_5 -
        681120 * k1_9 * k2 * k3_5 - 4920840 * k1_8 * k2_2 * k3_5 +
        2088971 * k1_7 * k2_3 * k3_5 + 7136376 * k1_6 * k2_4 * k3_5 -
        220564 * k1_5 * k2_5 * k3_5 + 7136376 * k1_4 * k2_6 * k3_5 +
        2088971 * k1_3 * k2_7 * k3_5 - 4920840 * k1_2 * k2_8 * k3_5 -
        681120 * k1 * k2_9 * k3_5 + 495000 * k2_10 * k3_5 +
        811800 * k1_9 * k3_6 - 237600 * k1_8 * k2 * k3_6 -
        1992600 * k1_7 * k2_2 * k3_6 + 695080 * k1_6 * k2_3 * k3_6 +
        950920 * k1_5 * k2_4 * k3_6 + 950920 * k1_4 * k2_5 * k3_6 +
        695080 * k1_3 * k2_6 * k3_6 - 1992600 * k1_2 * k2_7 * k3_6 -
        237600 * k1 * k2_8 * k3_6 + 811800 * k2_9 * k3_6 -
        297000 * k1_8 * k3_7 + 649440 * k1_7 * k2 * k3_7 +
        1496040 * k1_6 * k2_2 * k3_7 - 680650 * k1_5 * k2_3 * k3_7 -
        157760 * k1_4 * k2_4 * k3_7 - 680650 * k1_3 * k2_5 * k3_7 +
        1496040 * k1_2 * k2_6 * k3_7 + 649440 * k1 * k2_7 * k3_7 -
        297000 * k2_8 * k3_7 - 851400 * k1_7 * k3_8 +
        396000 * k1_6 * k2 * k3_8 + 1365480 * k1_5 * k2_2 * k3_8 -
        444440 * k1_4 * k2_3 * k3_8 - 444440 * k1_3 * k2_4 * k3_8 +
        1365480 * k1_2 * k2_5 * k3_8 + 396000 * k1 * k2_6 * k3_8 -
        851400 * k2_7 * k3_8 - 99000 * k1_6 * k3_9 - 178200 * k1_5 * k2 * k3_9 +
        475800 * k1_4 * k2_2 * k3_9 - 158580 * k1_3 * k2_3 * k3_9 +
        475800 * k1_2 * k2_4 * k3_9 - 178200 * k1 * k2_5 * k3_9 -
        99000 * k2_6 * k3_9 + 282150 * k1_5 * k3_10 -
        158400 * k1_4 * k2 * k3_10 + 63870 * k1_3 * k2_2 * k3_10 +
        63870 * k1_2 * k2_3 * k3_10 - 158400 * k1 * k2_4 * k3_10 +
        282150 * k2_5 * k3_10 + 99000 * k1_4 * k3_11 -
        19800 * k1_3 * k2 * k3_11 - 19800 * k1 * k2_3 * k3_11 +
        99000 * k2_4 * k3_11 + 4950 * k1_3 * k3_12 + 4950 * k2_3 * k3_12) *
      pi * q_13;

  kernel_poly[10] =
      -(56700 * k1_11 * k2_3 + 453600 * k1_10 * k2_4 + 771120 * k1_9 * k2_5 -
        453600 * k1_8 * k2_6 - 1655640 * k1_7 * k2_7 - 453600 * k1_6 * k2_8 +
        771120 * k1_5 * k2_9 + 453600 * k1_4 * k2_10 + 56700 * k1_3 * k2_11 -
        4950 * k1_13 * k3 + 15840 * k1_12 * k2 * k3 +
        342810 * k1_11 * k2_2 * k3 - 110202 * k1_10 * k2_3 * k3 -
        1180812 * k1_9 * k2_4 * k3 + 160182 * k1_8 * k2_5 * k3 +
        751932 * k1_7 * k2_6 * k3 + 751932 * k1_6 * k2_7 * k3 +
        160182 * k1_5 * k2_8 * k3 - 1180812 * k1_4 * k2_9 * k3 -
        110202 * k1_3 * k2_10 * k3 + 342810 * k1_2 * k2_11 * k3 +
        15840 * k1 * k2_12 * k3 - 4950 * k2_13 * k3 - 99000 * k1_12 * k3_2 +
        118800 * k1_11 * k2 * k3_2 + 1570200 * k1_10 * k2_2 * k3_2 -
        1231170 * k1_9 * k2_3 * k3_2 - 7791240 * k1_8 * k2_4 * k3_2 +
        398265 * k1_7 * k2_5 * k3_2 + 11279280 * k1_6 * k2_6 * k3_2 +
        398265 * k1_5 * k2_7 * k3_2 - 7791240 * k1_4 * k2_8 * k3_2 -
        1231170 * k1_3 * k2_9 * k3_2 + 1570200 * k1_2 * k2_10 * k3_2 +
        118800 * k1 * k2_11 * k3_2 - 99000 * k2_12 * k3_2 -
        282150 * k1_11 * k3_3 + 110880 * k1_10 * k2 * k3_3 +
        1423920 * k1_9 * k2_2 * k3_3 - 1194262 * k1_8 * k2_3 * k3_3 -
        2374372 * k1_7 * k2_4 * k3_3 + 2353016 * k1_6 * k2_5 * k3_3 +
        2353016 * k1_5 * k2_6 * k3_3 - 2374372 * k1_4 * k2_7 * k3_3 -
        1194262 * k1_3 * k2_8 * k3_3 + 1423920 * k1_2 * k2_9 * k3_3 +
        110880 * k1 * k2_10 * k3_3 - 282150 * k2_11 * k3_3 +
        99000 * k1_10 * k3_4 - 316800 * k1_9 * k2 * k3_4 -
        1776600 * k1_8 * k2_2 * k3_4 + 1541200 * k1_7 * k2_3 * k3_4 +
        4099680 * k1_6 * k2_4 * k3_4 + 509720 * k1_5 * k2_5 * k3_4 +
        4099680 * k1_4 * k2_6 * k3_4 + 1541200 * k1_3 * k2_7 * k3_4 -
        1776600 * k1_2 * k2_8 * k3_4 - 316800 * k1 * k2_9 * k3_4 +
        99000 * k2_10 * k3_4 + 851400 * k1_9 * k3_5 -
        427680 * k1_8 * k2 * k3_5 - 2973240 * k1_7 * k2_2 * k3_5 +
        1586904 * k1_6 * k2_3 * k3_5 + 1171224 * k1_5 * k2_4 * k3_5 +
        1171224 * k1_4 * k2_5 * k3_5 + 1586904 * k1_3 * k2_6 * k3_5 -
        2973240 * k1_2 * k2_7 * k3_5 - 427680 * k1 * k2_8 * k3_5 +
        851400 * k2_9 * k3_5 + 297000 * k1_8 * k3_6 +
        237600 * k1_7 * k2 * k3_6 - 444600 * k1_6 * k2_2 * k3_6 -
        91250 * k1_5 * k2_3 * k3_6 - 763440 * k1_4 * k2_4 * k3_6 -
        91250 * k1_3 * k2_5 * k3_6 - 444600 * k1_2 * k2_6 * k3_6 +
        237600 * k1 * k2_7 * k3_6 + 297000 * k2_8 * k3_6 -
        811800 * k1_7 * k3_7 + 459360 * k1_6 * k2 * k3_7 +
        1087560 * k1_5 * k2_2 * k3_7 - 454520 * k1_4 * k2_3 * k3_7 -
        454520 * k1_3 * k2_4 * k3_7 + 1087560 * k1_2 * k2_5 * k3_7 +
        459360 * k1 * k2_6 * k3_7 - 811800 * k2_7 * k3_7 -
        495000 * k1_6 * k3_8 + 651000 * k1_4 * k2_2 * k3_8 -
        239360 * k1_3 * k2_3 * k3_8 + 651000 * k1_2 * k2_4 * k3_8 -
        495000 * k2_6 * k3_8 + 222750 * k1_5 * k3_9 -
        158400 * k1_4 * k2 * k3_9 + 118950 * k1_3 * k2_2 * k3_9 +
        118950 * k1_2 * k2_3 * k3_9 - 158400 * k1 * k2_4 * k3_9 +
        222750 * k2_5 * k3_9 + 198000 * k1_4 * k3_10 -
        39600 * k1_3 * k2 * k3_10 - 39600 * k1 * k2_3 * k3_10 +
        198000 * k2_4 * k3_10 + 24750 * k1_3 * k3_11 + 24750 * k2_3 * k3_11) *
      pi * q_14;

  kernel_poly[11] =
      -(113400 * k1_10 * k2_3 + 567000 * k1_9 * k2_4 + 340200 * k1_8 * k2_5 -
        1020600 * k1_7 * k2_6 - 1020600 * k1_6 * k2_7 + 340200 * k1_5 * k2_8 +
        567000 * k1_4 * k2_9 + 113400 * k1_3 * k2_10 - 19800 * k1_12 * k3 +
        23760 * k1_11 * k2 * k3 + 314040 * k1_10 * k2_2 * k3 -
        93018 * k1_9 * k2_3 * k3 - 1114728 * k1_8 * k2_4 * k3 +
        59493 * k1_7 * k2_5 * k3 + 1610736 * k1_6 * k2_6 * k3 +
        59493 * k1_5 * k2_7 * k3 - 1114728 * k1_4 * k2_8 * k3 -
        93018 * k1_3 * k2_9 * k3 + 314040 * k1_2 * k2_10 * k3 +
        23760 * k1 * k2_11 * k3 - 19800 * k2_12 * k3 - 148500 * k1_11 * k3_2 +
        79200 * k1_10 * k2 * k3_2 + 1033800 * k1_9 * k2_2 * k3_2 -
        1128810 * k1_8 * k2_3 * k3_2 - 2262510 * k1_7 * k2_4 * k3_2 +
        1481820 * k1_6 * k2_5 * k3_2 + 1481820 * k1_5 * k2_6 * k3_2 -
        2262510 * k1_4 * k2_7 * k3_2 - 1128810 * k1_3 * k2_8 * k3_2 +
        1033800 * k1_2 * k2_9 * k3_2 + 79200 * k1 * k2_10 * k3_2 -
        148500 * k2_11 * k3_2 - 138600 * k1_10 * k3_3 -
        31680 * k1_9 * k2 * k3_3 + 465480 * k1_8 * k2_2 * k3_3 +
        5612 * k1_7 * k2_3 * k3_3 - 156288 * k1_6 * k2_4 * k3_3 +
        184864 * k1_5 * k2_5 * k3_3 - 156288 * k1_4 * k2_6 * k3_3 +
        5612 * k1_3 * k2_7 * k3_3 + 465480 * k1_2 * k2_8 * k3_3 -
        31680 * k1 * k2_9 * k3_3 - 138600 * k2_10 * k3_3 +
        396000 * k1_9 * k3_4 - 237600 * k1_8 * k2 * k3_4 -
        1429650 * k1_7 * k2_2 * k3_4 + 1096170 * k1_6 * k2_3 * k3_4 +
        630720 * k1_5 * k2_4 * k3_4 + 630720 * k1_4 * k2_5 * k3_4 +
        1096170 * k1_3 * k2_6 * k3_4 - 1429650 * k1_2 * k2_7 * k3_4 -
        237600 * k1 * k2_8 * k3_4 + 396000 * k2_9 * k3_4 +
        534600 * k1_8 * k3_5 - 47520 * k1_7 * k2 * k3_5 -
        1350360 * k1_6 * k2_2 * k3_5 + 337446 * k1_5 * k2_3 * k3_5 -
        969264 * k1_4 * k2_4 * k3_5 + 337446 * k1_3 * k2_5 * k3_5 -
        1350360 * k1_2 * k2_6 * k3_5 - 47520 * k1 * k2_7 * k3_5 +
        534600 * k2_8 * k3_5 - 297000 * k1_7 * k3_6 +
        237600 * k1_6 * k2 * k3_6 + 233100 * k1_5 * k2_2 * k3_6 -
        301110 * k1_4 * k2_3 * k3_6 - 301110 * k1_3 * k2_4 * k3_6 +
        233100 * k1_2 * k2_5 * k3_6 + 237600 * k1 * k2_6 * k3_6 -
        297000 * k2_7 * k3_6 - 574200 * k1_6 * k3_7 + 95040 * k1_5 * k2 * k3_7 +
        570840 * k1_4 * k2_2 * k3_7 - 217400 * k1_3 * k2_3 * k3_7 +
        570840 * k1_2 * k2_4 * k3_7 + 95040 * k1 * k2_5 * k3_7 -
        574200 * k2_6 * k3_7 - 79200 * k1_4 * k2 * k3_8 +
        162750 * k1_3 * k2_2 * k3_8 + 162750 * k1_2 * k2_3 * k3_8 -
        79200 * k1 * k2_4 * k3_8 + 198000 * k1_4 * k3_9 -
        39600 * k1_3 * k2 * k3_9 - 39600 * k1 * k2_3 * k3_9 +
        198000 * k2_4 * k3_9 + 49500 * k1_3 * k3_10 + 49500 * k2_3 * k3_10) *
          pi * q_15 -
      (141750 * k1_9 * k2_3 + 362880 * k1_8 * k2_4 - 141750 * k1_7 * k2_5 -
       725760 * k1_6 * k2_6 - 141750 * k1_5 * k2_7 + 362880 * k1_4 * k2_8 +
       141750 * k1_3 * k2_9 - 29700 * k1_11 * k3 + 15840 * k1_10 * k2 * k3 +
       206760 * k1_9 * k2_2 * k3 - 114882 * k1_8 * k2_3 * k3 -
       281142 * k1_7 * k2_4 * k3 + 195564 * k1_6 * k2_5 * k3 +
       195564 * k1_5 * k2_6 * k3 - 281142 * k1_4 * k2_7 * k3 -
       114882 * k1_3 * k2_8 * k3 + 206760 * k1_2 * k2_9 * k3 +
       15840 * k1 * k2_10 * k3 - 29700 * k2_11 * k3 - 99000 * k1_10 * k3_2 +
       19800 * k1_9 * k2 * k3_2 + 513000 * k1_8 * k2_2 * k3_2 -
       272565 * k1_7 * k2_3 * k3_2 - 655920 * k1_6 * k2_4 * k3_2 +
       118080 * k1_5 * k2_5 * k3_2 - 655920 * k1_4 * k2_6 * k3_2 -
       272565 * k1_3 * k2_7 * k3_2 + 513000 * k1_2 * k2_8 * k3_2 +
       19800 * k1 * k2_9 * k3_2 - 99000 * k2_10 * k3_2 + 39600 * k1_9 * k3_3 -
       47520 * k1_8 * k2 * k3_3 - 80730 * k1_7 * k2_2 * k3_3 +
       88218 * k1_6 * k2_3 * k3_3 - 35112 * k1_5 * k2_4 * k3_3 -
       35112 * k1_4 * k2_5 * k3_3 + 88218 * k1_3 * k2_6 * k3_3 -
       80730 * k1_2 * k2_7 * k3_3 - 47520 * k1 * k2_8 * k3_3 +
       39600 * k2_9 * k3_3 + 297000 * k1_8 * k3_4 - 59400 * k1_7 * k2 * k3_4 -
       788400 * k1_6 * k2_2 * k3_4 + 251430 * k1_5 * k2_3 * k3_4 -
       606960 * k1_4 * k2_4 * k3_4 + 251430 * k1_3 * k2_5 * k3_4 -
       788400 * k1_2 * k2_6 * k3_4 - 59400 * k1 * k2_7 * k3_4 +
       297000 * k2_8 * k3_4 + 59400 * k1_7 * k3_5 + 47520 * k1_6 * k2 * k3_5 -
       268740 * k1_5 * k2_2 * k3_5 - 167166 * k1_4 * k2_3 * k3_5 -
       167166 * k1_3 * k2_4 * k3_5 - 268740 * k1_2 * k2_5 * k3_5 +
       47520 * k1 * k2_6 * k3_5 + 59400 * k2_7 * k3_5 - 297000 * k1_6 * k3_6 +
       59400 * k1_5 * k2 * k3_6 + 275400 * k1_4 * k2_2 * k3_6 -
       102840 * k1_3 * k2_3 * k3_6 + 275400 * k1_2 * k2_4 * k3_6 +
       59400 * k1 * k2_5 * k3_6 - 297000 * k2_6 * k3_6 - 118800 * k1_5 * k3_7 -
       15840 * k1_4 * k2 * k3_7 + 142710 * k1_3 * k2_2 * k3_7 +
       142710 * k1_2 * k2_3 * k3_7 - 15840 * k1 * k2_4 * k3_7 -
       118800 * k2_5 * k3_7 + 99000 * k1_4 * k3_8 - 19800 * k1_3 * k2 * k3_8 -
       19800 * k1 * k2_3 * k3_8 + 99000 * k2_4 * k3_8 + 49500 * k1_3 * k3_9 +
       49500 * k2_3 * k3_9) *
          pi * q_16;

  kernel_poly[12] =
      -(90720 * k1_8 * k2_3 + 90720 * k1_7 * k2_4 - 181440 * k1_6 * k2_5 -
        181440 * k1_5 * k2_6 + 90720 * k1_4 * k2_7 + 90720 * k1_3 * k2_8 -
        19800 * k1_10 * k3 + 3960 * k1_9 * k2 * k3 + 102600 * k1_8 * k2_2 * k3 -
        11673 * k1_7 * k2_3 * k3 - 82800 * k1_6 * k2_4 * k3 +
        13536 * k1_5 * k2_5 * k3 - 82800 * k1_4 * k2_6 * k3 -
        11673 * k1_3 * k2_7 * k3 + 102600 * k1_2 * k2_8 * k3 +
        3960 * k1 * k2_9 * k3 - 19800 * k2_10 * k3 - 24750 * k1_9 * k3_2 +
        128250 * k1_7 * k2_2 * k3_2 - 93330 * k1_6 * k2_3 * k3_2 -
        131130 * k1_5 * k2_4 * k3_2 - 131130 * k1_4 * k2_5 * k3_2 -
        93330 * k1_3 * k2_6 * k3_2 + 128250 * k1_2 * k2_7 * k3_2 -
        24750 * k2_9 * k3_2 + 59400 * k1_8 * k3_3 - 11880 * k1_7 * k2 * k3_3 -
        157680 * k1_6 * k2_2 * k3_3 + 38232 * k1_5 * k2_3 * k3_3 -
        97200 * k1_4 * k2_4 * k3_3 + 38232 * k1_3 * k2_5 * k3_3 -
        157680 * k1_2 * k2_6 * k3_3 - 11880 * k1 * k2_7 * k3_3 +
        59400 * k2_8 * k3_3 + 74250 * k1_7 * k3_4 -
        197100 * k1_5 * k2_2 * k3_4 - 90990 * k1_4 * k2_3 * k3_4 -
        90990 * k1_3 * k2_4 * k3_4 - 197100 * k1_2 * k2_5 * k3_4 +
        74250 * k2_7 * k3_4 - 59400 * k1_6 * k3_5 + 11880 * k1_5 * k2 * k3_5 +
        55080 * k1_4 * k2_2 * k3_5 - 23004 * k1_3 * k2_3 * k3_5 +
        55080 * k1_2 * k2_4 * k3_5 + 11880 * k1 * k2_5 * k3_5 -
        59400 * k2_6 * k3_5 - 74250 * k1_5 * k3_6 + 68850 * k1_3 * k2_2 * k3_6 +
        68850 * k1_2 * k2_3 * k3_6 - 74250 * k2_5 * k3_6 + 19800 * k1_4 * k3_7 -
        3960 * k1_3 * k2 * k3_7 - 3960 * k1 * k2_3 * k3_7 +
        19800 * k2_4 * k3_7 + 24750 * k1_3 * k3_8 + 24750 * k2_3 * k3_8) *
          pi * q_17 -
      (22680 * k1_7 * k2_3 - 45360 * k1_5 * k2_5 + 22680 * k1_3 * k2_7 -
       4950 * k1_9 * k3 + 25650 * k1_7 * k2_2 * k3 - 6570 * k1_6 * k2_3 * k3 -
       14130 * k1_5 * k2_4 * k3 - 14130 * k1_4 * k2_5 * k3 -
       6570 * k1_3 * k2_6 * k3 + 25650 * k1_2 * k2_7 * k3 - 4950 * k2_9 * k3 -
       15120 * k1_5 * k2_3 * k3_2 - 15120 * k1_3 * k2_5 * k3_2 +
       14850 * k1_7 * k3_3 - 39420 * k1_5 * k2_2 * k3_3 -
       12150 * k1_4 * k2_3 * k3_3 - 12150 * k1_3 * k2_4 * k3_3 -
       39420 * k1_2 * k2_5 * k3_3 + 14850 * k2_7 * k3_3 -
       7560 * k1_3 * k2_3 * k3_4 - 14850 * k1_5 * k3_5 +
       13770 * k1_3 * k2_2 * k3_5 + 13770 * k1_2 * k2_3 * k3_5 -
       14850 * k2_5 * k3_5 + 4950 * k1_3 * k3_7 + 4950 * k2_3 * k3_7) *
          pi * q_18;

  kernel_beta[0] =
      (pi *
       ((-840 * k1_10 * k2_7 * sqr(k2_2 - q_2) *
         (-2 * k3_4 - 7 * k3_2 * q_2 + 9 * q_4)) /
            sqrt(k3_2 * (k2_2 - q_2) + q_2 * (k1_2 - k2_2 + q_2)) -
        (840 * k1_7 * k2_10 * sqr(k1_2 - q_2) *
         (-2 * k3_4 - 7 * k3_2 * q_2 + 9 * q_4)) /
            sqrt(k3_2 * (k1_2 - q_2) + q_2 * (-k1_2 + k2_2 + q_2)) +
        (4320 * k1_7 * k2_7 * k3_3 * sqr(k1_2 - q_2) * sqr(k2_2 - q_2)) /
            sqrt(k1_2 * (k2_2 - q_2) + q_2 * (-k2_2 + k3_2 + q_2)) -
        (4320 * k1_7 * k2_7 * k3_3 * sqr(k1_2 - q_2) * sqr(k2_2 - q_2) *
         sqr(1 - sqrt(k1_2 * k2_2 + (-k1_2 - k2_2 + k3_2) * q_2 + q_4) /
                     (k3 * q))) /
            (sqrt(k1_2 * (k2_2 - q_2) + q_2 * (-k2_2 + k3_2 + q_2)) *
             sqr(1 + sqrt(k1_2 * k2_2 + (-k1_2 - k2_2 + k3_2) * q_2 + q_4) /
                         (k3 * q))) +
        (840 * k1_7 * k2_10 * sqr(k1_2 - q_2) *
         (-2 * k3_4 - 7 * k3_2 * q_2 + 9 * q_4) *
         sqr(1 -
             sqrt(k1_2 * k3_2 - (k1_2 - k2_2 + k3_2) * q_2 + q_4) / (k2 * q))) /
            (sqrt(k3_2 * (k1_2 - q_2) + q_2 * (-k1_2 + k2_2 + q_2)) *
             sqr(1 + sqrt(k1_2 * k3_2 - (k1_2 - k2_2 + k3_2) * q_2 + q_4) /
                         (k2 * q))) +
        (840 * k1_10 * k2_7 * sqr(k2_2 - q_2) *
         (-2 * k3_4 - 7 * k3_2 * q_2 + 9 * q_4) *
         sqr(1 - sqrt(k2_2 * k3_2 - (-k1_2 + k2_2 + k3_2) * q_2 + q_4) /
                     (k1 * q))) /
            (sqrt(k3_2 * (k2_2 - q_2) + q_2 * (k1_2 - k2_2 + q_2)) *
             sqr(1 + sqrt(k2_2 * k3_2 - (-k1_2 + k2_2 + k3_2) * q_2 + q_4) /
                         (k1 * q))))) /
      (24837120.0 * k1_9 * k2_9 * q_5);

  kernel_beta[1] =
      -(pi * (k1_2 - q_2) *
        (39 * k1_12 + 165 * cub(k2_2 - k3_2) * q_6 -
         k1_10 * (582 * k2_2 + 791 * k3_2 + 1947 * q_2) -
         3 * k1_2 * (-k2_2 + k3_2) * q_4 *
             (85 * k3_4 - 3 * k2_2 * (186 * k2_2 + 95 * q_2) +
              k3_2 * (473 * k2_2 + 153 * q_2)) +
         k1_8 * (51 * k2_4 + 601 * k3_4 + 6891 * k2_2 * q_2 + 1689 * q_4 +
                 k3_2 * (2120 * k2_2 + 1787 * q_2)) +
         k1_6 *
             (492 * k2_6 + 151 * k3_6 - 6465 * k2_4 * q_2 - 7284 * k2_2 * q_4 +
              219 * q_6 + k3_4 * (390 * k2_2 + 179 * q_2) +
              k3_2 * (-633 * k2_4 + 758 * k2_2 * q_2 - 1113 * q_4)) +
         k1_4 * q_2 *
             (1017 * k2_6 + 269 * k3_6 + 7269 * k2_4 * q_2 + 471 * k2_2 * q_4 +
              k3_4 * (391 * k2_2 - 321 * q_2) +
              k3_2 * (-1677 * k2_4 - 4376 * k2_2 * q_2 + 405 * q_4))) *
        sqr(k1 + q) * small_beta(k1, q)) /
      (1655808.0 * k1_9 * k2_2 * q_5);

  kernel_beta[2] =
      -(pi * (k2_2 - q_2) *
        (k3_6 * (151 * k2_6 + 269 * k2_4 * q_2 - 255 * k2_2 * q_4 - 165 * q_6) +
         k3_4 * (601 * k2_8 + 179 * k2_6 * q_2 - 321 * k2_4 * q_4 -
                 459 * k2_2 * q_6 +
                 k1_2 * (390 * k2_6 + 391 * k2_4 * q_2 - 1164 * k2_2 * q_4 +
                         495 * q_6)) +
         k3_2 * (-791 * k2_10 + 1787 * k2_8 * q_2 - 1113 * k2_6 * q_4 +
                 405 * k2_4 * q_6 -
                 3 * k1_4 *
                     (211 * k2_6 + 559 * k2_4 * q_2 - 1031 * k2_2 * q_4 +
                      165 * q_6) +
                 2 * k1_2 *
                     (1060 * k2_8 + 379 * k2_6 * q_2 - 2188 * k2_4 * q_4 +
                      657 * k2_2 * q_6)) +
         3 * (k1_6 * (164 * k2_6 + 339 * k2_4 * q_2 - 558 * k2_2 * q_4 +
                      55 * q_6) +
              k2_6 *
                  (13 * k2_6 - 649 * k2_4 * q_2 + 563 * k2_2 * q_4 + 73 * q_6) +
              k1_4 * (17 * k2_8 - 2155 * k2_6 * q_2 + 2423 * k2_4 * q_4 -
                      285 * k2_2 * q_6) +
              k1_2 * (-194 * k2_10 + 2297 * k2_8 * q_2 - 2428 * k2_6 * q_4 +
                      157 * k2_4 * q_6))) *
        sqr(k2 + q) * small_beta(k2, q)) /
      (1655808.0 * k1_2 * k2_9 * q_5);

  kernel_beta[3] = (pi * (2 * k3_2 + 9 * q_2) *
                    (-15 * (k1_2 + k2_2) * k3_8 - 2 * k3_10 -
                     3 * sqr(k1_2 - k2_2) * q_4 * (k1_2 + k2_2 + 4 * q_2) +
                     2 * k3_6 *
                         (8 * k1_4 + 8 * k2_4 + 23 * k2_2 * q_2 - q_4 +
                          k1_2 * (-16 * k2_2 + 23 * q_2)) +
                     k3_4 * (k1_6 + k2_6 - 56 * k2_4 * q_2 - 47 * k2_2 * q_4 +
                             4 * q_6 - k1_4 * (9 * k2_2 + 56 * q_2) +
                             k1_2 * (-9 * k2_4 + 136 * k2_2 * q_2 - 47 * q_4)) +
                     2 * k3_2 * q_2 *
                         (k1_6 + k2_6 + 26 * k2_4 * q_2 + 4 * k2_2 * q_4 -
                          k1_4 * (k2_2 - 26 * q_2) -
                          k1_2 * (k2_4 + 48 * k2_2 * q_2 - 4 * q_4))) *
                    sqr(k3 + q) * small_beta(k3, q)) /
                   (236544.0 * k1_2 * k2_2 * k3_5 * q_5);

  kernel_beta[4] =
      (3 * k3_3 * pi * (k1_2 - q_2) * (k2_2 - q_2) * big_beta(k1, k2, k3, q)) /
          (17248. * k1_2 * k2_2 * q_5) -
      (-k2 * pi * (2 * k3_2 + 9 * q_2) * (k1_2 - q_2) *
       big_beta(k1, k3, k2, q)) /
          (29568. * k1_2 * q_5) -
      (-k1 * pi * (2 * k3_2 + 9 * q_2) * (k2_2 - q_2) *
       big_beta(k2, k3, k1, q)) /
          (29568. * k2_2 * q_5);

  kernel_poly_sum = 0.0;
  for (int i = 0; i < 13; i++)
    kernel_poly_sum +=
        kernel_poly[i] / (776160.0 * k1_5 * k2_5 * k3 * q_4 * qua(k1 + q) *
                          qua(k2 + q) * qua(k3 + q) * (k3 + q));

  kernel_beta_sum = 0.0;
  for (int i = 0; i < 5; i++)
    kernel_beta_sum += kernel_beta[i];

  kernel = 4.0 * (kernel_poly_sum + kernel_beta_sum);

  return kernel;
}

double kernel_Gamma2v_exact(double k1, double k2, double k3, double q) {
  double kernel1, kernel2, kernel3, kernel4, kernel5, kernel6;
  double k1_2, k1_4, k1_6, k1_8, k1_9, k1_10, k1_12;
  double k2_2, k2_4, k2_6, k2_8, k2_9, k2_10, k2_12;
  double k3_2, k3_3, k3_4, k3_5, k3_6, k3_8, k3_10;
  double q_2, q_4, q_5, q_6, q_8;

  k1_2 = sqr(k1);
  k1_4 = qua(k1);
  k1_6 = k1_2 * k1_4;
  k1_8 = k1_2 * k1_6;
  k1_9 = k1 * k1_8;
  k1_10 = k1 * k1_9;
  k1_12 = k1_10 * k1_2;

  k2_2 = sqr(k2);
  k2_4 = qua(k2);
  k2_6 = k2_2 * k2_4;
  k2_8 = k2_2 * k2_6;
  k2_9 = k2 * k2_8;
  k2_10 = k2 * k2_9;
  k2_12 = k2_10 * k2_2;

  k3_2 = sqr(k3);
  k3_3 = cub(k3);
  k3_4 = qua(k3);
  k3_5 = k3 * k3_4;
  k3_6 = k3 * k3_5;
  k3_8 = k3_2 * k3_6;
  k3_10 = k3_2 * k3_8;

  q_2 = sqr(q);
  q_4 = qua(q);
  q_5 = q * q_4;
  q_6 = q * q_5;
  q_8 = q_2 * q_6;

  kernel1 =
      (pi *
       (15 * k1_6 * k2_6 * k3_4 *
            (sqr(k1_2 - k2_2) * (13 * k1_4 - 4 * k1_2 * k2_2 + 13 * k2_4) -
             (k1_2 + k2_2) * (1977 * k1_4 - 4010 * k1_2 * k2_2 + 1977 * k2_4) *
                 k3_2 +
             (683 * k1_4 + 1252 * k1_2 * k2_2 + 683 * k2_4) * k3_4 +
             1169 * (k1_2 + k2_2) * k3_6 + 112 * k3_8) -
        10 * k1_6 * k2_6 * k3_4 *
            (9 * (k1_2 + k2_2) * (67 * k1_4 - 106 * k1_2 * k2_2 + 67 * k2_4) +
             (-24507 * k1_4 + 50506 * k1_2 * k2_2 - 24507 * k2_4) * k3_2 +
             8119 * (k1_2 + k2_2) * k3_4 + 13385 * k3_6) *
            q_2 -
        k1_4 * k2_4 * k3_2 *
            (1260 * k1_2 * k2_2 * sqr(k1_2 - k2_2) * (k1_2 + k2_2) +
             (-19475 * k1_8 + 93542 * k1_6 * k2_2 - 160734 * k1_4 * k2_4 +
              93542 * k1_2 * k2_6 - 19475 * k2_8) *
                 k3_2 +
             4 * (k1_2 + k2_2) * (345 * k1_4 + 628 * k1_2 * k2_2 + 345 * k2_4) *
                 k3_4 +
             (50385 * k1_4 + 92816 * k1_2 * k2_2 + 50385 * k2_4) * k3_6 -
             32290 * (k1_2 + k2_2) * k3_8) *
            q_4 -
        5 * k1_2 * k2_2 *
            (189 * k1_4 * k2_4 * sqr(k1_2 - k2_2) * (k1_2 + k2_2) -
             252 * k1_4 * k2_4 * (7 * k1_4 - 12 * k1_2 * k2_2 + 7 * k2_4) *
                 k3_2 +
             (k1_2 + k2_2) *
                 (1949 * k1_8 - 10643 * k1_6 * k2_2 + 19341 * k1_4 * k2_4 -
                  10643 * k1_2 * k2_6 + 1949 * k2_8) *
                 k3_4 +
             6 *
                 (-235 * k1_8 + 757 * k1_6 * k2_2 + 137 * k1_4 * k2_4 +
                  757 * k1_2 * k2_6 - 235 * k2_8) *
                 k3_6 -
             3 * (k1_2 + k2_2) *
                 (1009 * k1_4 - 421 * k1_2 * k2_2 + 1009 * k2_4) * k3_8 +
             2488 * (k1_4 + k2_4) * k3_10) *
            q_6 +
        15 *
            (-252 * k1_6 * k2_6 * sqr(k1_2 - k2_2) +
             168 * k1_6 * k2_6 * (k1_2 + k2_2) * k3_2 +
             (55 * k1_12 - 285 * k1_10 * k2_2 + 157 * k1_8 * k2_4 +
              230 * k1_6 * k2_6 + 157 * k1_4 * k2_8 - 285 * k1_2 * k2_10 +
              55 * k2_12) *
                 k3_4 -
             3 * (k1_2 + k2_2) *
                 (55 * k1_8 - 201 * k1_6 * k2_2 + 156 * k1_4 * k2_4 -
                  201 * k1_2 * k2_6 + 55 * k2_8) *
                 k3_6 +
             3 * (55 * k1_8 - 51 * k1_6 * k2_2 - 51 * k1_2 * k2_6 + 55 * k2_8) *
                 k3_8 -
             55 * (k1_6 + k2_6) * k3_10) *
            q_8)) /
      (1552320.0 * k1_8 * k2_8 * k3_4 * q_4);

  kernel2 = -(pi * sqr(k1 - q) * sqr(k1 + q) *
              (13 * k1_12 + 55 * cub(k2_2 - k3_2) * q_6 -
               k1_10 * (194 * k2_2 + 1921 * k3_2 + 649 * q_2) +
               k1_6 * (164 * k2_6 + 801 * k2_4 * k3_2 + 306 * k2_2 * k3_4 +
                       329 * k3_6 -
                       (2155 * k2_4 + 3414 * k2_2 * k3_2 + 1759 * k3_4) * q_2 +
                       (-2428 * k2_2 + 25 * k3_2) * q_4 + 73 * q_6) -
               3 * k1_2 * (k2 - k3) * (k2 + k3) * q_4 *
                   (186 * k2_4 - 307 * k3_4 - 51 * k3_2 * q_2 +
                    k2_2 * (121 * k3_2 + 95 * q_2)) +
               k1_8 * (17 * k2_4 + 1579 * k3_4 + 2913 * k3_2 * q_2 + 563 * q_4 +
                       k2_2 * (1176 * k3_2 + 2297 * q_2)) +
               k1_4 * q_2 *
                   (339 * k2_6 + 647 * k3_6 + 333 * k3_4 * q_2 +
                    135 * k3_2 * q_4 + k2_4 * (321 * k3_2 + 2423 * q_2) +
                    k2_2 * (-1307 * k3_4 - 784 * k3_2 * q_2 + 157 * q_4))) *
              LFunc(k1, q)) /
            (413952.0 * k1_9 * k2_2 * q_5);

  kernel3 =
      -(pi * sqr(k2 - q) * sqr(k2 + q) *
        (k2_6 * (164 * k1_6 + k1_4 * (17 * k2_2 + 801 * k3_2) +
                 (k2 - k3) * (k2 + k3) *
                     (13 * k2_4 - 1908 * k2_2 * k3_2 - 329 * k3_4) +
                 2 * k1_2 * (-97 * k2_4 + 588 * k2_2 * k3_2 + 153 * k3_4)) +
         k2_4 *
             (339 * k1_6 - 649 * k2_6 + 2913 * k2_4 * k3_2 -
              1759 * k2_2 * k3_4 + 647 * k3_6 +
              k1_4 * (-2155 * k2_2 + 321 * k3_2) +
              k1_2 * (2297 * k2_4 - 3414 * k2_2 * k3_2 - 1307 * k3_4)) *
             q_2 +
         k2_2 *
             (-558 * k1_6 + k1_4 * (2423 * k2_2 + 195 * k3_2) -
              4 * k1_2 * (607 * k2_4 + 196 * k2_2 * k3_2 - 321 * k3_4) +
              (k2 - k3) * (k2 + k3) *
                  (563 * k2_4 + 588 * k2_2 * k3_2 + 921 * k3_4)) *
             q_4 +
         (55 * k1_6 - 15 * k1_4 * (19 * k2_2 + 11 * k3_2) +
          (k2 - k3) * (k2 + k3) * (73 * k2_4 + 208 * k2_2 * k3_2 + 55 * k3_4) +
          k1_2 * (157 * k2_4 + 438 * k2_2 * k3_2 + 165 * k3_4)) *
             q_6) *
        LFunc(k2, q)) /
      (413952.0 * k1_2 * k2_9 * q_5);

  kernel4 =
      (pi * (k3 - q) * (k3 + q) * (8 * k3_2 + 3 * q_2) *
       (k3_4 * (k1_6 - 9 * k1_4 * k2_2 - 9 * k1_2 * k2_4 + k2_6 +
                16 * sqr(k1_2 - k2_2) * k3_2 - 15 * (k1_2 + k2_2) * k3_4 -
                2 * k3_6) +
        2 * k3_2 *
            (sqr(k1_2 - k2_2) * (k1_2 + k2_2) -
             4 * (7 * k1_4 - 17 * k1_2 * k2_2 + 7 * k2_4) * k3_2 +
             23 * (k1_2 + k2_2) * k3_4) *
            q_2 -
        (3 * sqr(k1_2 - k2_2) * (k1_2 + k2_2) -
         4 * (13 * k1_4 - 24 * k1_2 * k2_2 + 13 * k2_4) * k3_2 +
         47 * (k1_2 + k2_2) * k3_4 + 2 * k3_6) *
            q_4 +
        4 * (-3 * sqr(k1_2 - k2_2) + 2 * (k1_2 + k2_2) * k3_2 + k3_4) * q_6) *
       LFunc(k3, q)) /
      (59136.0 * k1_2 * k2_2 * k3_5 * q_5);

  kernel5 = (3 * k3_3 * pi * sqr(k1_2 - q_2) * sqr(-k2_2 + q_2) *
             WFunc(k1, k2, k3, q)) /
                (1078. * k1_2 * k2_2 * q_5 *
                 sqrt(k1_2 * k2_2 - (k1_2 + k2_2 - k3_2) * q_2 + q_4)) +
            (k2 * pi * sqr(k1 - q) * (k3 - q) * sqr(k1 + q) * (k3 + q) *
             (8 * k3_2 + 3 * q_2) * WFunc(k1, k3, k2, q)) /
                (7392.0 * k1_2 * q_5 *
                 sqrt(k1_2 * k3_2 - (k1_2 - k2_2 + k3_2) * q_2 + q_4));

  kernel6 = (k1 * pi * sqr(k2 - q) * (k3 - q) * sqr(k2 + q) * (k3 + q) *
             (8 * k3_2 + 3 * q_2) * WFunc(k2, k3, k1, q)) /
            (7392.0 * k2_2 * q_5 *
             sqrt(k1_2 * q_2 + (k2 - q) * (k3 - q) * (k2 + q) * (k3 + q)));

  return kernel1 + kernel2 + kernel3 + kernel4 + kernel5 + kernel6;
}

double kernel_Gamma2v_iso(double k1, double k2, double k3, double q) {
  double kernel, eps;
  double k1_2, k1_4, k1_6, k1_8, k1_10, k1_11, k1_12, k1_14;
  double k3_2, k3_3, k3_4, k3_6, k3_8;
  double q_2, q_4, q_5, q_6, q_8, q_10;

  eps = k2 / k1 - 1.0;

  k1_2 = sqr(k1);
  k1_4 = qua(k1);
  k1_6 = k1_2 * k1_4;
  k1_8 = k1_2 * k1_6;
  k1_10 = k1_2 * k1_8;
  k1_11 = k1 * k1_10;
  k1_12 = k1_10 * k1_2;
  k1_14 = k1_2 * k1_12;

  k3_2 = sqr(k3);
  k3_3 = cub(k3);
  k3_4 = qua(k3);
  k3_6 = k3_2 * k3_4;
  k3_8 = k3_2 * k3_6;

  q_2 = sqr(q);
  q_4 = qua(q);
  q_5 = q * q_4;
  q_6 = q * q_5;
  q_8 = q_2 * q_6;
  q_10 = q_2 * q_8;

  kernel =
      (pi *
       ((-60 * eps * (k1 - q) * q * (k1 + q) *
         (55 * k3_6 * q_6 - 56 * k1_10 * (k3_2 - 3 * q_2) -
          5 * k1_8 * (377 * k3_4 - 36 * k3_2 * q_2) +
          k1_6 * (-329 * k3_6 + 3066 * k3_4 * q_2 + 564 * k3_2 * q_4) -
          k1_4 * (647 * k3_6 * q_2 + 1617 * k3_4 * q_4 + 408 * k3_2 * q_6) +
          3 * k1_2 * (307 * k3_6 * q_4 - 4 * k3_4 * q_6))) /
            k1_10 +
        8 * q *
            ((8640 * eps * k3_4 * cub(-k1_2 + q_2)) /
                 (k1_2 * (k1_4 - 2 * k1_2 * q_2 + k3_2 * q_2 + q_4)) -
             (420 * eps * sqr(k1_2 - q_2) *
              (-8 * k3_4 + 5 * k3_2 * q_2 + 3 * q_4)) /
                 (k1_2 * k3_2 - k3_2 * q_2 + q_4) +
             (-420 * eps * k1_12 * k3_2 * (k1 - q) * (k3 - q) * (k1 + q) *
                  (k3 + q) * (8 * k3_2 + 3 * q_2) +
              (k1_2 * k3_2 - k3_2 * q_2 + q_4) *
                  (825 * (-1 + 5 * eps) * k3_8 * q_8 +
                   20 * (-1 + 4 * eps) * k1_2 * k3_6 * q_6 *
                       (622 * k3_2 - 9 * q_2) +
                   840 * (1 + eps) * k1_12 * k3_2 * (k3_2 - 3 * q_2) -
                   5 * (-1 + 3 * eps) * k1_4 * k3_4 * q_4 *
                       (6458 * k3_4 + 4791 * k3_2 * q_2 + 1224 * q_4) +
                   5 * k1_10 *
                       (3927 * k3_6 - 1492 * k3_4 * q_2 + 1260 * k3_2 * q_4 +
                        252 * q_6) -
                   (-1 + 2 * eps) * k1_6 * k3_2 *
                       (840 * k3_8 - 66925 * k3_6 * q_2 - 96793 * k3_4 * q_4 -
                        17715 * k3_2 * q_6 + 630 * q_8) -
                   (-1 + eps) * k1_8 *
                       (17535 * k3_8 - 81190 * k3_6 * q_2 - 5272 * k3_4 * q_4 -
                        9765 * k3_2 * q_6 + 2520 * q_8))) /
                 (k1_10 * k3_2 * (k1_2 * k3_2 - k3_2 * q_2 + q_4))) +
        (15 *
         (55 * (2 - 11 * eps) * k3_6 * q_10 -
          (-2 + 9 * eps) * k1_2 * k3_4 * q_8 * (811 * k3_2 - 12 * q_2) -
          56 * (2 + 3 * eps) * k1_14 * (k3_2 - 3 * q_2) -
          (-2 + 3 * eps) * k1_8 * k3_2 * q_2 *
              (11 * k3_4 - 9634 * k3_2 * q_2 - 1356 * q_4) -
          (2 + eps) * k1_12 * (1885 * k3_4 - 292 * k3_2 * q_2 + 336 * q_4) +
          (-2 + 7 * eps) * k1_4 * k3_2 * q_6 *
              (2434 * k3_4 + 1593 * k3_2 * q_2 + 408 * q_4) -
          2 * (-2 + 5 * eps) * k1_6 * k3_2 * q_4 *
              (943 * k3_4 + 3144 * k3_2 * q_2 + 690 * q_4) +
          (-2 + eps) * k1_10 *
              (329 * k3_6 - 6836 * k3_4 * q_2 - 148 * k3_2 * q_4 - 168 * q_6)) *
         log(sqr(k1 + q) / sqr(k1 - q))) /
            k1_11 -
        (210 * (k3 - q) * (k3 + q) * (8 * k3_2 + 3 * q_2) *
         (8 * (1 + eps) * k1_6 * k3_2 - 4 * k1_4 * (3 * k3_2 * q_2 + q_4) -
          (-1 + eps) * k1_2 *
              (15 * k3_6 - 46 * k3_4 * q_2 + 47 * k3_2 * q_4 - 8 * q_6) -
          (-1 + 2 * eps) * k3_2 * (k3_6 + k3_2 * q_4 - 2 * q_6)) *
         log(sqr(k3 + q) / sqr(k3 - q))) /
            (k1_4 * k3_3) +
        (840 * (-k1_2 + q_2) * (-8 * k3_4 + 5 * k3_2 * q_2 + 3 * q_4) *
         (2 * (1 + eps) * k1_4 * k3_2 + (-2 + eps) * q_4 * (-k3_2 + q_2) +
          k1_2 * q_2 * (-((4 + eps) * k3_2) + (2 + 3 * eps) * q_2)) *
         log((-(k3_2 * q_2) + q_4 + k1_2 * (k3_2 + q_2) +
              2 * k1 * q * sqrt(k1_2 * k3_2 - k3_2 * q_2 + q_4)) /
             (-(k3_2 * q_2) + q_4 + k1_2 * (k3_2 + q_2) -
              2 * k1 * q * sqrt(k1_2 * k3_2 - k3_2 * q_2 + q_4)))) /
            (k1 * pow(k1_2 * k3_2 - k3_2 * q_2 + q_4, 1.5)) +
        (17280 * k3_3 * cub(k1_2 - q_2) *
         ((1 + eps) * k1_6 - 3 * k1_4 * q_2 +
          (-1 + 2 * eps) * q_4 * (k3_2 + q_2) +
          k1_2 * q_2 * ((1 + 2 * eps) * k3_2 - 3 * (-1 + eps) * q_2)) *
         log(-((4 * k3_2 * q_2 + 2 * sqr(k1_2 - q_2) +
                4 * k3 * q * sqrt(k1_4 + (-2 * k1_2 + k3_2) * q_2 + q_4)) /
               (-4 * k3_2 * q_2 - 2 * sqr(k1_2 - q_2) +
                4 * k3 * q * sqrt(k1_4 + (-2 * k1_2 + k3_2) * q_2 + q_4))))) /
            (k1_4 * pow(k1_4 - 2 * k1_2 * q_2 + k3_2 * q_2 + q_4, 1.5)))) /
      (6209280.0 * q_5);

  return kernel;
}

double kernel_Gamma2v_highk(double k1, double k2, double k3, double q) {
  double kernel;
  double k1_2, k1_4, k1_6, k1_8, k1_12;
  double k2_2, k2_4, k2_6, k2_8, k2_12;
  double k3_2, k3_4, k3_6, k3_8, k3_10, k3_12, k3_14;
  double q_2, q_4;

  k1_2 = sqr(k1);
  k1_4 = qua(k1);
  k1_6 = k1_2 * k1_4;
  k1_8 = k1_2 * k1_6;
  k1_12 = k1_4 * k1_8;

  k2_2 = sqr(k2);
  k2_4 = qua(k2);
  k2_6 = k2_2 * k2_4;
  k2_8 = k2_2 * k2_6;
  k2_12 = k2_6 * k2_6;

  k3_2 = sqr(k3);
  k3_4 = qua(k3);
  k3_6 = k3_2 * k3_4;
  k3_8 = k3_2 * k3_6;
  k3_10 = k3_2 * k3_8;
  k3_12 = k3_2 * k3_10;
  k3_14 = k3_2 * k3_12;

  q_2 = sqr(q);
  q_4 = qua(q);

  kernel =
      (pi *
       (8085.0 * k1_4 * k2_4 * k3_6 *
            (3.0 * sqr(k1_2 - k2_2) + (k1_2 + k2_2) * k3_2 - 4 * k3_4) +
        7.0 * k1_2 * k2_2 * k3_2 *
            (112.0 * qua(k1_2 - k2_2) * (k1_2 + k2_2) +
             sqr(k1_2 - k2_2) *
                 (1094.0 * k1_4 - 2779.0 * k1_2 * k2_2 + 1094.0 * k2_4) * k3_2 -
             2.0 * (k1_2 + k2_2) *
                 (42.0 * k1_4 + 661.0 * k1_2 * k2_2 + 42.0 * k2_4) * k3_4 -
             (3274.0 * k1_4 + 6243.0 * k1_2 * k2_2 + 3274.0 * k2_4) * k3_6 +
             1864.0 * (k1_2 + k2_2) * k3_8 + 288.0 * k3_10) *
            q_2 +
        (-14.0 * qua(k1 - k2) * qua(k1 + k2) * (k1_2 + k2_2) *
             (48.0 * k1_4 + 11.0 * k1_2 * k2_2 + 48.0 * k2_4) +
         7.0 *
             (112.0 * k1_12 + 81.0 * k1_8 * k2_4 - 386.0 * k1_6 * k2_6 +
              81.0 * k1_4 * k2_8 + 112.0 * k2_12) *
             k3_2 -
         2.0 * (k1_2 + k2_2) *
             (2999.0 * k1_8 - 16730.0 * k1_6 * k2_2 + 27861.0 * k1_4 * k2_4 -
              16730.0 * k1_2 * k2_6 + 2999.0 * k2_8) *
             k3_4 +
         (2388.0 * k1_8 - 5012.0 * k1_6 * k2_2 - 9865.0 * k1_4 * k2_4 -
          5012.0 * k1_2 * k2_6 + 2388.0 * k2_8) *
             k3_6 +
         34.0 * (k1_2 + k2_2) *
             (353.0 * k1_4 - 149.0 * k1_2 * k2_2 + 353.0 * k2_4) * k3_8 -
         8792.0 * (k1_4 + k2_4) * k3_10 + 2016.0 * (k1_2 + k2_2) * k3_12 -
         1728.0 * k3_14) *
            q_4)) /
      (339570.0 * k1_6 * k2_6 * k3_4 * q_2);

  return kernel;
}

double kernel_Gamma2v_lowk(double k1, double k2, double k3, double q) {
  double kernel;
  double k1_2, k1_4, k1_6, k1_8;
  double k2_2, k2_4, k2_6;
  double k3_2, k3_4, k3_6;
  double q_2, q_4;

  k1_2 = sqr(k1);
  k1_4 = qua(k1);
  k1_6 = k1_2 * k1_4;
  k1_8 = k1_2 * k1_6;

  k2_2 = sqr(k2);
  k2_4 = qua(k2);
  k2_6 = k2_2 * k2_4;

  k3_2 = sqr(k3);
  k3_4 = qua(k3);
  k3_6 = k3_2 * k3_4;

  q_2 = sqr(q);
  q_4 = qua(q);

  kernel =
      (pi *
       (2426.0 * k1_8 -
        8.0 * k1_6 * (1555.0 * k2_2 + 7770.0 * k3_2 + 1503.0 * q_2) +
        k1_2 * (-12440.0 * k2_6 + 76656.0 * k2_4 * k3_2 +
                105102.0 * k2_2 * k3_4 + 34882.0 * k3_6 +
                9.0 * (1336.0 * k2_4 - 60504.0 * k2_2 * k3_2 - 19531.0 * k3_4) *
                    q_2) +
        (k2 - k3) * (k2 + k3) *
            (2426.0 * k2_6 - 59734.0 * k2_4 * k3_2 - 42841.0 * k2_2 * k3_4 -
             7959.0 * k3_6 +
             9.0 * (-1336.0 * k2_4 + 27412.0 * k2_2 * k3_2 + 7881.0 * k3_4) *
                 q_2) +
        3.0 * k1_4 *
            (6676.0 * k2_4 + 5631.0 * k3_4 + 86244.0 * k3_2 * q_2 +
             8.0 * k2_2 * (3194.0 * k3_2 + 501.0 * q_2)))) /
      (1018710.0 * k1_2 * k2_2 * q_4);

  return kernel;
}

double kernel_Gamma2v_elongate(double k1, double k2, double k3, double q) {
  double kernel, eps, k;
  double k3_2, k3_3, k3_4, k3_5, k3_6, k3_8, k3_10;
  double q_2, q_3, q_4, q_5, q_6, q_8;
  double k_2, k_4, k_6, k_7, k_8, k_9, k_10, k_12, k_14, k_16, k_17, k_18, k_19;
  double eps_2;

  if (k1 > k2) {
    k = k1;
    eps = k2 / k1;
  } else {
    k = k2;
    eps = k1 / k2;
  }

  k3_2 = sqr(k3);
  k3_3 = cub(k3);
  k3_4 = qua(k3);
  k3_5 = k3 * k3_4;
  k3_6 = k3 * k3_5;
  k3_8 = k3_2 * k3_6;
  k3_10 = k3_2 * k3_8;

  q_2 = sqr(q);
  q_3 = cub(q);
  q_4 = qua(q);
  q_5 = q * q_4;
  q_6 = q * q_5;
  q_8 = q_2 * q_6;

  k_2 = sqr(k);
  k_4 = qua(k);
  k_6 = k_2 * k_4;
  k_7 = k * k_6;
  k_8 = k * k_7;
  k_9 = k * k_8;
  k_10 = k * k_9;
  k_12 = k_2 * k_10;
  k_14 = k_2 * k_12;
  k_16 = k_2 * k_14;
  k_17 = k * k_16;
  k_18 = k * k_17;
  k_19 = k * k_18;

  eps_2 = sqr(eps);

  kernel =
      (pi *
       ((4 * k_16 * q *
         (42100 * k_6 + 86573 * k3_6 - 1473132 * k3_4 * q_2 -
          927150 * k3_2 * q_4 - 139020 * q_6 +
          3 * k_4 * (121079 * k3_2 - 512318 * q_2) +
          3 * k_2 * (116030 * k3_4 - 680530 * k3_2 * q_2 - 674877 * q_4))) /
            21.0 -
        (4 * k_10 * q *
         (450 * k_12 * k3_4 - 2475 * k3_8 * q_8 -
          15.0 * k_10 *
              (2033 * k3_6 + 234 * k3_4 * q_2 + 84 * k3_2 * q_4 + 63 * q_6) -
          2 * k_8 *
              (9390 * k3_8 - 252530 * k3_6 * q_2 + 80367 * k3_4 * q_4 -
               7560 * k3_2 * q_6 + 3780 * q_8) +
          k_6 * (-17535 * k3_10 + 81190 * k3_8 * q_2 + 3892 * k3_6 * q_4 +
                 43490 * k3_4 * q_6 - 2520 * k3_2 * q_8) +
          15 * k_4 *
              (3359 * k3_8 * q_4 + 1514 * k3_6 * q_6 - 157 * k3_4 * q_8) -
          15 * k_2 * (1009 * k3_8 * q_6 + 438 * k3_6 * q_8))) /
            k3_4 -
        15 * k_9 * sqr(k - q) * sqr(k + q) *
            (-194 * k_10 + 165 * k3_4 * q_6 + k_8 * (1176 * k3_2 + 2297 * q_2) +
             k_6 * (306 * k3_4 - 3414 * k3_2 * q_2 - 2428 * q_4) +
             k_4 * (-1307 * k3_4 * q_2 - 784 * k3_2 * q_4 + 157 * q_6) +
             6 * k_2 * (214 * k3_4 * q_4 + 73 * k3_2 * q_6)) *
            log(sqr(k + q) / sqr(k - q)) -
        (105 * k_16 * (k3 - q) * (k3 + q) * (8 * k3_2 + 3 * q_2) *
         (15 * k3_8 - 46 * k3_6 * q_2 + 47 * k3_4 * q_4 - 8 * k3_2 * q_6 +
          k_4 * (9 * k3_4 + 2 * k3_2 * q_2 - 3 * q_4) +
          8 * k_2 * (4 * k3_6 - 17 * k3_4 * q_2 + 12 * k3_2 * q_4 - 3 * q_6)) *
         log(sqr(k3 + q) / sqr(k3 - q))) /
            k3_5 +
        (420 * k_19 * q_3 * (-k3 + q) * (k3 + q) * (8 * k3_2 + 3 * q_2) *
         (-4 * k * sqrt(q_2 * (k_2 - k3_2 + q_2)) +
          q * (4 * k_2 - 3 * k3_2 + 3 * q_2) *
              log((2.0 * k_2 * q - k3_2 * q + q_3 +
                   2.0 * k * sqrt(q_2 * (k_2 - k3_2 + q_2))) /
                  (2.0 * k_2 * q - k3_2 * q + q_3 -
                   2.0 * k * sqrt(q_2 * (k_2 - k3_2 + q_2)))))) /
            pow(q_2 * (k_2 - k3_2 + q_2), 1.5) +
        (8640.0 * k_16 * k3_3 * q_3 * sqr(k_2 - q_2) *
         (4.0 * k3 * sqrt(q_2 * (-k_2 + k3_2 + q_2)) +
          q * (3 * k_2 - 4 * k3_2 - 3 * q_2) *
              log(-((-(k_2 * q) + 2 * k3_2 * q + q_3 +
                     2.0 * k3 * sqrt(q_2 * (-k_2 + k3_2 + q_2))) /
                    (k_2 * q - 2 * k3_2 * q - q_3 +
                     2.0 * k3 * sqrt(q_2 * (-k_2 + k3_2 + q_2))))))) /
            pow(q_2 * (-k_2 + k3_2 + q_2), 1.5) +
        ((4.0 * k_14 * q_3 *
          (72913.0 * k_6 + 130696.0 * k3_6 + 251538.0 * k3_4 * q_2 +
           21000.0 * k3_2 * q_4 - 7665.0 * q_6 +
           k_4 * (-37530 * k3_2 + 666260 * q_2) +
           k_2 * (-334079 * k3_4 + 196742 * k3_2 * q_2 + 282415 * q_4))) /
             7. +
         (4 * k_8 * q *
          (195 * k_14 * k3_4 - 825 * k3_10 * q_8 -
           5.0 * k_2 * k3_8 * q_6 * (2488 * k3_2 + 459 * q_2) +
           5 * k_4 * k3_6 * q_4 *
               (6458 * k3_4 + 1764 * k3_2 * q_2 + 405 * q_4) -
           45.0 * k_12 *
               (659 * k3_6 + 134 * k3_4 * q_2 + 28 * k3_2 * q_4 + 21.0 * q_6) +
           k_10 * (10245 * k3_8 + 245070 * k3_6 * q_2 - 93542.0 * k3_4 * q_4 +
                   8820.0 * k3_2 * q_6 - 3780 * q_8) +
           2.0 * k_6 * k3_4 *
               (840.0 * k3_8 - 66925.0 * k3_6 * q_2 - 46408.0 * k3_4 * q_4 -
                2055.0 * k3_2 * q_6 + 1725.0 * q_8) +
           k_8 * k3_2 *
               (17535.0 * k3_8 - 81190.0 * k3_6 * q_2 - 3892.0 * k3_4 * q_4 -
                43490.0 * k3_2 * q_6 + 2520.0 * q_8))) /
             k3_4 -
         15.0 * k_7 * sqr(k - q) * sqr(k + q) *
             (13.0 * k_12 - 55.0 * k3_6 * q_6 -
              k_10 * (1921.0 * k3_2 + 649.0 * q_2) +
              k_8 * (1579.0 * k3_4 + 2913.0 * k3_2 * q_2 + 563.0 * q_4) +
              k_6 * (329 * k3_6 - 1759 * k3_4 * q_2 + 25.0 * k3_2 * q_4 +
                     73.0 * q_6) +
              k_4 * (647.0 * k3_6 * q_2 + 333.0 * k3_4 * q_4 +
                     135.0 * k3_2 * q_6) -
              3 * k_2 * (307 * k3_6 * q_4 + 51 * k3_4 * q_6)) *
             log(sqr(k + q) / sqr(k - q)) +
         (105.0 * k_14 * (k3 - q) * (k3 + q) * (8 * k3_2 + 3 * q_2) *
          (k_6 * (k3_4 + 2 * k3_2 * q_2 - 3 * q_4) +
           4.0 * k_4 *
               (4.0 * k3_6 - 14.0 * k3_4 * q_2 + 13.0 * k3_2 * q_4 -
                3.0 * q_6) -
           2.0 * k3_4 * (k3_6 + k3_2 * q_4 - 2 * q_6) +
           k_2 * (-15 * k3_8 + 46 * k3_6 * q_2 - 47.0 * k3_4 * q_4 +
                  8 * k3_2 * q_6)) *
          log(sqr(k3 + q) / sqr(k3 - q))) /
             k3_5 -
         (840.0 * k_17 * q_4 * (-k3 + q) * (k3 + q) * (8.0 * k3_2 + 3 * q_2) *
          log((2 * k_2 * q - k3_2 * q + q_3 +
               2.0 * k * sqrt(q_2 * (k_2 - k3_2 + q_2))) /
              (2.0 * k_2 * q - k3_2 * q + q_3 -
               2.0 * k * sqrt(q_2 * (k_2 - k3_2 + q_2))))) /
             sqrt(q_2 * (k_2 - k3_2 + q_2)) +
         (17280.0 * k_14 * k3_3 * q_4 * sqr(k_2 - q_2) *
          log(-((-(k_2 * q) + 2 * k3_2 * q + q_3 +
                 2.0 * k3 * sqrt(q_2 * (-k_2 + k3_2 + q_2))) /
                (k_2 * q - 2 * k3_2 * q - q_3 +
                 2.0 * k3 * sqrt(q_2 * (-k_2 + k3_2 + q_2)))))) /
             sqrt(q_2 * (-k_2 + k3_2 + q_2))) /
            eps_2)) /
      (6209280.0 * k_18 * q_5);

  return kernel;
}

double kernel_Gamma2v_coll(double k1, double k2, double k3, double q) {
  double kernel, eps;
  double k1_2, k1_4, k1_6, k1_7, k1_8, k1_9, k1_10, k1_12, k1_14;
  double k2_2, k2_3, k2_4, k2_5, k2_6, k2_7, k2_8, k2_9, k2_10, k2_11, k2_12,
      k2_14;
  double q_2, q_3, q_4, q_5, q_6, q_8;
  double eps_2, eps_4;

  eps = k3 / k2;

  k1_2 = sqr(k1);
  k1_4 = qua(k1);
  k1_6 = k1_2 * k1_4;
  k1_7 = k1 * k1_6;
  k1_8 = k1 * k1_7;
  k1_9 = k1 * k1_8;
  k1_10 = k1 * k1_9;
  k1_12 = k1_2 * k1_10;
  k1_14 = k1_2 * k1_12;

  k2_2 = sqr(k2);
  k2_3 = cub(k2);
  k2_4 = qua(k2);
  k2_5 = k2 * k2_4;
  k2_6 = k2 * k2_5;
  k2_7 = k2 * k2_6;
  k2_8 = k2 * k2_7;
  k2_9 = k2 * k2_8;
  k2_10 = k2 * k2_9;
  k2_11 = k2 * k2_10;
  k2_12 = k2 * k2_11;
  k2_14 = k2_2 * k2_12;

  q_2 = sqr(q);
  q_3 = cub(q);
  q_4 = qua(q);
  q_5 = q * q_4;
  q_6 = q * q_5;
  q_8 = q_2 * q_6;

  eps_2 = sqr(eps);
  eps_4 = qua(eps);

  kernel =
      (pi *
       (-84.0 * k1_7 * k2_7 * q_3 *
            (161.0 * k1_6 + 161.0 * k2_6 + 1064.0 * k2_4 * q_2 -
             465.0 * k2_2 * q_4 + 60.0 * q_6 +
             k1_4 * (-281.0 * k2_2 + 1064.0 * q_2) -
             k1_2 * (281.0 * k2_4 + 1528.0 * k2_2 * q_2 + 465.0 * q_4)) +
        4.0 * k1 * k2 * q *
            (195.0 * k1_14 * k2_6 + 825.0 * k2_12 * q_8 -
             5.0 * k1_2 * k2_10 * q_6 * (1949.0 * k2_2 + 855.0 * q_2) +
             5.0 * k1_4 * k2_8 * q_4 *
                 (3895 * k2_4 + 8694 * k2_2 * q_2 + 471 * q_4) +
             k1_10 * k2_2 *
                 (510 * k2_8 + 3510 * k2_6 * q_2 - 93542 * k2_4 * q_4 +
                  43470 * k2_2 * q_6 - 4275 * q_8) -
             5 * k1_12 *
                 (90 * k2_8 + 1206 * k2_6 * q_2 - 3895 * k2_4 * q_4 +
                  1949 * k2_2 * q_6 - 165 * q_8) +
             k1_8 * k2_4 *
                 (-450 * k2_8 + 3510 * k2_6 * q_2 + 160734 * k2_4 * q_4 -
                  43490 * k2_2 * q_6 + 2355 * q_8) +
             k1_6 * k2_6 *
                 (195 * k2_8 - 6030 * k2_6 * q_2 - 93542.0 * k2_4 * q_4 -
                  43490 * k2_2 * q_6 + 3450 * q_8)) -
        15 * k2_7 * sqr(k1 - q) * sqr(k1 + q) *
            (13 * k1_12 + 55 * k2_6 * q_6 - k1_10 * (194 * k2_2 + 649 * q_2) +
             k1_8 * (17 * k2_4 + 2297 * k2_2 * q_2 + 563 * q_4) +
             k1_6 * (164 * k2_6 - 2155 * k2_4 * q_2 - 2428 * k2_2 * q_4 +
                     73 * q_6) +
             k1_4 * (339 * k2_6 * q_2 + 2423 * k2_4 * q_4 + 157 * k2_2 * q_6) -
             3 * k1_2 * (186 * k2_6 * q_4 + 95 * k2_4 * q_6)) *
            log(sqr(k1 + q) / sqr(k1 - q)) -
        15 * k1_7 * sqr(k2 - q) * sqr(k2 + q) *
            (k1_6 * (164 * k2_6 + 339 * k2_4 * q_2 - 558.0 * k2_2 * q_4 +
                     55 * q_6) +
             k2_6 * (13 * k2_6 - 649 * k2_4 * q_2 + 563.0 * k2_2 * q_4 +
                     73 * q_6) +
             k1_4 * (17 * k2_8 - 2155 * k2_6 * q_2 + 2423.0 * k2_4 * q_4 -
                     285 * k2_2 * q_6) +
             k1_2 * (-194 * k2_10 + 2297 * k2_8 * q_2 - 2428.0 * k2_6 * q_4 +
                     157 * k2_4 * q_6)) *
            log(sqr(k2 + q) / sqr(k2 - q)) -
        (2520.0 * k1_10 * k2_7 * sqr(k2 - q) * q_4 * sqr(k2 + q) *
         log((2 * k1_2 * q - k2_2 * q + q_3 +
              2 * k1 * sqrt(q_2 * (k1_2 - k2_2 + q_2))) /
             (2 * k1_2 * q - k2_2 * q + q_3 -
              2 * k1 * sqrt(q_2 * (k1_2 - k2_2 + q_2))))) /
            sqrt(q_2 * (k1_2 - k2_2 + q_2)) -
        (2520 * k1_7 * k2_10 * sqr(k1 - q) * q_4 * sqr(k1 + q) *
         log(-((-(k1_2 * q) + 2 * k2_2 * q + q_3 +
                2 * k2 * sqrt(q_2 * (-k1_2 + k2_2 + q_2))) /
               (k1_2 * q - 2 * k2_2 * q - q_3 +
                2 * k2 * sqrt(q_2 * (-k1_2 + k2_2 + q_2)))))) /
            sqrt(q_2 * (-k1_2 + k2_2 + q_2)))) /
          (6.20928e6 * k1_9 * k2_9 * q_5) +
      (eps_2 * pi *
       (8 * k1_7 * k2_9 * q *
            (92 * k1_6 + 92 * k2_6 + 29992 * k2_4 * q_2 + 9968 * k2_2 * q_4 -
             945 * q_6 + 4 * k1_4 * (607 * k2_2 + 7498 * q_2) +
             4 * k1_2 * (607 * k2_4 - 16284 * k2_2 * q_2 + 2492 * q_4)) -
        4 * k1 * k2_3 * q *
            (29655 * k1_12 * k2_6 + 2475 * k2_10 * q_8 -
             30 * k1_2 * k2_8 * q_6 * (235 * k2_2 + 219 * q_2) +
             15 * k1_4 * k2_6 * q_4 *
                 (92 * k2_4 + 1514 * k2_2 * q_2 - 135 * q_4) +
             k1_6 * k2_4 *
                 (29655 * k2_8 - 245070 * k2_6 * q_2 + 3892 * k2_4 * q_4 +
                  4110 * k2_2 * q_6 - 2025 * q_8) -
             15 * k1_10 *
                 (2033 * k2_8 + 16338 * k2_6 * q_2 - 92 * k2_4 * q_4 +
                  470 * k2_2 * q_6 - 165 * q_8) +
             k1_8 * (-30495 * k2_10 + 505060 * k2_8 * q_2 + 3892 * k2_6 * q_4 +
                     22710 * k2_4 * q_6 - 6570 * k2_2 * q_8)) -
        15 * k2_9 * sqr(k1 - q) * sqr(k1 + q) *
            (-1921 * k1_10 - 165 * k2_4 * q_6 +
             3 * k1_8 * (392 * k2_2 + 971 * q_2) +
             k1_6 * (801 * k2_4 - 3414 * k2_2 * q_2 + 25 * q_4) +
             k1_4 * (321 * k2_4 * q_2 - 784 * k2_2 * q_4 + 135 * q_6) +
             3 * k1_2 * (65 * k2_4 * q_4 + 146 * k2_2 * q_6)) *
            log(sqr(k1 + q) / sqr(k1 - q)) -
        15 * k1_7 * k2_2 * sqr(k2 - q) * sqr(k2 + q) *
            (-1921 * k2_10 + 2913 * k2_8 * q_2 + 25 * k2_6 * q_4 +
             135 * k2_4 * q_6 +
             3 * k1_4 *
                 (267 * k2_6 + 107 * k2_4 * q_2 + 65 * k2_2 * q_4 - 55 * q_6) +
             2 * k1_2 *
                 (588 * k2_8 - 1707 * k2_6 * q_2 - 392 * k2_4 * q_4 +
                  219 * k2_2 * q_6)) *
            log(sqr(k2 + q) / sqr(k2 - q)) -
        (420 * k1_10 * k2_9 * sqr(k2 - q) * q_3 * sqr(k2 + q) *
         (12 * k1 * sqrt(q_2 * (k1_2 - k2_2 + q_2)) +
          q * (10 * k1_2 + 13 * (-k2_2 + q_2)) *
              log((2 * k1_2 * q - k2_2 * q + q_3 +
                   2 * k1 * sqrt(q_2 * (k1_2 - k2_2 + q_2))) /
                  (2 * k1_2 * q - k2_2 * q + q_3 -
                   2 * k1 * sqrt(q_2 * (k1_2 - k2_2 + q_2)))))) /
            pow(q_2 * (k1_2 - k2_2 + q_2), 1.5) -
        (420 * k1_7 * k2_12 * sqr(k1 - q) * q_3 * sqr(k1 + q) *
         (12 * k2 * sqrt(q_2 * (-k1_2 + k2_2 + q_2)) +
          (-13 * k1_2 * q + 10 * k2_2 * q + 13 * q_3) *
              log(-((-(k1_2 * q) + 2 * k2_2 * q + q_3 +
                     2 * k2 * sqrt(q_2 * (-k1_2 + k2_2 + q_2))) /
                    (k1_2 * q - 2 * k2_2 * q - q_3 +
                     2 * k2 * sqrt(q_2 * (-k1_2 + k2_2 + q_2))))))) /
            pow(q_2 * (-k1_2 + k2_2 + q_2), 1.5))) /
          (6209280.0 * k1_9 * k2_9 * q_5) +
      (eps_4 * pi *
       (69120 * k1_7 * k2_11 * q * (k1_2 - q_2) * (k2_2 - q_2) +
        (4 * k1_7 * k2_11 *
         (688 * k1_6 + 688 * k2_6 - 37728.0 * k2_4 * q_2 - 51509 * k2_2 * q_4 +
          3668.0 * q_6 - 32 * k1_4 * (172 * k2_2 + 1179 * q_2) +
          k1_2 * (-5504.0 * k2_4 + 90944 * k2_2 * q_2 - 51509 * q_4))) /
            q +
        4.0 * k1 * k2_5 * q *
            (10245 * k1_10 * k2_6 + 2475 * k2_8 * q_8 +
             k1_4 * (-50385.0 * k2_8 * q_4 + 8820 * k2_6 * q_6) +
             k1_6 * k2_2 *
                 (10245 * k2_8 - 81190 * k2_6 * q_2 - 92816.0 * k2_4 * q_4 +
                  8820 * k2_2 * q_6 - 2295 * q_8) +
             5 * k1_8 *
                 (3756 * k2_8 - 16238 * k2_6 * q_2 - 10077 * k2_4 * q_4 +
                  3027 * k2_2 * q_6 + 495 * q_8) +
             15 * k1_2 * (1009 * k2_8 * q_6 - 153 * k2_6 * q_8)) -
        15 * k2_11 * sqr(k1 - q) * sqr(k1 + q) *
            (1579 * k1_8 + 165 * k2_2 * q_6 + k1_6 * (306 * k2_2 - 1759 * q_2) +
             k1_4 * (-1307 * k2_2 * q_2 + 333 * q_4) +
             3 * k1_2 * (428 * k2_2 * q_4 - 51 * q_6)) *
            log(sqr(k1 + q) / sqr(k1 - q)) -
        15 * k1_7 * k2_4 * sqr(k2 - q) * sqr(k2 + q) *
            (1579 * k2_8 - 1759 * k2_6 * q_2 + 333 * k2_4 * q_4 -
             153 * k2_2 * q_6 +
             k1_2 * (306 * k2_6 - 1307 * k2_4 * q_2 + 1284 * k2_2 * q_4 +
                     165 * q_6)) *
            log(sqr(k2 + q) / sqr(k2 - q)) +
        (105 * k1_10 * k2_11 * sqr(cub(k2 - q)) * q * sqr(cub(k2 + q)) *
         sqrt(q_2 * (k1_2 - k2_2 + q_2)) *
         (-4 * k1 * sqrt(q_2 * (k1_2 - k2_2 + q_2)) *
              (26 * k1_2 + 35 * (-k2_2 + q_2)) +
          q * (64 * k1_4 - 108 * k1_2 * (k2_2 - q_2) + 35 * sqr(k2_2 - q_2)) *
              log((2 * k1_2 * q - k2_2 * q + q_3 +
                   2 * k1 * sqrt(q_2 * (k1_2 - k2_2 + q_2))) /
                  (2 * k1_2 * q - k2_2 * q + q_3 -
                   2 * k1 * sqrt(q_2 * (k1_2 - k2_2 + q_2)))))) /
            (cub(k1_2 - k2_2 + q_2) * qua(-(k2_2 * q) + q_3)) +
        (105 * k1_7 * k2_14 * sqr(cub(k1 - q)) * q * sqr(cub(k1 + q)) *
         sqrt(q_2 * (-k1_2 + k2_2 + q_2)) *
         (-4 * k2 * sqrt(q_2 * (-k1_2 + k2_2 + q_2)) *
              (-35 * k1_2 + 26 * k2_2 + 35 * q_2) +
          q * (35 * k1_4 + 64 * k2_4 + 108 * k2_2 * q_2 + 35 * q_4 - 2 * k1_2 * (54 * k2_2 + 35 * q_2)) *
              log(-((-(k1_2 * q) + 2 * k2_2 * q + q_3 +
                     2 * k2 * sqrt(q_2 * (-k1_2 + k2_2 + q_2))) /
                    (k1_2 * q - 2 * k2_2 * q - q_3 +
                     2 * k2 * sqrt(q_2 * (-k1_2 + k2_2 + q_2))))))) /
            (cub(-k1_2 + k2_2 + q_2) * qua(-(k1_2 * q) + q_3)))) /
          (6209280.0 * k1_9 * k2_9 * q_5);

  return kernel;
}

double kernel_Gamma2v_reg3rd(double k1, double k2, double k3, double q) {
  double kernel, kernel_poly_sum, kernel_beta_sum;
  double kernel_poly[17], kernel_beta[5];
  double k1_2, k1_3, k1_4, k1_5, k1_6, k1_7, k1_8, k1_9, k1_10, k1_11, k1_12,
      k1_13;
  double k2_2, k2_3, k2_4, k2_5, k2_6, k2_7, k2_8, k2_9, k2_10, k2_11, k2_12,
      k2_13;
  double k3_2, k3_3, k3_4, k3_5, k3_6, k3_7, k3_8, k3_9, k3_10, k3_11, k3_12;
  double q_2, q_3, q_4, q_5, q_6, q_7, q_8, q_9, q_10, q_11, q_12, q_13, q_14,
      q_15, q_16, q_17, q_18;

  k1_2 = sqr(k1);
  k1_3 = cub(k1);
  k1_4 = qua(k1);
  k1_5 = k1 * k1_4;
  k1_6 = k1 * k1_5;
  k1_7 = k1 * k1_6;
  k1_8 = k1 * k1_7;
  k1_9 = k1 * k1_8;
  k1_10 = k1 * k1_9;
  k1_11 = k1 * k1_10;
  k1_12 = k1 * k1_11;
  k1_13 = k1 * k1_12;

  k2_2 = sqr(k2);
  k2_3 = cub(k2);
  k2_4 = qua(k2);
  k2_5 = k2 * k2_4;
  k2_6 = k2 * k2_5;
  k2_7 = k2 * k2_6;
  k2_8 = k2 * k2_7;
  k2_9 = k2 * k2_8;
  k2_10 = k2 * k2_9;
  k2_11 = k2 * k2_10;
  k2_12 = k2 * k2_11;
  k2_13 = k2 * k2_12;

  k3_2 = sqr(k3);
  k3_3 = cub(k3);
  k3_4 = qua(k3);
  k3_5 = k3 * k3_4;
  k3_6 = k3 * k3_5;
  k3_7 = k3 * k3_6;
  k3_8 = k3 * k3_7;
  k3_9 = k3 * k3_8;
  k3_10 = k3 * k3_9;
  k3_11 = k3 * k3_10;
  k3_12 = k3 * k3_11;

  q_2 = sqr(q);
  q_3 = cub(q);
  q_4 = qua(q);
  q_5 = q * q_4;
  q_6 = q * q_5;
  q_7 = q * q_6;
  q_8 = q * q_7;
  q_9 = q * q_8;
  q_10 = q * q_9;
  q_11 = q * q_10;
  q_12 = q * q_11;
  q_13 = q * q_12;
  q_14 = q * q_13;
  q_15 = q * q_14;
  q_16 = q * q_15;
  q_17 = q * q_16;
  q_18 = q * q_17;

  kernel_poly[0] = (-840 * k1_11 * k2_9 * k3_8 - 840 * k1_9 * k2_11 * k3_8 -
                    2160 * k1_9 * k2_9 * k3_10) *
                       pi -
                   (4200 * k1_11 * k2_9 * k3_7 + 4200 * k1_9 * k2_11 * k3_7 +
                    3360 * k1_11 * k2_8 * k3_8 + 3360 * k1_10 * k2_9 * k3_8 +
                    3360 * k1_9 * k2_10 * k3_8 + 3360 * k1_8 * k2_11 * k3_8 +
                    10800 * k1_9 * k2_9 * k3_9 + 8640 * k1_9 * k2_8 * k3_10 +
                    8640 * k1_8 * k2_9 * k3_10) *
                       pi * q -
                   (-560 * k1_13 * k2_7 * k3_6 + 8715 * k1_11 * k2_9 * k3_6 +
                    8715 * k1_9 * k2_11 * k3_6 - 560 * k1_7 * k2_13 * k3_6 +
                    16800 * k1_11 * k2_8 * k3_7 + 16800 * k1_10 * k2_9 * k3_7 +
                    16800 * k1_9 * k2_10 * k3_7 + 16800 * k1_8 * k2_11 * k3_7 -
                    9660 * k1_11 * k2_7 * k3_8 + 13440 * k1_10 * k2_8 * k3_8 +
                    59400 * k1_9 * k2_9 * k3_8 + 13440 * k1_8 * k2_10 * k3_8 -
                    9660 * k1_7 * k2_11 * k3_8 + 43200 * k1_9 * k2_8 * k3_9 +
                    43200 * k1_8 * k2_9 * k3_9 + 6180 * k1_9 * k2_7 * k3_10 +
                    34560 * k1_8 * k2_8 * k3_10 + 6180 * k1_7 * k2_9 * k3_10 +
                    17040 * k1_7 * k2_7 * k3_12) *
                       pi * q_2;

  kernel_poly[1] = -(-1120 * k1_13 * k2_7 * k3_5 - 5145 * k1_11 * k2_9 * k3_5 -
                     5145 * k1_9 * k2_11 * k3_5 - 1120 * k1_7 * k2_13 * k3_5 -
                     7160 * k1_13 * k2_6 * k3_6 - 2630 * k1_12 * k2_7 * k3_6 +
                     34350 * k1_11 * k2_8 * k3_6 + 40680 * k1_10 * k2_9 * k3_6 +
                     40680 * k1_9 * k2_10 * k3_6 + 34350 * k1_8 * k2_11 * k3_6 -
                     2630 * k1_7 * k2_12 * k3_6 - 7160 * k1_6 * k2_13 * k3_6 -
                     21420 * k1_11 * k2_7 * k3_7 + 67200 * k1_10 * k2_8 * k3_7 +
                     156840 * k1_9 * k2_9 * k3_7 + 67200 * k1_8 * k2_10 * k3_7 -
                     21420 * k1_7 * k2_11 * k3_7 - 79470 * k1_11 * k2_6 * k3_8 +
                     18990 * k1_10 * k2_7 * k3_8 + 185520 * k1_9 * k2_8 * k3_8 +
                     185520 * k1_8 * k2_9 * k3_8 + 18990 * k1_7 * k2_10 * k3_8 -
                     79470 * k1_6 * k2_11 * k3_8 + 5700 * k1_9 * k2_7 * k3_9 +
                     172800 * k1_8 * k2_8 * k3_9 + 5700 * k1_7 * k2_9 * k3_9 -
                     27660 * k1_9 * k2_6 * k3_10 - 22650 * k1_8 * k2_7 * k3_10 -
                     22650 * k1_7 * k2_8 * k3_10 - 27660 * k1_6 * k2_9 * k3_10 +
                     81840 * k1_7 * k2_7 * k3_11 + 58290 * k1_7 * k2_6 * k3_12 +
                     58290 * k1_6 * k2_7 * k3_12) *
                   pi * q_3;

  kernel_poly[2] =
      -(-4690 * k1_13 * k2_7 * k3_4 + 3430 * k1_11 * k2_9 * k3_4 +
        3430 * k1_9 * k2_11 * k3_4 - 4690 * k1_7 * k2_13 * k3_4 -
        29080 * k1_13 * k2_6 * k3_5 - 6430 * k1_12 * k2_7 * k3_5 -
        23130 * k1_11 * k2_8 * k3_5 + 8520 * k1_10 * k2_9 * k3_5 +
        8520 * k1_9 * k2_10 * k3_5 - 23130 * k1_8 * k2_11 * k3_5 -
        6430 * k1_7 * k2_12 * k3_5 - 29080 * k1_6 * k2_13 * k3_5 -
        3800 * k1_13 * k2_5 * k3_6 - 30200 * k1_12 * k2_6 * k3_6 -
        72421 * k1_11 * k2_7 * k3_6 + 160680 * k1_10 * k2_8 * k3_6 +
        341532 * k1_9 * k2_9 * k3_6 + 160680 * k1_8 * k2_10 * k3_6 -
        72421 * k1_7 * k2_11 * k3_6 - 30200 * k1_6 * k2_12 * k3_6 -
        3800 * k1_5 * k2_13 * k3_6 - 289830 * k1_11 * k2_6 * k3_7 +
        202470 * k1_10 * k2_7 * k3_7 + 366960 * k1_9 * k2_8 * k3_7 +
        366960 * k1_8 * k2_9 * k3_7 + 202470 * k1_7 * k2_10 * k3_7 -
        289830 * k1_6 * k2_11 * k3_7 - 67800 * k1_11 * k2_5 * k3_8 -
        87360 * k1_10 * k2_6 * k3_8 + 153704 * k1_9 * k2_7 * k3_8 +
        533760 * k1_8 * k2_8 * k3_8 + 153704 * k1_7 * k2_9 * k3_8 -
        87360 * k1_6 * k2_10 * k3_8 - 67800 * k1_5 * k2_11 * k3_8 -
        239100 * k1_9 * k2_6 * k3_9 - 214050 * k1_8 * k2_7 * k3_9 -
        214050 * k1_7 * k2_8 * k3_9 - 239100 * k1_6 * k2_9 * k3_9 -
        18080 * k1_9 * k2_5 * k3_10 - 300120 * k1_8 * k2_6 * k3_10 +
        269052 * k1_7 * k2_7 * k3_10 - 300120 * k1_6 * k2_8 * k3_10 -
        18080 * k1_5 * k2_9 * k3_10 + 278010 * k1_7 * k2_6 * k3_11 +
        278010 * k1_6 * k2_7 * k3_11 + 102680 * k1_7 * k2_5 * k3_12 +
        193680 * k1_6 * k2_6 * k3_12 + 102680 * k1_5 * k2_7 * k3_12) *
      pi * q_4;

  kernel_poly[3] =
      -(700 * k1_13 * k2_7 * k3_3 - 4480 * k1_11 * k2_9 * k3_3 -
        4480 * k1_9 * k2_11 * k3_3 + 700 * k1_7 * k2_13 * k3_3 -
        67960 * k1_13 * k2_6 * k3_4 - 22660 * k1_12 * k2_7 * k3_4 +
        8620 * k1_11 * k2_8 * k3_4 + 71920 * k1_10 * k2_9 * k3_4 +
        71920 * k1_9 * k2_10 * k3_4 + 8620 * k1_8 * k2_11 * k3_4 -
        22660 * k1_7 * k2_12 * k3_4 - 67960 * k1_6 * k2_13 * k3_4 -
        8920 * k1_13 * k2_5 * k3_5 - 124120 * k1_12 * k2_6 * k3_5 -
        176185 * k1_11 * k2_7 * k3_5 + 23880 * k1_10 * k2_8 * k3_5 +
        242380 * k1_9 * k2_9 * k3_5 + 23880 * k1_8 * k2_10 * k3_5 -
        176185 * k1_7 * k2_11 * k3_5 - 124120 * k1_6 * k2_12 * k3_5 -
        8920 * k1_5 * k2_13 * k3_5 - 27290 * k1_13 * k2_4 * k3_6 -
        17540 * k1_12 * k2_5 * k3_6 - 670514 * k1_11 * k2_6 * k3_6 +
        351166 * k1_10 * k2_7 * k3_6 + 782578 * k1_9 * k2_8 * k3_6 +
        782578 * k1_8 * k2_9 * k3_6 + 351166 * k1_7 * k2_10 * k3_6 -
        670514 * k1_6 * k2_11 * k3_6 - 17540 * k1_5 * k2_12 * k3_6 -
        27290 * k1_4 * k2_13 * k3_6 - 177720 * k1_11 * k2_5 * k3_7 -
        6720 * k1_10 * k2_6 * k3_7 + 461470 * k1_9 * k2_7 * k3_7 +
        426240 * k1_8 * k2_8 * k3_7 + 461470 * k1_7 * k2_9 * k3_7 -
        6720 * k1_6 * k2_10 * k3_7 - 177720 * k1_5 * k2_11 * k3_7 -
        54270 * k1_11 * k2_4 * k3_8 + 74580 * k1_10 * k2_5 * k3_8 -
        703384 * k1_9 * k2_6 * k3_8 + 188926 * k1_8 * k2_7 * k3_8 +
        188926 * k1_7 * k2_8 * k3_8 - 703384 * k1_6 * k2_9 * k3_8 +
        74580 * k1_5 * k2_10 * k3_8 - 54270 * k1_4 * k2_11 * k3_8 -
        241600 * k1_9 * k2_5 * k3_9 - 1903800 * k1_8 * k2_6 * k3_9 +
        364480 * k1_7 * k2_7 * k3_9 - 1903800 * k1_6 * k2_8 * k3_9 -
        241600 * k1_5 * k2_9 * k3_9 + 69370 * k1_9 * k2_4 * k3_10 -
        356540 * k1_8 * k2_5 * k3_10 + 725278 * k1_7 * k2_6 * k3_10 +
        725278 * k1_6 * k2_7 * k3_10 - 356540 * k1_5 * k2_8 * k3_10 +
        69370 * k1_4 * k2_9 * k3_10 + 493240 * k1_7 * k2_5 * k3_11 +
        914640 * k1_6 * k2_6 * k3_11 + 493240 * k1_5 * k2_7 * k3_11 +
        24190 * k1_7 * k2_4 * k3_12 + 351500 * k1_6 * k2_5 * k3_12 +
        351500 * k1_5 * k2_6 * k3_12 + 24190 * k1_4 * k2_7 * k3_12) *
      pi * q_5;

  kernel_poly[4] =
      -(3360 * k1_13 * k2_7 * k3_2 - 4935 * k1_11 * k2_9 * k3_2 -
        4935 * k1_9 * k2_11 * k3_2 + 3360 * k1_7 * k2_13 * k3_2 -
        46400 * k1_13 * k2_6 * k3_3 - 1100 * k1_12 * k2_7 * k3_3 -
        23020 * k1_11 * k2_8 * k3_3 + 40280 * k1_10 * k2_9 * k3_3 +
        40280 * k1_9 * k2_10 * k3_3 - 23020 * k1_8 * k2_11 * k3_3 -
        1100 * k1_7 * k2_12 * k3_3 - 46400 * k1_6 * k2_13 * k3_3 -
        32540 * k1_13 * k2_5 * k3_4 - 287440 * k1_12 * k2_6 * k3_4 +
        96610 * k1_11 * k2_7 * k3_4 + 267280 * k1_10 * k2_8 * k3_4 -
        164120 * k1_9 * k2_9 * k3_4 + 267280 * k1_8 * k2_10 * k3_4 +
        96610 * k1_7 * k2_11 * k3_4 - 287440 * k1_6 * k2_12 * k3_4 -
        32540 * k1_5 * k2_13 * k3_4 - 129730 * k1_13 * k2_4 * k3_5 -
        47380 * k1_12 * k2_5 * k3_5 - 673290 * k1_11 * k2_6 * k3_5 +
        160710 * k1_10 * k2_7 * k3_5 + 437370 * k1_9 * k2_8 * k3_5 +
        437370 * k1_8 * k2_9 * k3_5 + 160710 * k1_7 * k2_10 * k3_5 -
        673290 * k1_6 * k2_11 * k3_5 - 47380 * k1_5 * k2_12 * k3_5 -
        129730 * k1_4 * k2_13 * k3_5 - 15440 * k1_13 * k2_3 * k3_6 -
        110720 * k1_12 * k2_4 * k3_6 - 616471 * k1_11 * k2_5 * k3_6 -
        136656 * k1_10 * k2_6 * k3_6 + 958591 * k1_9 * k2_7 * k3_6 +
        816512 * k1_8 * k2_8 * k3_6 + 958591 * k1_7 * k2_9 * k3_6 -
        136656 * k1_6 * k2_10 * k3_6 - 616471 * k1_5 * k2_11 * k3_6 -
        110720 * k1_4 * k2_12 * k3_6 - 15440 * k1_3 * k2_13 * k3_6 -
        163830 * k1_11 * k2_4 * k3_7 + 1018020 * k1_10 * k2_5 * k3_7 -
        1574720 * k1_9 * k2_6 * k3_7 + 1073630 * k1_8 * k2_7 * k3_7 +
        1073630 * k1_7 * k2_8 * k3_7 - 1574720 * k1_6 * k2_9 * k3_7 +
        1018020 * k1_5 * k2_10 * k3_7 - 163830 * k1_4 * k2_11 * k3_7 -
        7260 * k1_11 * k2_3 * k3_8 + 13440 * k1_10 * k2_4 * k3_8 -
        913416 * k1_9 * k2_5 * k3_8 - 2994896 * k1_8 * k2_6 * k3_8 +
        2553328 * k1_7 * k2_7 * k3_8 - 2994896 * k1_6 * k2_8 * k3_8 -
        913416 * k1_5 * k2_9 * k3_8 + 13440 * k1_4 * k2_10 * k3_8 -
        7260 * k1_3 * k2_11 * k3_8 + 246050 * k1_9 * k2_4 * k3_9 -
        2387500 * k1_8 * k2_5 * k3_9 + 602070 * k1_7 * k2_6 * k3_9 +
        602070 * k1_6 * k2_7 * k3_9 - 2387500 * k1_5 * k2_8 * k3_9 +
        246050 * k1_4 * k2_9 * k3_9 + 33220 * k1_9 * k2_3 * k3_10 +
        88000 * k1_8 * k2_4 * k3_10 + 1249692 * k1_7 * k2_5 * k3_10 +
        2728592 * k1_6 * k2_6 * k3_10 + 1249692 * k1_5 * k2_7 * k3_10 +
        88000 * k1_4 * k2_8 * k3_10 + 33220 * k1_3 * k2_9 * k3_10 +
        107510 * k1_7 * k2_4 * k3_11 + 1676860 * k1_6 * k2_5 * k3_11 +
        1676860 * k1_5 * k2_6 * k3_11 + 107510 * k1_4 * k2_7 * k3_11 -
        7520 * k1_7 * k2_3 * k3_12 + 57280 * k1_6 * k2_4 * k3_12 +
        618720 * k1_5 * k2_5 * k3_12 + 57280 * k1_4 * k2_6 * k3_12 -
        7520 * k1_3 * k2_7 * k3_12) *
      pi * q_6;

  kernel_poly[5] =
      -(420 * k1_13 * k2_7 * k3 - 735 * k1_11 * k2_9 * k3 -
        735 * k1_9 * k2_11 * k3 + 420 * k1_7 * k2_13 * k3 -
        11160 * k1_13 * k2_6 * k3_2 + 11490 * k1_12 * k2_7 * k3_2 -
        22290 * k1_11 * k2_8 * k3_2 + 9360 * k1_10 * k2_9 * k3_2 +
        9360 * k1_9 * k2_10 * k3_2 - 22290 * k1_8 * k2_11 * k3_2 +
        11490 * k1_7 * k2_12 * k3_2 - 11160 * k1_6 * k2_13 * k3_2 -
        200 * k1_13 * k2_5 * k3_3 - 201200 * k1_12 * k2_6 * k3_3 +
        239970 * k1_11 * k2_7 * k3_3 + 140720 * k1_10 * k2_8 * k3_3 -
        558640 * k1_9 * k2_9 * k3_3 + 140720 * k1_8 * k2_10 * k3_3 +
        239970 * k1_7 * k2_11 * k3_3 - 201200 * k1_6 * k2_12 * k3_3 -
        200 * k1_5 * k2_13 * k3_3 - 269260 * k1_13 * k2_4 * k3_4 -
        153560 * k1_12 * k2_5 * k3_4 + 535390 * k1_11 * k2_6 * k3_4 +
        1301890 * k1_10 * k2_7 * k3_4 - 1465980 * k1_9 * k2_8 * k3_4 -
        1465980 * k1_8 * k2_9 * k3_4 + 1301890 * k1_7 * k2_10 * k3_4 +
        535390 * k1_6 * k2_11 * k3_4 - 153560 * k1_5 * k2_12 * k3_4 -
        269260 * k1_4 * k2_13 * k3_4 - 75520 * k1_13 * k2_3 * k3_5 -
        526720 * k1_12 * k2_4 * k3_5 - 1044035 * k1_11 * k2_5 * k3_5 +
        678640 * k1_10 * k2_6 * k3_5 + 996055 * k1_9 * k2_7 * k3_5 -
        277120 * k1_8 * k2_8 * k3_5 + 996055 * k1_7 * k2_9 * k3_5 +
        678640 * k1_6 * k2_10 * k3_5 - 1044035 * k1_5 * k2_11 * k3_5 -
        526720 * k1_4 * k2_12 * k3_5 - 75520 * k1_3 * k2_13 * k3_5 +
        17620 * k1_13 * k2_2 * k3_6 - 62150 * k1_12 * k2_3 * k3_6 -
        775494 * k1_11 * k2_4 * k3_6 + 1184316 * k1_10 * k2_5 * k3_6 -
        3218856 * k1_9 * k2_6 * k3_6 + 3247494 * k1_8 * k2_7 * k3_6 +
        3247494 * k1_7 * k2_8 * k3_6 - 3218856 * k1_6 * k2_9 * k3_6 +
        1184316 * k1_5 * k2_10 * k3_6 - 775494 * k1_4 * k2_11 * k3_6 -
        62150 * k1_3 * k2_12 * k3_6 + 17620 * k1_2 * k2_13 * k3_6 -
        9420 * k1_11 * k2_3 * k3_7 + 497280 * k1_10 * k2_4 * k3_7 -
        2321380 * k1_9 * k2_5 * k3_7 - 1776880 * k1_8 * k2_6 * k3_7 +
        7714120 * k1_7 * k2_7 * k3_7 - 1776880 * k1_6 * k2_8 * k3_7 -
        2321380 * k1_5 * k2_9 * k3_7 + 497280 * k1_4 * k2_10 * k3_7 -
        9420 * k1_3 * k2_11 * k3_7 - 8490 * k1_11 * k2_2 * k3_8 +
        28590 * k1_10 * k2_3 * k3_8 + 160976 * k1_9 * k2_4 * k3_8 -
        4777404 * k1_8 * k2_5 * k3_8 + 3553162 * k1_7 * k2_6 * k3_8 +
        3553162 * k1_6 * k2_7 * k3_8 - 4777404 * k1_5 * k2_8 * k3_8 +
        160976 * k1_4 * k2_9 * k3_8 + 28590 * k1_3 * k2_10 * k3_8 -
        8490 * k1_2 * k2_11 * k3_8 + 140900 * k1_9 * k2_3 * k3_9 +
        36800 * k1_8 * k2_4 * k3_9 + 1228180 * k1_7 * k2_5 * k3_9 +
        5140880 * k1_6 * k2_6 * k3_9 + 1228180 * k1_5 * k2_7 * k3_9 +
        36800 * k1_4 * k2_8 * k3_9 + 140900 * k1_3 * k2_9 * k3_9 -
        35880 * k1_9 * k2_2 * k3_10 + 85510 * k1_8 * k2_3 * k3_10 +
        854338 * k1_7 * k2_4 * k3_10 + 4317688 * k1_6 * k2_5 * k3_10 +
        4317688 * k1_5 * k2_6 * k3_10 + 854338 * k1_4 * k2_7 * k3_10 +
        85510 * k1_3 * k2_8 * k3_10 - 35880 * k1_2 * k2_9 * k3_10 -
        40960 * k1_7 * k2_3 * k3_11 + 232640 * k1_6 * k2_4 * k3_11 +
        2972640 * k1_5 * k2_5 * k3_11 + 232640 * k1_4 * k2_6 * k3_11 -
        40960 * k1_3 * k2_7 * k3_11 + 26750 * k1_7 * k2_2 * k3_12 -
        39950 * k1_6 * k2_3 * k3_12 + 146900 * k1_5 * k2_4 * k3_12 +
        146900 * k1_4 * k2_5 * k3_12 - 39950 * k1_3 * k2_6 * k3_12 +
        26750 * k1_2 * k2_7 * k3_12) *
      pi * q_7;

  kernel_poly[6] =
      -(1890 * k1_13 * k2_7 - 1890 * k1_11 * k2_9 - 1890 * k1_9 * k2_11 +
        1890 * k1_7 * k2_13 - 3240 * k1_13 * k2_6 * k3 +
        1290 * k1_12 * k2_7 * k3 - 3450 * k1_11 * k2_8 * k3 +
        2880 * k1_10 * k2_9 * k3 + 2880 * k1_9 * k2_10 * k3 -
        3450 * k1_8 * k2_11 * k3 + 1290 * k1_7 * k2_12 * k3 -
        3240 * k1_6 * k2_13 * k3 + 17960 * k1_13 * k2_5 * k3_2 -
        52440 * k1_12 * k2_6 * k3_2 + 123415 * k1_11 * k2_7 * k3_2 +
        27240 * k1_10 * k2_8 * k3_2 - 320340 * k1_9 * k2_9 * k3_2 +
        27240 * k1_8 * k2_10 * k3_2 + 123415 * k1_7 * k2_11 * k3_2 -
        52440 * k1_6 * k2_12 * k3_2 + 17960 * k1_5 * k2_13 * k3_2 -
        247700 * k1_13 * k2_4 * k3_3 - 24200 * k1_12 * k2_5 * k3_3 +
        1363150 * k1_11 * k2_6 * k3_3 + 1537010 * k1_10 * k2_7 * k3_3 -
        2744740 * k1_9 * k2_8 * k3_3 - 2744740 * k1_8 * k2_9 * k3_3 +
        1537010 * k1_7 * k2_10 * k3_3 + 1363150 * k1_6 * k2_11 * k3_3 -
        24200 * k1_5 * k2_12 * k3_3 - 247700 * k1_4 * k2_13 * k3_3 -
        153490 * k1_13 * k2_3 * k3_4 - 1092640 * k1_12 * k2_4 * k3_4 -
        167790 * k1_11 * k2_5 * k3_4 + 5623360 * k1_10 * k2_6 * k3_4 +
        210170 * k1_9 * k2_7 * k3_4 - 8897920 * k1_8 * k2_8 * k3_4 +
        210170 * k1_7 * k2_9 * k3_4 + 5623360 * k1_6 * k2_10 * k3_4 -
        167790 * k1_5 * k2_11 * k3_4 - 1092640 * k1_4 * k2_12 * k3_4 -
        153490 * k1_3 * k2_13 * k3_4 + 88100 * k1_13 * k2_2 * k3_5 -
        304030 * k1_12 * k2_3 * k3_5 - 2145710 * k1_11 * k2_4 * k3_5 +
        42060 * k1_10 * k2_5 * k3_5 - 1973880 * k1_9 * k2_6 * k3_5 +
        4478830 * k1_8 * k2_7 * k3_5 + 4478830 * k1_7 * k2_8 * k3_5 -
        1973880 * k1_6 * k2_9 * k3_5 + 42060 * k1_5 * k2_10 * k3_5 -
        2145710 * k1_4 * k2_11 * k3_5 - 304030 * k1_3 * k2_12 * k3_5 +
        88100 * k1_2 * k2_13 * k3_5 + 1320 * k1_13 * k2 * k3_6 +
        70480 * k1_12 * k2_2 * k3_6 - 170031 * k1_11 * k2_3 * k3_6 -
        177256 * k1_10 * k2_4 * k3_6 - 6624214 * k1_9 * k2_5 * k3_6 -
        51184 * k1_8 * k2_6 * k3_6 + 15492290 * k1_7 * k2_7 * k3_6 -
        51184 * k1_6 * k2_8 * k3_6 - 6624214 * k1_5 * k2_9 * k3_6 -
        177256 * k1_4 * k2_10 * k3_6 - 170031 * k1_3 * k2_11 * k3_6 +
        70480 * k1_2 * k2_12 * k3_6 + 1320 * k1 * k2_13 * k3_6 -
        42450 * k1_11 * k2_2 * k3_7 + 250470 * k1_10 * k2_3 * k3_7 -
        919080 * k1_9 * k2_4 * k3_7 - 6761020 * k1_8 * k2_5 * k3_7 +
        12196890 * k1_7 * k2_6 * k3_7 + 12196890 * k1_6 * k2_7 * k3_7 -
        6761020 * k1_5 * k2_8 * k3_7 - 919080 * k1_4 * k2_9 * k3_7 +
        250470 * k1_3 * k2_10 * k3_7 - 42450 * k1_2 * k2_11 * k3_7 -
        3960 * k1_11 * k2 * k3_8 - 33960 * k1_10 * k2_2 * k3_8 +
        239744 * k1_9 * k2_3 * k3_8 + 99664 * k1_8 * k2_4 * k3_8 +
        2920008 * k1_7 * k2_5 * k3_8 + 10965088 * k1_6 * k2_6 * k3_8 +
        2920008 * k1_5 * k2_7 * k3_8 + 99664 * k1_4 * k2_8 * k3_8 +
        239744 * k1_3 * k2_9 * k3_8 - 33960 * k1_2 * k2_10 * k3_8 -
        3960 * k1 * k2_11 * k3_8 - 179400 * k1_9 * k2_2 * k3_9 +
        326750 * k1_8 * k2_3 * k3_9 + 2712170 * k1_7 * k2_4 * k3_9 +
        6900120 * k1_6 * k2_5 * k3_9 + 6900120 * k1_5 * k2_6 * k3_9 +
        2712170 * k1_4 * k2_7 * k3_9 + 326750 * k1_3 * k2_8 * k3_9 -
        179400 * k1_2 * k2_9 * k3_9 + 3960 * k1_9 * k2 * k3_10 -
        143520 * k1_8 * k2_2 * k3_10 + 172612 * k1_7 * k2_3 * k3_10 +
        1340952 * k1_6 * k2_4 * k3_10 + 6525632 * k1_5 * k2_5 * k3_10 +
        1340952 * k1_4 * k2_6 * k3_10 + 172612 * k1_3 * k2_7 * k3_10 -
        143520 * k1_2 * k2_8 * k3_10 + 3960 * k1 * k2_9 * k3_10 +
        133750 * k1_7 * k2_2 * k3_11 - 213190 * k1_6 * k2_3 * k3_11 +
        653860 * k1_5 * k2_4 * k3_11 + 653860 * k1_4 * k2_5 * k3_11 -
        213190 * k1_3 * k2_6 * k3_11 + 133750 * k1_2 * k2_7 * k3_11 -
        1320 * k1_7 * k2 * k3_12 + 107000 * k1_6 * k2_2 * k3_12 -
        44680 * k1_5 * k2_3 * k3_12 - 79120 * k1_4 * k2_4 * k3_12 -
        44680 * k1_3 * k2_5 * k3_12 + 107000 * k1_2 * k2_6 * k3_12 -
        1320 * k1 * k2_7 * k3_12) *
      pi * q_8;

  kernel_poly[7] =
      -(7560 * k1_13 * k2_6 + 7560 * k1_12 * k2_7 - 7560 * k1_11 * k2_8 -
        7560 * k1_10 * k2_9 - 7560 * k1_9 * k2_10 - 7560 * k1_8 * k2_11 +
        7560 * k1_7 * k2_12 + 7560 * k1_6 * k2_13 + 2080 * k1_13 * k2_5 * k3 -
        14520 * k1_12 * k2_6 * k3 + 29219 * k1_11 * k2_7 * k3 +
        9480 * k1_10 * k2_8 * k3 - 69108 * k1_9 * k2_9 * k3 +
        9480 * k1_8 * k2_10 * k3 + 29219 * k1_7 * k2_11 * k3 -
        14520 * k1_6 * k2_12 * k3 + 2080 * k1_5 * k2_13 * k3 -
        111810 * k1_13 * k2_4 * k3_2 + 60140 * k1_12 * k2_5 * k3_2 +
        761210 * k1_11 * k2_6 * k3_2 + 693210 * k1_10 * k2_7 * k3_2 -
        1464910 * k1_9 * k2_8 * k3_2 - 1464910 * k1_8 * k2_9 * k3_2 +
        693210 * k1_7 * k2_10 * k3_2 + 761210 * k1_6 * k2_11 * k3_2 +
        60140 * k1_5 * k2_12 * k3_2 - 111810 * k1_4 * k2_13 * k3_2 -
        148100 * k1_13 * k2_3 * k3_3 - 1006400 * k1_12 * k2_4 * k3_3 +
        890980 * k1_11 * k2_5 * k3_3 + 7581120 * k1_10 * k2_6 * k3_3 -
        860736 * k1_9 * k2_7 * k3_3 - 12815680 * k1_8 * k2_8 * k3_3 -
        860736 * k1_7 * k2_9 * k3_3 + 7581120 * k1_6 * k2_10 * k3_3 +
        890980 * k1_5 * k2_11 * k3_3 - 1006400 * k1_4 * k2_12 * k3_3 -
        148100 * k1_3 * k2_13 * k3_3 + 176200 * k1_13 * k2_2 * k3_4 -
        617860 * k1_12 * k2_3 * k3_4 - 2892730 * k1_11 * k2_4 * k3_4 +
        2872540 * k1_10 * k2_5 * k3_4 + 5549560 * k1_9 * k2_6 * k3_4 -
        5158310 * k1_8 * k2_7 * k3_4 - 5158310 * k1_7 * k2_8 * k3_4 +
        5549560 * k1_6 * k2_9 * k3_4 + 2872540 * k1_5 * k2_10 * k3_4 -
        2892730 * k1_4 * k2_11 * k3_4 - 617860 * k1_3 * k2_12 * k3_4 +
        176200 * k1_2 * k2_13 * k3_4 + 6600 * k1_13 * k2 * k3_5 +
        352400 * k1_12 * k2_2 * k3_5 - 669515 * k1_11 * k2_3 * k3_5 -
        3314440 * k1_10 * k2_4 * k3_5 - 9751110 * k1_9 * k2_5 * k3_5 +
        3005520 * k1_8 * k2_6 * k3_5 + 21270302 * k1_7 * k2_7 * k3_5 +
        3005520 * k1_6 * k2_8 * k3_5 - 9751110 * k1_5 * k2_9 * k3_5 -
        3314440 * k1_4 * k2_10 * k3_5 - 669515 * k1_3 * k2_11 * k3_5 +
        352400 * k1_2 * k2_12 * k3_5 + 6600 * k1 * k2_13 * k3_5 -
        1650 * k1_13 * k3_6 + 5280 * k1_12 * k2 * k3_6 +
        29370 * k1_11 * k2_2 * k3_6 + 223406 * k1_10 * k2_3 * k3_6 -
        5220834 * k1_9 * k2_4 * k3_6 - 12210506 * k1_8 * k2_5 * k3_6 +
        21277214 * k1_7 * k2_6 * k3_6 + 21277214 * k1_6 * k2_7 * k3_6 -
        12210506 * k1_5 * k2_8 * k3_6 - 5220834 * k1_4 * k2_9 * k3_6 +
        223406 * k1_3 * k2_10 * k3_6 + 29370 * k1_2 * k2_11 * k3_6 +
        5280 * k1 * k2_12 * k3_6 - 1650 * k2_13 * k3_6 -
        19800 * k1_11 * k2 * k3_7 - 169800 * k1_10 * k2_2 * k3_7 +
        132630 * k1_9 * k2_3 * k3_7 - 968720 * k1_8 * k2_4 * k3_7 +
        6613430 * k1_7 * k2_5 * k3_7 + 20362400 * k1_6 * k2_6 * k3_7 +
        6613430 * k1_5 * k2_7 * k3_7 - 968720 * k1_4 * k2_8 * k3_7 +
        132630 * k1_3 * k2_9 * k3_7 - 169800 * k1_2 * k2_10 * k3_7 -
        19800 * k1 * k2_11 * k3_7 + 4950 * k1_11 * k3_8 -
        15840 * k1_10 * k2 * k3_8 - 422880 * k1_9 * k2_2 * k3_8 +
        696766 * k1_8 * k2_3 * k3_8 + 6378946 * k1_7 * k2_4 * k3_8 +
        10355772 * k1_6 * k2_5 * k3_8 + 10355772 * k1_5 * k2_6 * k3_8 +
        6378946 * k1_4 * k2_7 * k3_8 + 696766 * k1_3 * k2_8 * k3_8 -
        422880 * k1_2 * k2_9 * k3_8 - 15840 * k1 * k2_10 * k3_8 +
        4950 * k2_11 * k3_8 + 19800 * k1_9 * k2 * k3_9 -
        717600 * k1_8 * k2_2 * k3_9 + 1015880 * k1_7 * k2_3 * k3_9 +
        4061880 * k1_6 * k2_4 * k3_9 + 7692880 * k1_5 * k2_5 * k3_9 +
        4061880 * k1_4 * k2_6 * k3_9 + 1015880 * k1_3 * k2_7 * k3_9 -
        717600 * k1_2 * k2_8 * k3_9 + 19800 * k1 * k2_9 * k3_9 -
        4950 * k1_9 * k3_10 + 15840 * k1_8 * k2 * k3_10 +
        56810 * k1_7 * k2_2 * k3_10 - 146202 * k1_6 * k2_3 * k3_10 +
        1614238 * k1_5 * k2_4 * k3_10 + 1614238 * k1_4 * k2_5 * k3_10 -
        146202 * k1_3 * k2_6 * k3_10 + 56810 * k1_2 * k2_7 * k3_10 +
        15840 * k1 * k2_8 * k3_10 - 4950 * k2_9 * k3_10 -
        6600 * k1_7 * k2 * k3_11 + 535000 * k1_6 * k2_2 * k3_11 -
        243560 * k1_5 * k2_3 * k3_11 - 449360 * k1_4 * k2_4 * k3_11 -
        243560 * k1_3 * k2_5 * k3_11 + 535000 * k1_2 * k2_6 * k3_11 -
        6600 * k1 * k2_7 * k3_11 + 1650 * k1_7 * k3_12 -
        5280 * k1_6 * k2 * k3_12 + 160500 * k1_5 * k2_2 * k3_12 -
        74050 * k1_4 * k2_3 * k3_12 - 74050 * k1_3 * k2_4 * k3_12 +
        160500 * k1_2 * k2_5 * k3_12 - 5280 * k1 * k2_6 * k3_12 +
        1650 * k2_7 * k3_12) *
      pi * q_9;

  kernel_poly[8] =
      -(11340 * k1_13 * k2_5 + 30240 * k1_12 * k2_6 + 7560 * k1_11 * k2_7 -
        30240 * k1_10 * k2_8 - 37800 * k1_9 * k2_9 - 30240 * k1_8 * k2_10 +
        7560 * k1_7 * k2_11 + 30240 * k1_6 * k2_12 + 11340 * k1_5 * k2_13 -
        23370 * k1_13 * k2_4 * k3 + 5980 * k1_12 * k2_5 * k3 +
        165346 * k1_11 * k2_6 * k3 + 161826 * k1_10 * k2_7 * k3 -
        318182 * k1_9 * k2_8 * k3 - 318182 * k1_8 * k2_9 * k3 +
        161826 * k1_7 * k2_10 * k3 + 165346 * k1_6 * k2_11 * k3 +
        5980 * k1_5 * k2_12 * k3 - 23370 * k1_4 * k2_13 * k3 -
        71040 * k1_13 * k2_3 * k3_2 - 455040 * k1_12 * k2_4 * k3_2 +
        550615 * k1_11 * k2_5 * k3_2 + 3753040 * k1_10 * k2_6 * k3_2 -
        564205 * k1_9 * k2_7 * k3_2 - 6491840 * k1_8 * k2_8 * k3_2 -
        564205 * k1_7 * k2_9 * k3_2 + 3753040 * k1_6 * k2_10 * k3_2 +
        550615 * k1_5 * k2_11 * k3_2 - 455040 * k1_4 * k2_12 * k3_2 -
        71040 * k1_3 * k2_13 * k3_2 + 176200 * k1_13 * k2_2 * k3_3 -
        596300 * k1_12 * k2_3 * k3_3 - 2147570 * k1_11 * k2_4 * k3_3 +
        5077700 * k1_10 * k2_5 * k3_3 + 8782136 * k1_9 * k2_6 * k3_3 -
        11102334 * k1_8 * k2_7 * k3_3 - 11102334 * k1_7 * k2_8 * k3_3 +
        8782136 * k1_6 * k2_9 * k3_3 + 5077700 * k1_5 * k2_10 * k3_3 -
        2147570 * k1_4 * k2_11 * k3_3 - 596300 * k1_3 * k2_12 * k3_3 +
        176200 * k1_2 * k2_13 * k3_3 + 13200 * k1_13 * k2 * k3_4 +
        704800 * k1_12 * k2_2 * k3_4 - 1083970 * k1_11 * k2_3 * k3_4 -
        4295920 * k1_10 * k2_4 * k3_4 - 2739060 * k1_9 * k2_5 * k3_4 +
        3742480 * k1_8 * k2_6 * k3_4 + 7087420 * k1_7 * k2_7 * k3_4 +
        3742480 * k1_6 * k2_8 * k3_4 - 2739060 * k1_5 * k2_9 * k3_4 -
        4295920 * k1_4 * k2_10 * k3_4 - 1083970 * k1_3 * k2_11 * k3_4 +
        704800 * k1_2 * k2_12 * k3_4 + 13200 * k1 * k2_13 * k3_4 -
        8250 * k1_13 * k3_5 + 26400 * k1_12 * k2 * k3_5 +
        486450 * k1_11 * k2_2 * k3_5 - 499210 * k1_10 * k2_3 * k3_5 -
        10832010 * k1_9 * k2_4 * k3_5 - 14846930 * k1_8 * k2_5 * k3_5 +
        26272038 * k1_7 * k2_6 * k3_5 + 26272038 * k1_6 * k2_7 * k3_5 -
        14846930 * k1_5 * k2_8 * k3_5 - 10832010 * k1_4 * k2_9 * k3_5 -
        499210 * k1_3 * k2_10 * k3_5 + 486450 * k1_2 * k2_11 * k3_5 +
        26400 * k1 * k2_12 * k3_5 - 8250 * k2_13 * k3_5 - 6600 * k1_12 * k3_6 -
        31680 * k1_11 * k2 * k3_6 - 234920 * k1_10 * k2_2 * k3_6 -
        751176 * k1_9 * k2_3 * k3_6 - 6669816 * k1_8 * k2_4 * k3_6 +
        5171611 * k1_7 * k2_5 * k3_6 + 26593952 * k1_6 * k2_6 * k3_6 +
        5171611 * k1_5 * k2_7 * k3_6 - 6669816 * k1_4 * k2_8 * k3_6 -
        751176 * k1_3 * k2_9 * k3_6 - 234920 * k1_2 * k2_10 * k3_6 -
        31680 * k1 * k2_11 * k3_6 - 6600 * k2_12 * k3_6 + 24750 * k1_11 * k3_7 -
        79200 * k1_10 * k2 * k3_7 - 679200 * k1_9 * k2_2 * k3_7 +
        576670 * k1_8 * k2_3 * k3_7 + 9226330 * k1_7 * k2_4 * k3_7 +
        13067380 * k1_6 * k2_5 * k3_7 + 13067380 * k1_5 * k2_6 * k3_7 +
        9226330 * k1_4 * k2_7 * k3_7 + 576670 * k1_3 * k2_8 * k3_7 -
        679200 * k1_2 * k2_9 * k3_7 - 79200 * k1 * k2_10 * k3_7 +
        24750 * k2_11 * k3_7 + 19800 * k1_10 * k3_8 + 15840 * k1_9 * k2 * k3_8 -
        1521720 * k1_8 * k2_2 * k3_8 + 2498524 * k1_7 * k2_3 * k3_8 +
        8238064 * k1_6 * k2_4 * k3_8 + 6830568 * k1_5 * k2_5 * k3_8 +
        8238064 * k1_4 * k2_6 * k3_8 + 2498524 * k1_3 * k2_7 * k3_8 -
        1521720 * k1_2 * k2_8 * k3_8 + 15840 * k1 * k2_9 * k3_8 +
        19800 * k2_10 * k3_8 - 24750 * k1_9 * k3_9 + 79200 * k1_8 * k2 * k3_9 -
        785950 * k1_7 * k2_2 * k3_9 + 779070 * k1_6 * k2_3 * k3_9 +
        2171670 * k1_5 * k2_4 * k3_9 + 2171670 * k1_4 * k2_5 * k3_9 +
        779070 * k1_3 * k2_6 * k3_9 - 785950 * k1_2 * k2_7 * k3_9 +
        79200 * k1 * k2_8 * k3_9 - 24750 * k2_9 * k3_9 - 19800 * k1_8 * k3_10 +
        10560 * k1_7 * k2 * k3_10 + 944840 * k1_6 * k2_2 * k3_10 -
        397988 * k1_5 * k2_3 * k3_10 - 857488 * k1_4 * k2_4 * k3_10 -
        397988 * k1_3 * k2_5 * k3_10 + 944840 * k1_2 * k2_6 * k3_10 +
        10560 * k1 * k2_7 * k3_10 - 19800 * k2_8 * k3_10 + 8250 * k1_7 * k3_11 -
        26400 * k1_6 * k2 * k3_11 + 802500 * k1_5 * k2_2 * k3_11 -
        383690 * k1_4 * k2_3 * k3_11 - 383690 * k1_3 * k2_4 * k3_11 +
        802500 * k1_2 * k2_5 * k3_11 - 26400 * k1 * k2_6 * k3_11 +
        8250 * k2_7 * k3_11 + 6600 * k1_6 * k3_12 - 7920 * k1_5 * k2 * k3_12 +
        107000 * k1_4 * k2_2 * k3_12 - 32080 * k1_3 * k2_3 * k3_12 +
        107000 * k1_2 * k2_4 * k3_12 - 7920 * k1 * k2_5 * k3_12 +
        6600 * k2_6 * k3_12) *
      pi * q_10;

  kernel_poly[9] =
      -(7560 * k1_13 * k2_4 + 45360 * k1_12 * k2_5 + 68040 * k1_11 * k2_6 -
        7560 * k1_10 * k2_7 - 113400 * k1_9 * k2_8 - 113400 * k1_8 * k2_9 -
        7560 * k1_7 * k2_10 + 68040 * k1_6 * k2_11 + 45360 * k1_5 * k2_12 +
        7560 * k1_4 * k2_13 - 14460 * k1_13 * k2_3 * k3 -
        95040 * k1_12 * k2_4 * k3 + 128519 * k1_11 * k2_5 * k3 +
        823184 * k1_10 * k2_6 * k3 - 123929 * k1_9 * k2_7 * k3 -
        1419328 * k1_8 * k2_8 * k3 - 123929 * k1_7 * k2_9 * k3 +
        823184 * k1_6 * k2_10 * k3 + 128519 * k1_5 * k2_11 * k3 -
        95040 * k1_4 * k2_12 * k3 - 14460 * k1_3 * k2_13 * k3 +
        88100 * k1_13 * k2_2 * k3_2 - 286110 * k1_12 * k2_3 * k3_2 -
        997650 * k1_11 * k2_4 * k3_2 + 2425260 * k1_10 * k2_5 * k3_2 +
        4431420 * k1_9 * k2_6 * k3_2 - 5733260 * k1_8 * k2_7 * k3_2 -
        5733260 * k1_7 * k2_8 * k3_2 + 4431420 * k1_6 * k2_9 * k3_2 +
        2425260 * k1_5 * k2_10 * k3_2 - 997650 * k1_4 * k2_11 * k3_2 -
        286110 * k1_3 * k2_12 * k3_2 + 88100 * k1_2 * k2_13 * k3_2 +
        13200 * k1_13 * k2 * k3_3 + 704800 * k1_12 * k2_2 * k3_3 -
        922910 * k1_11 * k2_3 * k3_3 - 2668560 * k1_10 * k2_4 * k3_3 +
        3559664 * k1_9 * k2_5 * k3_3 + 2122384 * k1_8 * k2_6 * k3_3 -
        5531852 * k1_7 * k2_7 * k3_3 + 2122384 * k1_6 * k2_8 * k3_3 +
        3559664 * k1_5 * k2_9 * k3_3 - 2668560 * k1_4 * k2_10 * k3_3 -
        922910 * k1_3 * k2_11 * k3_3 + 704800 * k1_2 * k2_12 * k3_3 +
        13200 * k1 * k2_13 * k3_3 - 16500 * k1_13 * k3_4 +
        52800 * k1_12 * k2 * k3_4 + 1100250 * k1_11 * k2_2 * k3_4 -
        793630 * k1_10 * k2_3 * k3_4 - 9829740 * k1_9 * k2_4 * k3_4 -
        7620480 * k1_8 * k2_5 * k3_4 + 17313180 * k1_7 * k2_6 * k3_4 +
        17313180 * k1_6 * k2_7 * k3_4 - 7620480 * k1_5 * k2_8 * k3_4 -
        9829740 * k1_4 * k2_9 * k3_4 - 793630 * k1_3 * k2_10 * k3_4 +
        1100250 * k1_2 * k2_11 * k3_4 + 52800 * k1 * k2_12 * k3_4 -
        16500 * k2_13 * k3_4 - 33000 * k1_12 * k3_5 +
        183800 * k1_10 * k2_2 * k3_5 - 1947900 * k1_9 * k2_3 * k3_5 -
        12175000 * k1_8 * k2_4 * k3_5 + 2185307 * k1_7 * k2_5 * k3_5 +
        27906272 * k1_6 * k2_6 * k3_5 + 2185307 * k1_5 * k2_7 * k3_5 -
        12175000 * k1_4 * k2_8 * k3_5 - 1947900 * k1_3 * k2_9 * k3_5 +
        183800 * k1_2 * k2_10 * k3_5 - 33000 * k2_12 * k3_5 +
        39600 * k1_11 * k3_6 - 153120 * k1_10 * k2 * k3_6 -
        751280 * k1_9 * k2_2 * k3_6 - 927804 * k1_8 * k2_3 * k3_6 +
        5725916 * k1_7 * k2_4 * k3_6 + 10132748 * k1_6 * k2_5 * k3_6 +
        10132748 * k1_5 * k2_6 * k3_6 + 5725916 * k1_4 * k2_7 * k3_6 -
        927804 * k1_3 * k2_8 * k3_6 - 751280 * k1_2 * k2_9 * k3_6 -
        153120 * k1 * k2_10 * k3_6 + 39600 * k2_11 * k3_6 +
        99000 * k1_10 * k3_7 - 79200 * k1_9 * k2 * k3_7 -
        1867800 * k1_8 * k2_2 * k3_7 + 3363040 * k1_7 * k2_3 * k3_7 +
        10183760 * k1_6 * k2_4 * k3_7 + 5740240 * k1_5 * k2_5 * k3_7 +
        10183760 * k1_4 * k2_6 * k3_7 + 3363040 * k1_3 * k2_7 * k3_7 -
        1867800 * k1_2 * k2_8 * k3_7 - 79200 * k1 * k2_9 * k3_7 +
        99000 * k2_10 * k3_7 - 19800 * k1_9 * k3_8 + 142560 * k1_8 * k2 * k3_8 -
        2060480 * k1_7 * k2_2 * k3_8 + 2416336 * k1_6 * k2_3 * k3_8 +
        2380116 * k1_5 * k2_4 * k3_8 + 2380116 * k1_4 * k2_5 * k3_8 +
        2416336 * k1_3 * k2_6 * k3_8 - 2060480 * k1_2 * k2_7 * k3_8 +
        142560 * k1 * k2_8 * k3_8 - 19800 * k2_9 * k3_8 - 99000 * k1_8 * k3_9 +
        105600 * k1_7 * k2 * k3_9 + 444200 * k1_6 * k2_2 * k3_9 -
        208620 * k1_5 * k2_3 * k3_9 - 1071120 * k1_4 * k2_4 * k3_9 -
        208620 * k1_3 * k2_5 * k3_9 + 444200 * k1_2 * k2_6 * k3_9 +
        105600 * k1 * k2_7 * k3_9 - 99000 * k2_8 * k3_9 - 13200 * k1_7 * k3_10 -
        36960 * k1_6 * k2 * k3_10 + 1596660 * k1_5 * k2_2 * k3_10 -
        759322 * k1_4 * k2_3 * k3_10 - 759322 * k1_3 * k2_4 * k3_10 +
        1596660 * k1_2 * k2_5 * k3_10 - 36960 * k1 * k2_6 * k3_10 -
        13200 * k2_7 * k3_10 + 33000 * k1_6 * k3_11 -
        39600 * k1_5 * k2 * k3_11 + 535000 * k1_4 * k2_2 * k3_11 -
        163760 * k1_3 * k2_3 * k3_11 + 535000 * k1_2 * k2_4 * k3_11 -
        39600 * k1 * k2_5 * k3_11 + 33000 * k2_6 * k3_11 + 9900 * k1_5 * k3_12 -
        5280 * k1_4 * k2 * k3_12 + 26750 * k1_3 * k2_2 * k3_12 +
        26750 * k1_2 * k2_3 * k3_12 - 5280 * k1 * k2_4 * k3_12 +
        9900 * k2_5 * k3_12) *
      pi * q_11;

  kernel_poly[10] =
      -(1890 * k1_13 * k2_3 + 30240 * k1_12 * k2_4 + 111510 * k1_11 * k2_5 +
        120960 * k1_10 * k2_6 - 113400 * k1_9 * k2_7 - 302400 * k1_8 * k2_8 -
        113400 * k1_7 * k2_9 + 120960 * k1_6 * k2_10 + 111510 * k1_5 * k2_11 +
        30240 * k1_4 * k2_12 + 1890 * k1_3 * k2_13 + 17620 * k1_13 * k2_2 * k3 -
        58230 * k1_12 * k2_3 * k3 - 187434 * k1_11 * k2_4 * k3 +
        588876 * k1_10 * k2_5 * k3 + 971964 * k1_9 * k2_6 * k3 -
        1310956 * k1_8 * k2_7 * k3 - 1310956 * k1_7 * k2_8 * k3 +
        971964 * k1_6 * k2_9 * k3 + 588876 * k1_5 * k2_10 * k3 -
        187434 * k1_4 * k2_11 * k3 - 58230 * k1_3 * k2_12 * k3 +
        17620 * k1_2 * k2_13 * k3 + 6600 * k1_13 * k2 * k3_2 +
        352400 * k1_12 * k2_2 * k3_2 - 445575 * k1_11 * k2_3 * k3_2 -
        1385800 * k1_10 * k2_4 * k3_2 + 1928930 * k1_9 * k2_5 * k3_2 +
        964520 * k1_8 * k2_6 * k3_2 - 3391090 * k1_7 * k2_7 * k3_2 +
        964520 * k1_6 * k2_8 * k3_2 + 1928930 * k1_5 * k2_9 * k3_2 -
        1385800 * k1_4 * k2_10 * k3_2 - 445575 * k1_3 * k2_11 * k3_2 +
        352400 * k1_2 * k2_12 * k3_2 + 6600 * k1 * k2_13 * k3_2 -
        16500 * k1_13 * k3_3 + 52800 * k1_12 * k2 * k3_3 +
        1134210 * k1_11 * k2_2 * k3_3 - 487710 * k1_10 * k2_3 * k3_3 -
        5309324 * k1_9 * k2_4 * k3_3 - 1299384 * k1_8 * k2_5 * k3_3 +
        5759772 * k1_7 * k2_6 * k3_3 + 5759772 * k1_6 * k2_7 * k3_3 -
        1299384 * k1_5 * k2_8 * k3_3 - 5309324 * k1_4 * k2_9 * k3_3 -
        487710 * k1_3 * k2_10 * k3_3 + 1134210 * k1_2 * k2_11 * k3_3 +
        52800 * k1 * k2_12 * k3_3 - 16500 * k2_13 * k3_3 -
        66000 * k1_12 * k3_4 + 59400 * k1_11 * k2 * k3_4 +
        877000 * k1_10 * k2_2 * k3_4 - 1579860 * k1_9 * k2_3 * k3_4 -
        9721920 * k1_8 * k2_4 * k3_4 + 1700020 * k1_7 * k2_5 * k3_4 +
        19389520 * k1_6 * k2_6 * k3_4 + 1700020 * k1_5 * k2_7 * k3_4 -
        9721920 * k1_4 * k2_8 * k3_4 - 1579860 * k1_3 * k2_9 * k3_4 +
        877000 * k1_2 * k2_10 * k3_4 + 59400 * k1 * k2_11 * k3_4 -
        66000 * k2_12 * k3_4 - 132000 * k1_10 * k2 * k3_5 -
        332080 * k1_9 * k2_2 * k3_5 - 2339740 * k1_8 * k2_3 * k3_5 +
        249708 * k1_7 * k2_4 * k3_5 + 6091308 * k1_6 * k2_5 * k3_5 +
        6091308 * k1_5 * k2_6 * k3_5 + 249708 * k1_4 * k2_7 * k3_5 -
        2339740 * k1_3 * k2_8 * k3_5 - 332080 * k1_2 * k2_9 * k3_5 -
        132000 * k1 * k2_10 * k3_5 + 191400 * k1_10 * k3_6 -
        216480 * k1_9 * k2 * k3_6 - 1548600 * k1_8 * k2_2 * k3_6 +
        2170529 * k1_7 * k2_3 * k3_6 + 6524680 * k1_6 * k2_4 * k3_6 +
        3526352 * k1_5 * k2_5 * k3_6 + 6524680 * k1_4 * k2_6 * k3_6 +
        2170529 * k1_3 * k2_7 * k3_6 - 1548600 * k1_2 * k2_8 * k3_6 -
        216480 * k1 * k2_9 * k3_6 + 191400 * k2_10 * k3_6 +
        99000 * k1_9 * k3_7 + 79200 * k1_8 * k2 * k3_7 -
        2516800 * k1_7 * k2_2 * k3_7 + 3182120 * k1_6 * k2_3 * k3_7 +
        2178220 * k1_5 * k2_4 * k3_7 + 2178220 * k1_4 * k2_5 * k3_7 +
        3182120 * k1_3 * k2_6 * k3_7 - 2516800 * k1_2 * k2_7 * k3_7 +
        79200 * k1 * k2_8 * k3_7 + 99000 * k2_9 * k3_7 - 178200 * k1_8 * k3_8 +
        227040 * k1_7 * k2 * k3_8 - 769160 * k1_6 * k2_2 * k3_8 +
        321984 * k1_5 * k2_3 * k3_8 - 983360 * k1_4 * k2_4 * k3_8 +
        321984 * k1_3 * k2_5 * k3_8 - 769160 * k1_2 * k2_6 * k3_8 +
        227040 * k1 * k2_7 * k3_8 - 178200 * k2_8 * k3_8 -
        132000 * k1_7 * k3_9 + 26400 * k1_6 * k2 * k3_9 +
        1563300 * k1_5 * k2_2 * k3_9 - 821730 * k1_4 * k2_3 * k3_9 -
        821730 * k1_3 * k2_4 * k3_9 + 1563300 * k1_2 * k2_5 * k3_9 +
        26400 * k1 * k2_6 * k3_9 - 132000 * k2_7 * k3_9 + 46200 * k1_6 * k3_10 -
        75240 * k1_5 * k2 * k3_10 + 1088360 * k1_4 * k2_2 * k3_10 -
        326068 * k1_3 * k2_3 * k3_10 + 1088360 * k1_2 * k2_4 * k3_10 -
        75240 * k1 * k2_5 * k3_10 + 46200 * k2_6 * k3_10 +
        49500 * k1_5 * k3_11 - 26400 * k1_4 * k2 * k3_11 +
        133750 * k1_3 * k2_2 * k3_11 + 133750 * k1_2 * k2_3 * k3_11 -
        26400 * k1 * k2_4 * k3_11 + 49500 * k2_5 * k3_11 + 6600 * k1_4 * k3_12 -
        1320 * k1_3 * k2 * k3_12 - 1320 * k1 * k2_3 * k3_12 +
        6600 * k2_4 * k3_12) *
      pi * q_12;

  kernel_poly[11] =
      -(7560 * k1_12 * k2_3 + 75600 * k1_11 * k2_4 + 219240 * k1_10 * k2_5 +
        83160 * k1_9 * k2_6 - 385560 * k1_8 * k2_7 - 385560 * k1_7 * k2_8 +
        83160 * k1_6 * k2_9 + 219240 * k1_5 * k2_10 + 75600 * k1_4 * k2_11 +
        7560 * k1_3 * k2_12 + 1320 * k1_13 * k2 * k3 +
        70480 * k1_12 * k2_2 * k3 - 86091 * k1_11 * k2_3 * k3 -
        208616 * k1_10 * k2_4 * k3 + 547066 * k1_9 * k2_5 * k3 +
        156616 * k1_8 * k2_6 * k3 - 944330 * k1_7 * k2_7 * k3 +
        156616 * k1_6 * k2_8 * k3 + 547066 * k1_5 * k2_9 * k3 -
        208616 * k1_4 * k2_10 * k3 - 86091 * k1_3 * k2_11 * k3 +
        70480 * k1_2 * k2_12 * k3 + 1320 * k1 * k2_13 * k3 -
        8250 * k1_13 * k3_2 + 26400 * k1_12 * k2 * k3_2 +
        571350 * k1_11 * k2_2 * k3_2 - 269350 * k1_10 * k2_3 * k3_2 -
        2527460 * k1_9 * k2_4 * k3_2 - 242070 * k1_8 * k2_5 * k3_2 +
        1984020 * k1_7 * k2_6 * k3_2 + 1984020 * k1_6 * k2_7 * k3_2 -
        242070 * k1_5 * k2_8 * k3_2 - 2527460 * k1_4 * k2_9 * k3_2 -
        269350 * k1_3 * k2_10 * k3_2 + 571350 * k1_2 * k2_11 * k3_2 +
        26400 * k1 * k2_12 * k3_2 - 8250 * k2_13 * k3_2 - 66000 * k1_12 * k3_3 +
        75240 * k1_11 * k2 * k3_3 + 1012840 * k1_10 * k2_2 * k3_3 -
        612656 * k1_9 * k2_3 * k3_3 - 5103136 * k1_8 * k2_4 * k3_3 +
        401548 * k1_7 * k2_5 * k3_3 + 8330448 * k1_6 * k2_6 * k3_3 +
        401548 * k1_5 * k2_7 * k3_3 - 5103136 * k1_4 * k2_8 * k3_3 -
        612656 * k1_3 * k2_9 * k3_3 + 1012840 * k1_2 * k2_10 * k3_3 +
        75240 * k1 * k2_11 * k3_3 - 66000 * k2_12 * k3_3 -
        74250 * k1_11 * k3_4 - 26400 * k1_10 * k2 * k3_4 +
        368800 * k1_9 * k2_2 * k3_4 - 1700730 * k1_8 * k2_3 * k3_4 -
        901860 * k1_7 * k2_4 * k3_4 + 3730880 * k1_6 * k2_5 * k3_4 +
        3730880 * k1_5 * k2_6 * k3_4 - 901860 * k1_4 * k2_7 * k3_4 -
        1700730 * k1_3 * k2_8 * k3_4 + 368800 * k1_2 * k2_9 * k3_4 -
        26400 * k1 * k2_10 * k3_4 - 74250 * k2_11 * k3_4 +
        165000 * k1_10 * k3_5 - 227040 * k1_9 * k2 * k3_5 -
        837720 * k1_8 * k2_2 * k3_5 + 500817 * k1_7 * k2_3 * k3_5 +
        2002152 * k1_6 * k2_4 * k3_5 + 1593712 * k1_5 * k2_5 * k3_5 +
        2002152 * k1_4 * k2_6 * k3_5 + 500817 * k1_3 * k2_7 * k3_5 -
        837720 * k1_2 * k2_8 * k3_5 - 227040 * k1 * k2_9 * k3_5 +
        165000 * k2_10 * k3_5 + 270600 * k1_9 * k3_6 -
        79200 * k1_8 * k2 * k3_6 - 1918200 * k1_7 * k2_2 * k3_6 +
        2097880 * k1_6 * k2_3 * k3_6 + 1228360 * k1_5 * k2_4 * k3_6 +
        1228360 * k1_4 * k2_5 * k3_6 + 2097880 * k1_3 * k2_6 * k3_6 -
        1918200 * k1_2 * k2_7 * k3_6 - 79200 * k1 * k2_8 * k3_6 +
        270600 * k2_9 * k3_6 - 99000 * k1_8 * k3_7 + 216480 * k1_7 * k2 * k3_7 -
        1407400 * k1_6 * k2_2 * k3_7 + 632950 * k1_5 * k2_3 * k3_7 -
        895040 * k1_4 * k2_4 * k3_7 + 632950 * k1_3 * k2_5 * k3_7 -
        1407400 * k1_2 * k2_6 * k3_7 + 216480 * k1 * k2_7 * k3_7 -
        99000 * k2_8 * k3_7 - 283800 * k1_7 * k3_8 + 132000 * k1_6 * k2 * k3_8 +
        705960 * k1_5 * k2_2 * k3_8 - 535640 * k1_4 * k2_3 * k3_8 -
        535640 * k1_3 * k2_4 * k3_8 + 705960 * k1_2 * k2_5 * k3_8 +
        132000 * k1 * k2_6 * k3_8 - 283800 * k2_7 * k3_8 - 33000 * k1_6 * k3_9 -
        59400 * k1_5 * k2 * k3_9 + 1161800 * k1_4 * k2_2 * k3_9 -
        343920 * k1_3 * k2_3 * k3_9 + 1161800 * k1_2 * k2_4 * k3_9 -
        59400 * k1 * k2_5 * k3_9 - 33000 * k2_6 * k3_9 + 94050 * k1_5 * k3_10 -
        52800 * k1_4 * k2 * k3_10 + 272090 * k1_3 * k2_2 * k3_10 +
        272090 * k1_2 * k2_3 * k3_10 - 52800 * k1 * k2_4 * k3_10 +
        94050 * k2_5 * k3_10 + 33000 * k1_4 * k3_11 - 6600 * k1_3 * k2 * k3_11 -
        6600 * k1 * k2_3 * k3_11 + 33000 * k2_4 * k3_11 + 1650 * k1_3 * k3_12 +
        1650 * k2_3 * k3_12) *
      pi * q_13;

  kernel_poly[12] =
      -(18900 * k1_11 * k2_3 + 151200 * k1_10 * k2_4 + 257040 * k1_9 * k2_5 -
        151200 * k1_8 * k2_6 - 551880 * k1_7 * k2_7 - 151200 * k1_6 * k2_8 +
        257040 * k1_5 * k2_9 + 151200 * k1_4 * k2_10 + 18900 * k1_3 * k2_11 -
        1650 * k1_13 * k3 + 5280 * k1_12 * k2 * k3 +
        114270 * k1_11 * k2_2 * k3 - 36734 * k1_10 * k2_3 * k3 -
        393604 * k1_9 * k2_4 * k3 + 53394 * k1_8 * k2_5 * k3 +
        250644 * k1_7 * k2_6 * k3 + 250644 * k1_6 * k2_7 * k3 +
        53394 * k1_5 * k2_8 * k3 - 393604 * k1_4 * k2_9 * k3 -
        36734 * k1_3 * k2_10 * k3 + 114270 * k1_2 * k2_11 * k3 +
        5280 * k1 * k2_12 * k3 - 1650 * k2_13 * k3 - 33000 * k1_12 * k3_2 +
        39600 * k1_11 * k2 * k3_2 + 523400 * k1_10 * k2_2 * k3_2 -
        294890 * k1_9 * k2_3 * k3_2 - 2301400 * k1_8 * k2_4 * k3_2 +
        17255 * k1_7 * k2_5 * k3_2 + 3168400 * k1_6 * k2_6 * k3_2 +
        17255 * k1_5 * k2_7 * k3_2 - 2301400 * k1_4 * k2_8 * k3_2 -
        294890 * k1_3 * k2_9 * k3_2 + 523400 * k1_2 * k2_10 * k3_2 +
        39600 * k1 * k2_11 * k3_2 - 33000 * k2_12 * k3_2 -
        94050 * k1_11 * k3_3 + 36960 * k1_10 * k2 * k3_3 +
        625120 * k1_9 * k2_2 * k3_3 - 693034 * k1_8 * k2_3 * k3_3 -
        1066164 * k1_7 * k2_4 * k3_3 + 1225512 * k1_6 * k2_5 * k3_3 +
        1225512 * k1_5 * k2_6 * k3_3 - 1066164 * k1_4 * k2_7 * k3_3 -
        693034 * k1_3 * k2_8 * k3_3 + 625120 * k1_2 * k2_9 * k3_3 +
        36960 * k1 * k2_10 * k3_3 - 94050 * k2_11 * k3_3 +
        33000 * k1_10 * k3_4 - 105600 * k1_9 * k2 * k3_4 -
        90600 * k1_8 * k2_2 * k3_4 + 92910 * k1_7 * k2_3 * k3_4 +
        527040 * k1_6 * k2_4 * k3_4 + 789720 * k1_5 * k2_5 * k3_4 +
        527040 * k1_4 * k2_6 * k3_4 + 92910 * k1_3 * k2_7 * k3_4 -
        90600 * k1_2 * k2_8 * k3_4 - 105600 * k1 * k2_9 * k3_4 +
        33000 * k2_10 * k3_4 + 283800 * k1_9 * k3_5 -
        142560 * k1_8 * k2 * k3_5 - 1041240 * k1_7 * k2_2 * k3_5 +
        741048 * k1_6 * k2_3 * k3_5 + 369288 * k1_5 * k2_4 * k3_5 +
        369288 * k1_4 * k2_5 * k3_5 + 741048 * k1_3 * k2_6 * k3_5 -
        1041240 * k1_2 * k2_7 * k3_5 - 142560 * k1 * k2_8 * k3_5 +
        283800 * k2_9 * k3_5 + 99000 * k1_8 * k3_6 + 79200 * k1_7 * k2 * k3_6 -
        1151400 * k1_6 * k2_2 * k3_6 + 460330 * k1_5 * k2_3 * k3_6 -
        722640 * k1_4 * k2_4 * k3_6 + 460330 * k1_3 * k2_5 * k3_6 -
        1151400 * k1_2 * k2_6 * k3_6 + 79200 * k1 * k2_7 * k3_6 +
        99000 * k2_8 * k3_6 - 270600 * k1_7 * k3_7 + 153120 * k1_6 * k2 * k3_7 +
        11400 * k1_5 * k2_2 * k3_7 - 280280 * k1_4 * k2_3 * k3_7 -
        280280 * k1_3 * k2_4 * k3_7 + 11400 * k1_2 * k2_5 * k3_7 +
        153120 * k1 * k2_6 * k3_7 - 270600 * k2_7 * k3_7 -
        165000 * k1_6 * k3_8 + 718600 * k1_4 * k2_2 * k3_8 -
        206360 * k1_3 * k2_3 * k3_8 + 718600 * k1_2 * k2_4 * k3_8 -
        165000 * k2_6 * k3_8 + 74250 * k1_5 * k3_9 - 52800 * k1_4 * k2 * k3_9 +
        290450 * k1_3 * k2_2 * k3_9 + 290450 * k1_2 * k2_3 * k3_9 -
        52800 * k1 * k2_4 * k3_9 + 74250 * k2_5 * k3_9 + 66000 * k1_4 * k3_10 -
        13200 * k1_3 * k2 * k3_10 - 13200 * k1 * k2_3 * k3_10 +
        66000 * k2_4 * k3_10 + 8250 * k1_3 * k3_11 + 8250 * k2_3 * k3_11) *
      pi * q_14;

  kernel_poly[13] =
      -(37800 * k1_10 * k2_3 + 189000 * k1_9 * k2_4 + 113400 * k1_8 * k2_5 -
        340200 * k1_7 * k2_6 - 340200 * k1_6 * k2_7 + 113400 * k1_5 * k2_8 +
        189000 * k1_4 * k2_9 + 37800 * k1_3 * k2_10 - 6600 * k1_12 * k3 +
        7920 * k1_11 * k2 * k3 + 104680 * k1_10 * k2_2 * k3 -
        31006 * k1_9 * k2_3 * k3 - 371576 * k1_8 * k2_4 * k3 +
        19831 * k1_7 * k2_5 * k3 + 536912 * k1_6 * k2_6 * k3 +
        19831 * k1_5 * k2_7 * k3 - 371576 * k1_4 * k2_8 * k3 -
        31006 * k1_3 * k2_9 * k3 + 104680 * k1_2 * k2_10 * k3 +
        7920 * k1 * k2_11 * k3 - 6600 * k2_12 * k3 - 49500 * k1_11 * k3_2 +
        26400 * k1_10 * k2 * k3_2 + 344600 * k1_9 * k2_2 * k3_2 -
        302350 * k1_8 * k2_3 * k3_2 - 680250 * k1_7 * k2_4 * k3_2 +
        346100 * k1_6 * k2_5 * k3_2 + 346100 * k1_5 * k2_6 * k3_2 -
        680250 * k1_4 * k2_7 * k3_2 - 302350 * k1_3 * k2_8 * k3_2 +
        344600 * k1_2 * k2_9 * k3_2 + 26400 * k1 * k2_10 * k3_2 -
        49500 * k2_11 * k3_2 - 46200 * k1_10 * k3_3 - 10560 * k1_9 * k2 * k3_3 +
        255480 * k1_8 * k2_2 * k3_3 - 46566 * k1_7 * k2_3 * k3_3 -
        180576 * k1_6 * k2_4 * k3_3 + 175728 * k1_5 * k2_5 * k3_3 -
        180576 * k1_4 * k2_6 * k3_3 - 46566 * k1_3 * k2_7 * k3_3 +
        255480 * k1_2 * k2_8 * k3_3 - 10560 * k1 * k2_9 * k3_3 -
        46200 * k2_10 * k3_3 + 132000 * k1_9 * k3_4 - 79200 * k1_8 * k2 * k3_4 -
        351150 * k1_7 * k2_2 * k3_4 + 256710 * k1_6 * k2_3 * k3_4 +
        59760 * k1_5 * k2_4 * k3_4 + 59760 * k1_4 * k2_5 * k3_4 +
        256710 * k1_3 * k2_6 * k3_4 - 351150 * k1_2 * k2_7 * k3_4 -
        79200 * k1 * k2_8 * k3_4 + 132000 * k2_9 * k3_4 + 178200 * k1_8 * k3_5 -
        15840 * k1_7 * k2 * k3_5 - 650760 * k1_6 * k2_2 * k3_5 +
        200262 * k1_5 * k2_3 * k3_5 - 397008 * k1_4 * k2_4 * k3_5 +
        200262 * k1_3 * k2_5 * k3_5 - 650760 * k1_2 * k2_6 * k3_5 -
        15840 * k1 * k2_7 * k3_5 + 178200 * k2_8 * k3_5 - 99000 * k1_7 * k3_6 +
        79200 * k1_6 * k2 * k3_6 - 173100 * k1_5 * k2_2 * k3_6 -
        151410 * k1_4 * k2_3 * k3_6 - 151410 * k1_3 * k2_4 * k3_6 -
        173100 * k1_2 * k2_5 * k3_6 + 79200 * k1 * k2_6 * k3_6 -
        99000 * k2_7 * k3_6 - 191400 * k1_6 * k3_7 + 31680 * k1_5 * k2 * k3_7 +
        290600 * k1_4 * k2_2 * k3_7 - 84200 * k1_3 * k2_3 * k3_7 +
        290600 * k1_2 * k2_4 * k3_7 + 31680 * k1 * k2_5 * k3_7 -
        191400 * k2_6 * k3_7 - 26400 * k1_4 * k2 * k3_8 +
        179650 * k1_3 * k2_2 * k3_8 + 179650 * k1_2 * k2_3 * k3_8 -
        26400 * k1 * k2_4 * k3_8 + 66000 * k1_4 * k3_9 -
        13200 * k1_3 * k2 * k3_9 - 13200 * k1 * k2_3 * k3_9 +
        66000 * k2_4 * k3_9 + 16500 * k1_3 * k3_10 + 16500 * k2_3 * k3_10) *
      pi * q_15;

  kernel_poly[14] =
      -(47250 * k1_9 * k2_3 + 120960 * k1_8 * k2_4 - 47250 * k1_7 * k2_5 -
        241920 * k1_6 * k2_6 - 47250 * k1_5 * k2_7 + 120960 * k1_4 * k2_8 +
        47250 * k1_3 * k2_9 - 9900 * k1_11 * k3 + 5280 * k1_10 * k2 * k3 +
        68920 * k1_9 * k2_2 * k3 - 38294 * k1_8 * k2_3 * k3 -
        93714 * k1_7 * k2_4 * k3 + 65188 * k1_6 * k2_5 * k3 +
        65188 * k1_5 * k2_6 * k3 - 93714 * k1_4 * k2_7 * k3 -
        38294 * k1_3 * k2_8 * k3 + 68920 * k1_2 * k2_9 * k3 +
        5280 * k1 * k2_10 * k3 - 9900 * k2_11 * k3 - 33000 * k1_10 * k3_2 +
        6600 * k1_9 * k2 * k3_2 + 171000 * k1_8 * k2_2 * k3_2 -
        72375 * k1_7 * k2_3 * k3_2 - 218640 * k1_6 * k2_4 * k3_2 +
        2400 * k1_5 * k2_5 * k3_2 - 218640 * k1_4 * k2_6 * k3_2 -
        72375 * k1_3 * k2_7 * k3_2 + 171000 * k1_2 * k2_8 * k3_2 +
        6600 * k1 * k2_9 * k3_2 - 33000 * k2_10 * k3_2 + 13200 * k1_9 * k3_3 -
        15840 * k1_8 * k2 * k3_3 - 1830 * k1_7 * k2_2 * k3_3 +
        17526 * k1_6 * k2_3 * k3_3 - 31944 * k1_5 * k2_4 * k3_3 -
        31944 * k1_4 * k2_5 * k3_3 + 17526 * k1_3 * k2_6 * k3_3 -
        1830 * k1_2 * k2_7 * k3_3 - 15840 * k1 * k2_8 * k3_3 +
        13200 * k2_9 * k3_3 + 99000 * k1_8 * k3_4 - 19800 * k1_7 * k2 * k3_4 -
        262800 * k1_6 * k2_2 * k3_4 + 71490 * k1_5 * k2_3 * k3_4 -
        202320 * k1_4 * k2_4 * k3_4 + 71490 * k1_3 * k2_5 * k3_4 -
        262800 * k1_2 * k2_6 * k3_4 - 19800 * k1 * k2_7 * k3_4 +
        99000 * k2_8 * k3_4 + 19800 * k1_7 * k3_5 + 15840 * k1_6 * k2 * k3_5 -
        139740 * k1_5 * k2_2 * k3_5 - 61002 * k1_4 * k2_3 * k3_5 -
        61002 * k1_3 * k2_4 * k3_5 - 139740 * k1_2 * k2_5 * k3_5 +
        15840 * k1 * k2_6 * k3_5 + 19800 * k2_7 * k3_5 - 99000 * k1_6 * k3_6 +
        19800 * k1_5 * k2 * k3_6 + 91800 * k1_4 * k2_2 * k3_6 -
        30540 * k1_3 * k2_3 * k3_6 + 91800 * k1_2 * k2_4 * k3_6 +
        19800 * k1 * k2_5 * k3_6 - 99000 * k2_6 * k3_6 - 39600 * k1_5 * k3_7 -
        5280 * k1_4 * k2 * k3_7 + 72650 * k1_3 * k2_2 * k3_7 +
        72650 * k1_2 * k2_3 * k3_7 - 5280 * k1 * k2_4 * k3_7 -
        39600 * k2_5 * k3_7 + 33000 * k1_4 * k3_8 - 6600 * k1_3 * k2 * k3_8 -
        6600 * k1 * k2_3 * k3_8 + 33000 * k2_4 * k3_8 + 16500 * k1_3 * k3_9 +
        16500 * k2_3 * k3_9) *
      pi * q_16;

  kernel_poly[15] =
      -(30240 * k1_8 * k2_3 + 30240 * k1_7 * k2_4 - 60480 * k1_6 * k2_5 -
        60480 * k1_5 * k2_6 + 30240 * k1_4 * k2_7 + 30240 * k1_3 * k2_8 -
        6600 * k1_10 * k3 + 1320 * k1_9 * k2 * k3 + 34200 * k1_8 * k2_2 * k3 -
        3891 * k1_7 * k2_3 * k3 - 27600 * k1_6 * k2_4 * k3 +
        4512 * k1_5 * k2_5 * k3 - 27600 * k1_4 * k2_6 * k3 -
        3891 * k1_3 * k2_7 * k3 + 34200 * k1_2 * k2_8 * k3 +
        1320 * k1 * k2_9 * k3 - 6600 * k2_10 * k3 - 8250 * k1_9 * k3_2 +
        42750 * k1_7 * k2_2 * k3_2 - 31110 * k1_6 * k2_3 * k3_2 -
        43710 * k1_5 * k2_4 * k3_2 - 43710 * k1_4 * k2_5 * k3_2 -
        31110 * k1_3 * k2_6 * k3_2 + 42750 * k1_2 * k2_7 * k3_2 -
        8250 * k2_9 * k3_2 + 19800 * k1_8 * k3_3 - 3960 * k1_7 * k2 * k3_3 -
        52560 * k1_6 * k2_2 * k3_3 + 12744 * k1_5 * k2_3 * k3_3 -
        32400 * k1_4 * k2_4 * k3_3 + 12744 * k1_3 * k2_5 * k3_3 -
        52560 * k1_2 * k2_6 * k3_3 - 3960 * k1 * k2_7 * k3_3 +
        19800 * k2_8 * k3_3 + 24750 * k1_7 * k3_4 - 65700 * k1_5 * k2_2 * k3_4 -
        30330 * k1_4 * k2_3 * k3_4 - 30330 * k1_3 * k2_4 * k3_4 -
        65700 * k1_2 * k2_5 * k3_4 + 24750 * k2_7 * k3_4 - 19800 * k1_6 * k3_5 +
        3960 * k1_5 * k2 * k3_5 + 18360 * k1_4 * k2_2 * k3_5 -
        5688 * k1_3 * k2_3 * k3_5 + 18360 * k1_2 * k2_4 * k3_5 +
        3960 * k1 * k2_5 * k3_5 - 19800 * k2_6 * k3_5 - 24750 * k1_5 * k3_6 +
        22950 * k1_3 * k2_2 * k3_6 + 22950 * k1_2 * k2_3 * k3_6 -
        24750 * k2_5 * k3_6 + 6600 * k1_4 * k3_7 - 1320 * k1_3 * k2 * k3_7 -
        1320 * k1 * k2_3 * k3_7 + 6600 * k2_4 * k3_7 + 8250 * k1_3 * k3_8 +
        8250 * k2_3 * k3_8) *
      pi * q_17;

  kernel_poly[16] =
      -(7560 * k1_7 * k2_3 - 15120 * k1_5 * k2_5 + 7560 * k1_3 * k2_7 -
        1650 * k1_9 * k3 + 8550 * k1_7 * k2_2 * k3 - 2190 * k1_6 * k2_3 * k3 -
        4710 * k1_5 * k2_4 * k3 - 4710 * k1_4 * k2_5 * k3 -
        2190 * k1_3 * k2_6 * k3 + 8550 * k1_2 * k2_7 * k3 - 1650 * k2_9 * k3 -
        5040 * k1_5 * k2_3 * k3_2 - 5040 * k1_3 * k2_5 * k3_2 +
        4950 * k1_7 * k3_3 - 13140 * k1_5 * k2_2 * k3_3 -
        4050 * k1_4 * k2_3 * k3_3 - 4050 * k1_3 * k2_4 * k3_3 -
        13140 * k1_2 * k2_5 * k3_3 + 4950 * k2_7 * k3_3 -
        2520 * k1_3 * k2_3 * k3_4 - 4950 * k1_5 * k3_5 +
        4590 * k1_3 * k2_2 * k3_5 + 4590 * k1_2 * k2_3 * k3_5 -
        4950 * k2_5 * k3_5 + 1650 * k1_3 * k3_7 + 1650 * k2_3 * k3_7) *
      pi * q_18;

  kernel_beta[0] =
      (pi *
       ((-840 * k1_10 * k2_7 * sqr(k2_2 - q_2) *
         (-8 * k3_4 + 5 * k3_2 * q_2 + 3 * q_4)) /
            sqrt(k3_2 * (k2_2 - q_2) + q_2 * (k1_2 - k2_2 + q_2)) -
        (840 * k1_7 * k2_10 * sqr(k1_2 - q_2) *
         (-8 * k3_4 + 5 * k3_2 * q_2 + 3 * q_4)) /
            sqrt(k3_2 * (k1_2 - q_2) + q_2 * (-k1_2 + k2_2 + q_2)) +
        (17280 * k1_7 * k2_7 * k3_3 * sqr(k1_2 - q_2) * sqr(k2_2 - q_2)) /
            sqrt(k1_2 * (k2_2 - q_2) + q_2 * (-k2_2 + k3_2 + q_2)) -
        (17280 * k1_7 * k2_7 * k3_3 * sqr(k1_2 - q_2) * sqr(k2_2 - q_2) *
         sqr(1 - sqrt(k1_2 * k2_2 + (-k1_2 - k2_2 + k3_2) * q_2 + q_4) /
                     (k3 * q))) /
            (sqrt(k1_2 * (k2_2 - q_2) + q_2 * (-k2_2 + k3_2 + q_2)) *
             sqr(1 + sqrt(k1_2 * k2_2 + (-k1_2 - k2_2 + k3_2) * q_2 + q_4) /
                         (k3 * q))) +
        (840 * k1_7 * k2_10 * sqr(k1_2 - q_2) *
         (-8 * k3_4 + 5 * k3_2 * q_2 + 3 * q_4) *
         sqr(1 -
             sqrt(k1_2 * k3_2 - (k1_2 - k2_2 + k3_2) * q_2 + q_4) / (k2 * q))) /
            (sqrt(k3_2 * (k1_2 - q_2) + q_2 * (-k1_2 + k2_2 + q_2)) *
             sqr(1 + sqrt(k1_2 * k3_2 - (k1_2 - k2_2 + k3_2) * q_2 + q_4) /
                         (k2 * q))) +
        (840 * k1_10 * k2_7 * sqr(k2_2 - q_2) *
         (-8 * k3_4 + 5 * k3_2 * q_2 + 3 * q_4) *
         sqr(1 - sqrt(k2_2 * k3_2 - (-k1_2 + k2_2 + k3_2) * q_2 + q_4) /
                     (k1 * q))) /
            (sqrt(k3_2 * (k2_2 - q_2) + q_2 * (k1_2 - k2_2 + q_2)) *
             sqr(1 + sqrt(k2_2 * k3_2 - (-k1_2 + k2_2 + k3_2) * q_2 + q_4) /
                         (k1 * q))))) /
      (2.483712e7 * k1_9 * k2_9 * q_5);

  kernel_beta[1] =
      -(pi * (k1_2 - q_2) *
        (13 * k1_12 + 55 * k2_6 * q_6 - k1_10 * (194 * k2_2 + 649 * q_2) +
         k1_8 * (17 * k2_4 + 2297 * k2_2 * q_2 + 563 * q_4) +
         k3_6 * (329 * k1_6 + 647 * k1_4 * q_2 - 921 * k1_2 * q_4 - 55 * q_6) +
         k1_6 *
             (164 * k2_6 - 2155 * k2_4 * q_2 - 2428 * k2_2 * q_4 + 73 * q_6) +
         k1_4 * (339 * k2_6 * q_2 + 2423 * k2_4 * q_4 + 157 * k2_2 * q_6) -
         3 * k1_2 * (186 * k2_6 * q_4 + 95 * k2_4 * q_6) +
         k3_4 * (1579 * k1_8 + 165 * k2_2 * q_6 +
                 k1_6 * (306 * k2_2 - 1759 * q_2) +
                 k1_4 * (-1307 * k2_2 * q_2 + 333 * q_4) +
                 3 * k1_2 * (428 * k2_2 * q_4 - 51 * q_6)) +
         k3_2 * (-1921 * k1_10 - 165 * k2_4 * q_6 +
                 3 * k1_8 * (392 * k2_2 + 971 * q_2) +
                 k1_6 * (801 * k2_4 - 3414 * k2_2 * q_2 + 25 * q_4) +
                 k1_4 * (321 * k2_4 * q_2 - 784 * k2_2 * q_4 + 135 * q_6) +
                 3 * k1_2 * (65 * k2_4 * q_4 + 146 * k2_2 * q_6))) *
        sqr(k1 + q) * small_beta(k1, q)) /
      (1655808.0 * k1_9 * k2_2 * q_5);

  kernel_beta[2] =
      -(pi * (k2_2 - q_2) *
        (k3_6 * (329 * k2_6 + 647 * k2_4 * q_2 - 921 * k2_2 * q_4 - 55 * q_6) +
         k1_6 * (164 * k2_6 + 339 * k2_4 * q_2 - 558 * k2_2 * q_4 + 55 * q_6) +
         k2_6 * (13 * k2_6 - 649 * k2_4 * q_2 + 563 * k2_2 * q_4 + 73 * q_6) +
         k1_4 * (17 * k2_8 - 2155 * k2_6 * q_2 + 2423 * k2_4 * q_4 -
                 285 * k2_2 * q_6) +
         k1_2 * (-194 * k2_10 + 2297 * k2_8 * q_2 - 2428 * k2_6 * q_4 +
                 157 * k2_4 * q_6) +
         k3_4 * (1579 * k2_8 - 1759 * k2_6 * q_2 + 333 * k2_4 * q_4 -
                 153 * k2_2 * q_6 +
                 k1_2 * (306 * k2_6 - 1307 * k2_4 * q_2 + 1284 * k2_2 * q_4 +
                         165 * q_6)) +
         k3_2 *
             (-1921 * k2_10 + 2913 * k2_8 * q_2 + 25 * k2_6 * q_4 +
              135 * k2_4 * q_6 +
              3 * k1_4 *
                  (267 * k2_6 + 107 * k2_4 * q_2 + 65 * k2_2 * q_4 - 55 * q_6) +
              2 * k1_2 *
                  (588 * k2_8 - 1707 * k2_6 * q_2 - 392 * k2_4 * q_4 +
                   219 * k2_2 * q_6))) *
        sqr(k2 + q) * small_beta(k2, q)) /
      (1655808.0 * k1_2 * k2_9 * q_5);

  kernel_beta[3] = (pi * (8 * k3_2 + 3 * q_2) *
                    (-15 * (k1_2 + k2_2) * k3_8 - 2 * k3_10 -
                     3 * sqr(k1_2 - k2_2) * q_4 * (k1_2 + k2_2 + 4 * q_2) +
                     2 * k3_6 *
                         (8 * k1_4 + 8 * k2_4 + 23 * k2_2 * q_2 - q_4 +
                          k1_2 * (-16 * k2_2 + 23 * q_2)) +
                     k3_4 * (k1_6 + k2_6 - 56 * k2_4 * q_2 - 47 * k2_2 * q_4 +
                             4 * q_6 - k1_4 * (9 * k2_2 + 56 * q_2) +
                             k1_2 * (-9 * k2_4 + 136 * k2_2 * q_2 - 47 * q_4)) +
                     2 * k3_2 * q_2 *
                         (k1_6 + k2_6 + 26 * k2_4 * q_2 + 4 * k2_2 * q_4 -
                          k1_4 * (k2_2 - 26 * q_2) -
                          k1_2 * (k2_4 + 48 * k2_2 * q_2 - 4 * q_4))) *
                    sqr(k3 + q) * small_beta(k3, q)) /
                   (236544.0 * k1_2 * k2_2 * k3_5 * q_5);

  kernel_beta[4] =
      (3 * k3_3 * pi * (k1_2 - q_2) * (k2_2 - q_2) * big_beta(k1, k2, k3, q)) /
          (4312. * k1_2 * k2_2 * q_5) -
      (k2 * pi * (k1_2 - q_2) * (-8 * k3_2 - 3 * q_2) *
       big_beta(k3, k1, k2, q)) /
          (29568. * k1_2 * q_5) -
      (k1 * pi * (k2_2 - q_2) * (-8 * k3_2 - 3 * q_2) *
       big_beta(k2, k3, k1, q)) /
          (29568. * k2_2 * q_5);

  kernel_poly_sum = 0.0;
  for (int i = 0; i < 17; i++)
    kernel_poly_sum +=
        kernel_poly[i] / (776160.0 * k1_5 * k2_5 * k3 * q_4 * qua(k1 + q) *
                          qua(k2 + q) * qua(k3 + q) * (k3 + q));

  kernel_beta_sum = 0.0;
  for (int i = 0; i < 5; i++)
    kernel_beta_sum += kernel_beta[i];

  kernel = 4.0 * (kernel_poly_sum + kernel_beta_sum);

  return kernel;
}
